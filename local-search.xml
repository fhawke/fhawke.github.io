<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>字符串常量池与insern方法测试</title>
    <link href="/2020/10/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%8Einsern%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/10/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%8Einsern%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="深入理解Java虚拟机案例代码P63代码"><a href="#深入理解Java虚拟机案例代码P63代码" class="headerlink" title="深入理解Java虚拟机案例代码P63代码"></a><strong>深入理解Java虚拟机案例代码P63代码</strong></h2><p><strong>首先给出代码</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.java.stackoverflow;<span class="hljs-keyword">import</span> java.util.HashSet;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 运行时常量池导致的内存溢出异常</span><span class="hljs-comment"> * 由于在JDK7以后，字符串常量池从方法区移动到了Java堆区，</span><span class="hljs-comment"> * 因此我们需要显示Java堆区的最大容量便可以很轻易的让程序出现OOM</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * -Xmx6M</span><span class="hljs-comment"> * OutOfMemoryError:GC overhead limit exceeded</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RuntimeConstantPoolOOM</span> </span>&#123;<span class="hljs-comment">//    public static void main(String[] args) &#123;</span><span class="hljs-comment">//        Set&lt;String&gt; set = new HashSet&lt;String&gt;();</span><span class="hljs-comment">//        short i = 0;</span><span class="hljs-comment">//        while(true)&#123;</span><span class="hljs-comment">//            set.add(String.valueOf(i++).intern());</span><span class="hljs-comment">//        &#125;</span><span class="hljs-comment">//    &#125;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    String str1 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"计算机"</span>).append(<span class="hljs-string">"软件"</span>).toString();    System.out.println(str1.intern() == str1);    String str3 = <span class="hljs-string">"java"</span>;    <span class="hljs-comment">//创建str3 == java，那么字符串常量池中已经有java，那么str2创建的java字符串在Java堆内存中</span>    <span class="hljs-comment">//自然，判断str2 == str3的话，地址不同，显然为false</span>    String str2 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"ja"</span>).append(<span class="hljs-string">"va"</span>).toString();    <span class="hljs-comment">//System.out.println(str3==str2);</span>    <span class="hljs-comment">//由于java字符串已经在字符串常量池中有引用，不符合intern方法的“首次遇到”原则，因此判断也是false</span>    <span class="hljs-comment">//如果注释掉String str3 = "java";  那么判断就会返回true，因为字符串常量池中并没有java，所以str2.intern方法会返回一个引用</span>    <span class="hljs-comment">// 这个引用与str2相同，因此返回true</span>    System.out.println(str2.intern() == str2);&#125;&#125;</code></pre><blockquote><p>方法的解释在代码注释中已经写的很清晰了，在这里再做以下总结</p></blockquote><ul><li>首先，本次环境是JDK8，书上给出案例是7</li><li>书上给出代码与本地实现有差别，具体差别表现在</li></ul><pre><code class="hljs java">String str2 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"ja"</span>).append(<span class="hljs-string">"va"</span>).toString();System.out.println(str2.intern() == str2);</code></pre><ul><li>书上给出的答案为 false ，原因如下<ul><li>因为”Java”这个字符串在执行<code>String-Builder-toString()</code>的时候就已经出现过了，那么字符串常量池就有他的引用</li><li>而对于<code>intern</code>方法，如果在常量池中没有字符串的引用，那么就生成一个在常量池中的引用，相反，则不生成，生成的引用和堆中的对象地址相同</li><li>在这里已经有<code>java</code>的引用了，不符合intern方法要求首次遇到的原则，那么判断自然会返回<strong>false</strong></li></ul></li><li>注意，书上的环境为JDK7，<code>java</code>在加载<code>sun.misc.Version</code>这个类的时候进入常量池</li><li>现在，在JDK8的环境下，以上代码运行结果为<strong>true</strong>，原因是在JDK8中并没有把Java加载进入字符串常量池</li><li>那么我们必须要在程序的开头加上一句<code>String str3 = &quot;java&quot;;</code> 这样我们就定义了一个字符串 <code>java</code>进入常量池，这样intern就不会返回和堆中对象地址相同的引用，自然也会返回false</li></ul>]]></content>
    
    
    <categories>
      
      <category>深入理解java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串常量池&amp;Java方法堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建乘积数组</title>
    <link href="/2020/10/19/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/"/>
    <url>/2020/10/19/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a><a href="https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/" target="_blank" rel="noopener">构建乘积数组</a></h1><p>给定一个数组 <code>A[0,1,…,n-1]</code>，请构建一个数组 <code>B[0,1,…,n-1]</code>，其中 <code>B</code> 中的元素 <code>B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]</code>。不能使用除法。</p><p><strong>示例:</strong></p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]输出: [<span class="hljs-number">120</span>,<span class="hljs-number">60</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">24</span>]</code></pre><p><strong>提示：</strong></p><ul><li>所有元素乘积之和不会溢出 32 位整数</li><li><code>a.length &lt;= 100000</code></li></ul><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>由于题目规定，不能使用除法，那么我们只能使用乘法生成数组B，列出表格（对称遍历）</p><img src="/2020/10/19/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/hexo\source\_posts\构建乘积数组\6056c7a5009cb7a4674aab28505e598c502a7f7c60c45b9f19a8a64f31304745-Picture1.png" srcset="/img/loading.gif" alt="6056c7a5009cb7a4674aab28505e598c502a7f7c60c45b9f19a8a64f31304745-Picture1" style="zoom:67%;"><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">constructArr</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; a)</span> </span>&#123;        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(a.<span class="hljs-built_in">size</span>())</span></span>;        <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> b;        b[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt; a.<span class="hljs-built_in">size</span>();i++)        &#123;            b[i] = b[i<span class="hljs-number">-1</span>] * a[i<span class="hljs-number">-1</span>];        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>;i &gt;= <span class="hljs-number">0</span>;i--)        &#123;            tmp *= a[i+<span class="hljs-number">1</span>];            b[i] *= tmp;        &#125;        <span class="hljs-keyword">return</span> b;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>股票的最大利润</title>
    <link href="/2020/10/19/%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/"/>
    <url>/2020/10/19/%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="股票的最大利润"><a href="#股票的最大利润" class="headerlink" title="股票的最大利润"></a><a href="https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/" target="_blank" rel="noopener">股票的最大利润</a></h1><p><strong>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</strong></p><p><strong>示例 1:</strong></p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]输出: <span class="hljs-number">5</span>解释: 在第 <span class="hljs-number">2</span> 天（股票价格 = <span class="hljs-number">1</span>）的时候买入，在第 <span class="hljs-number">5</span> 天（股票价格 = <span class="hljs-number">6</span>）的时候卖出，最大利润 = <span class="hljs-number">6</span><span class="hljs-number">-1</span> = <span class="hljs-number">5</span> 。     注意利润不能是 <span class="hljs-number">7</span><span class="hljs-number">-1</span> = <span class="hljs-number">6</span>, 因为卖出价格需要大于买入价格。</code></pre><p><strong>示例 2:</strong></p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]输出: <span class="hljs-number">0</span>解释: 在这种情况下, 没有交易完成, 所以最大利润为 <span class="hljs-number">0</span>。</code></pre><p><strong>限制：</strong></p><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= 数组长度 &lt;= <span class="hljs-number">10</span>^<span class="hljs-number">5</span></code></pre><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li><p>迭代模拟</p><p>要求获利最大，那么自然的思路就是：在买入的时候我们每次都选择价格最小的时间，作为买入时间。然后在买入的每一天都卖出去，求利润进行比较，选最大的利润</p><ul><li>定义mini，表示买入的价格 <code>mini = min(mini,prices[i])</code></li><li>定义res,表示利润 <code>res = max(res,prices[i]-mini)</code></li><li>遍历所有时间，得到最大利润</li></ul></li></ul><ul><li><strong>AC代码</strong></li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span>&#123;        <span class="hljs-keyword">int</span> dp[prices.<span class="hljs-built_in">size</span>()];        <span class="hljs-keyword">int</span> mini = INT_MAX,res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; prices.<span class="hljs-built_in">size</span>();i++)        &#123;            mini = <span class="hljs-built_in">min</span>(mini,prices[i]);            res  = <span class="hljs-built_in">max</span>(res,prices[i]-mini);        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre><ul><li><p><strong>动态规划</strong></p><p>定义动态规划之前，要注意两个点</p><ul><li>定义什么数组来表示各个阶段的状态</li><li>如何得到递推方程</li></ul></li><li><p>这里我们定义dp[n] [2]  表示前n个阶段的状态</p><p>dp[i] [0] 表示前 i 天，没有持有股票状态下的最大利润</p><ul><li><strong>转移方程： <code>dp[i][0] = max(dp[i-1][0],dp[i-1][1]+prices[i])</code></strong></li></ul><p>dp[i] [1] 表示前 i 天，持有股票状态下的最大利润</p><ul><li><strong>转移方程：<code>dp[i][1] = max(dp[i-1][1],0-prices[i])</code></strong></li></ul><p>注意到上方的转移方程，本来应该是 <code>dp[i-1][0]-prices[i]</code>，但是题目要求股票只能买卖一次，0表示未进行股票交易的初始金额，所以如果用 dp[i-1] [0]就代表可能在i-1天完成了多次股票交易，与题意不符</p></li><li><p><strong>AC代码</strong></p></li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span>&#123;        <span class="hljs-keyword">if</span> (prices.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> dp[<span class="hljs-number">200010</span>][<span class="hljs-number">2</span>];        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -prices[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; prices.<span class="hljs-built_in">size</span>(); i ++) &#123;            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + prices[i]);            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>], <span class="hljs-number">0</span> - prices[i]);        &#125;        <span class="hljs-keyword">return</span> dp[prices.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>圆圈中最后剩下的数字</title>
    <link href="/2020/10/19/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2020/10/19/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="圆圈中最后剩下的数字"><a href="#圆圈中最后剩下的数字" class="headerlink" title="圆圈中最后剩下的数字"></a><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" target="_blank" rel="noopener">圆圈中最后剩下的数字</a></h1><p><strong>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</strong></p><p><strong>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</strong></p><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入: n = <span class="hljs-number">5</span>, m = <span class="hljs-number">3</span>输出: <span class="hljs-number">3</span></code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs angelscript">输入: n = <span class="hljs-number">10</span>, m = <span class="hljs-number">17</span>输出: <span class="hljs-number">2</span></code></pre><p><strong>限制：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= m &lt;= 10^6</code></li></ul><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>​    <strong>这个问题本质上是一个约瑟夫环问题</strong></p><blockquote><p>N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。</p></blockquote><ul><li>首先我们规定 <code>F（n,m）</code>是指n个人，数到第m个被移出队列，然后m+1为下一轮报数的第一个人</li></ul><p>那么引自LeetCode上的题解</p><p><img src="/2020/10/19/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/F:%5Chexo%5Csource_posts%5C%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97%5Cd7768194055df1c3d3f6b503468704606134231de62b4ea4b9bdeda7c58232f4-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF1.png" srcset="/img/loading.gif" alt="d7768194055df1c3d3f6b503468704606134231de62b4ea4b9bdeda7c58232f4-约瑟夫环1"></p><ul><li>根据上图我们很明显的知道， <strong>最后剩下的人序号一定为0</strong></li><li>那么，我们反向推理 <code>N=7 -&gt; N=8</code>的过程</li><li>首先将被移出队列的 <code>C</code>重新添加到队列，然后发现溢出，那么就将溢出的m个元素放到队列头部，这时候要注意取余，<strong>取余的值是当前队列长度</strong></li></ul><p><img src="/2020/10/19/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/F:%5Chexo%5Csource_posts%5C%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97%5C68509352d82d4a19678ed67a5bde338f86c7d0da730e3a69546f6fa61fb0063c-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF2.png" srcset="/img/loading.gif" alt="68509352d82d4a19678ed67a5bde338f86c7d0da730e3a69546f6fa61fb0063c-约瑟夫环2"></p><ul><li>那么我们就可以总结出规律 <code>F(n,m) = [f(n-1,m)+m]%n</code></li><li>写出代码，使用循环，让 i从2开始，递增到n，最后得到最后一个人的初始下标，返回即可</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lastRemaining</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;        <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;i++)        &#123;            pos = (pos + m) % i;        &#125;        <span class="hljs-keyword">return</span> pos;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>约瑟夫环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro简单实例</title>
    <link href="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <url>/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Shiro-Springboot简单实例"><a href="#Shiro-Springboot简单实例" class="headerlink" title="Shiro+Springboot简单实例"></a>Shiro+Springboot简单实例</h3><h2 id="Shiro原理"><a href="#Shiro原理" class="headerlink" title="Shiro原理"></a>Shiro原理</h2><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014144409975.png" srcset="/img/loading.gif" alt="image-20201014144409975"></p><p><strong>Authentication（认证）, Authorization（授权）, Session Management（会话管理）, Cryptography（加密）被 Shiro 框架的开发团队称之为应用安全的四大基石</strong></p><ul><li><strong>Authentication（认证）：</strong>用户身份识别，通常被称为用户“登录”</li><li><strong>Authorization（授权）：</strong>访问控制。比如某个用户是否具有某个操作的使用权限。</li><li><strong>Session Management（会话管理）：</strong>特定于用户的会话管理,甚至在非web 或 EJB 应用程序。</li><li><strong>Cryptography（加密）：</strong>在对数据源使用加密算法加密的同时，保证易于使用。</li></ul><p><strong>还有其他的功能来支持和加强这些不同应用环境下安全领域的关注点。特别是对以下的功能支持：</strong></p><ul><li><strong>Web支持：</strong>Shiro的Web支持API有助于保护Web应用程序。</li><li><strong>缓存：</strong>缓存是Apache Shiro API中的第一级，以确保安全操作保持快速和高效。</li><li><strong>并发性：</strong>Apache Shiro支持具有并发功能的多线程应用程序。</li><li><strong>测试：</strong>存在测试支持，可帮助您编写单元测试和集成测试，并确保代码按预期得到保障。</li><li><strong>“运行方式”：</strong>允许用户承担另一个用户的身份(如果允许)的功能，有时在管理方案中很有用。</li><li><strong>“记住我”：</strong>记住用户在会话中的身份，所以用户只需要强制登录即可。</li></ul><p>在概念层，Shiro 架构包含三个主要的理念：Subject,SecurityManager和 Realm。下面的图展示了这些组件如何相互作用，我们将在下面依次对其进行描述。</p><p><strong>注意：</strong> Shiro不会去维护用户、维护权限，这些需要我们自己去设计/提供，然后通过相应的接口注入给Shiro</p><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014145202465.png" srcset="/img/loading.gif" alt="image-20201014145202465"></p><ul><li><strong>Subject：</strong>当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它–当前和软件交互的任何事件。</li><li><strong>SecurityManager：</strong>管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。</li><li><strong>Realms：</strong>用于进行权限信息的验证，我们自己实现。Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。</li></ul><p>我们需要实现<strong>Realms的Authentication 和 Authorization</strong>。其中 <strong>Authentication 是用来验证用户身份</strong>，<strong>Authorization 是授权访问控制</strong>，用于对用户进行的操作授权，证明该用户是否允许进行当前操作，如访问某个链接，某个资源文件等。</p><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014145609711.png" srcset="/img/loading.gif" alt="image-20201014145609711"></p><p><strong>使用SpringBoot，Shiro，hibernate正向工程</strong></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014143224277.png" srcset="/img/loading.gif" alt="image-20201014143224277"></p><h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lsh<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>shiro-demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><pre><code class="hljs properties"><span class="hljs-comment">#thymeleaf 配置</span><span class="hljs-meta">spring.thymeleaf.mode</span>=<span class="hljs-string">HTML5</span><span class="hljs-meta">spring.thymeleaf.encoding</span>=<span class="hljs-string">UTF-8</span><span class="hljs-meta">spring.thymeleaf.servlet.content-type</span>=<span class="hljs-string">text/html</span><span class="hljs-comment">#缓存设置为false, 这样修改之后马上生效，便于调试</span><span class="hljs-meta">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><span class="hljs-comment">#数据库</span><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/testdb?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">123456</span><span class="hljs-meta">spring.jpa.properties.hibernate.hbm2ddl.auto</span>=<span class="hljs-string">update</span><span class="hljs-comment">#显示SQL语句</span><span class="hljs-meta">spring.jpa.show-sql</span>=<span class="hljs-string">true</span><span class="hljs-comment">#不加下面这句则不会默认创建MyISAM引擎的数据库</span><span class="hljs-meta">spring.jpa.database-platform</span>=<span class="hljs-string">org.hibernate.dialect.MySQL5InnoDBDialect</span><span class="hljs-comment">#自己重写的配置类，默认使用utf8编码</span><span class="hljs-meta">spring.jpa.properties.hibernate.dialect</span>=<span class="hljs-string">com.lsh.shirodemo.config.MySQLConfig</span></code></pre><h2 id="首先编写各个阶层，然后用注解生成数据库表"><a href="#首先编写各个阶层，然后用注解生成数据库表" class="headerlink" title="首先编写各个阶层，然后用注解生成数据库表"></a>首先编写各个阶层，然后用注解生成数据库表</h2><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014143320080.png" srcset="/img/loading.gif" alt="image-20201014143320080"></p><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@Entity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysPermission</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue</span>    <span class="hljs-keyword">private</span> Long id; <span class="hljs-comment">// 主键.</span>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 权限名称,如 user:select</span>    <span class="hljs-keyword">private</span> String description; <span class="hljs-comment">// 权限描述,用于UI显示</span>    <span class="hljs-keyword">private</span> String url; <span class="hljs-comment">// 权限地址.</span>    <span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"permissions"</span>&#125;)    <span class="hljs-meta">@ManyToMany</span>(fetch = FetchType.EAGER)    <span class="hljs-meta">@JoinTable</span>(name = <span class="hljs-string">"SysRolePermission"</span>,            joinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"permissionId"</span>)&#125;,            inverseJoinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"roleId"</span>)&#125;)    <span class="hljs-keyword">private</span> List&lt;SysRole&gt; roles; <span class="hljs-comment">// 一个权限可以被多个角色使用</span>    <span class="hljs-comment">/** getter and setter */</span>&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@Entity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysRole</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue</span>    <span class="hljs-keyword">private</span> Long id; <span class="hljs-comment">// 主键.</span>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 角色名称,如 admin/user</span>    <span class="hljs-keyword">private</span> String description; <span class="hljs-comment">// 角色描述,用于UI显示</span>    <span class="hljs-comment">// 角色 -- 权限关系：多对多</span>    <span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"roles"</span>&#125;)    <span class="hljs-meta">@ManyToMany</span>(fetch = FetchType.EAGER)    <span class="hljs-meta">@JoinTable</span>(name = <span class="hljs-string">"SysRolePermission"</span>,            joinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"roleId"</span>)&#125;,            inverseJoinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"permissionId"</span>)&#125;)    <span class="hljs-keyword">private</span> List&lt;SysPermission&gt; permissions;    <span class="hljs-comment">// 用户 -- 角色关系：多对多</span>    <span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"roles"</span>&#125;)    <span class="hljs-meta">@ManyToMany</span>    <span class="hljs-meta">@JoinTable</span>(name = <span class="hljs-string">"SysUserRole"</span>,            joinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"roleId"</span>)&#125;,            inverseJoinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"uid"</span>)&#125;)    <span class="hljs-keyword">private</span> List&lt;UserInfo&gt; userInfos;<span class="hljs-comment">// 一个角色对应多个用户</span>    <span class="hljs-comment">/** getter and setter */</span>&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@Entity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue</span>    <span class="hljs-keyword">private</span> Long id; <span class="hljs-comment">// 主键.</span>    <span class="hljs-meta">@Column</span>(unique = <span class="hljs-keyword">true</span>)    <span class="hljs-keyword">private</span> String username; <span class="hljs-comment">// 登录账户,唯一.</span>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 名称(匿名或真实姓名),用于UI显示</span>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">// 密码.</span>    <span class="hljs-keyword">private</span> String salt; <span class="hljs-comment">// 加密密码的盐</span>    <span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"userInfos"</span>&#125;)    <span class="hljs-meta">@ManyToMany</span>(fetch = FetchType.EAGER) <span class="hljs-comment">// 立即从数据库中进行加载数据</span>    <span class="hljs-meta">@JoinTable</span>(name = <span class="hljs-string">"SysUserRole"</span>,            joinColumns = <span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"uid"</span>),            inverseJoinColumns = <span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"roleId"</span>))    <span class="hljs-keyword">private</span> List&lt;SysRole&gt; roles; <span class="hljs-comment">// 一个用户具有多个角色</span>    <span class="hljs-comment">/** getter and setter */</span>&#125;</code></pre><p><strong>然后运行主程序就可以生成数据库表</strong></p><p><strong>插入数据</strong></p><pre><code class="hljs mysql">INSERT INTO &#96;user_info&#96; (&#96;id&#96;,&#96;name&#96;,&#96;password&#96;,&#96;salt&#96;,&#96;username&#96;) VALUES (1, &#39;管理员&#39;,&#39;951cd60dec2104024949d2e0b2af45ae&#39;, &#39;xbNIxrQfn6COSYn1&#x2F;GdloA&#x3D;&#x3D;&#39;, &#39;wmyskxz&#39;);INSERT INTO &#96;sys_permission&#96; (&#96;id&#96;,&#96;description&#96;,&#96;name&#96;,&#96;url&#96;) VALUES (1,&#39;查询用户&#39;,&#39;userInfo:view&#39;,&#39;&#x2F;userList&#39;);INSERT INTO &#96;sys_permission&#96; (&#96;id&#96;,&#96;description&#96;,&#96;name&#96;,&#96;url&#96;) VALUES (2,&#39;增加用户&#39;,&#39;userInfo:add&#39;,&#39;&#x2F;userAdd&#39;);INSERT INTO &#96;sys_permission&#96; (&#96;id&#96;,&#96;description&#96;,&#96;name&#96;,&#96;url&#96;) VALUES (3,&#39;删除用户&#39;,&#39;userInfo:delete&#39;,&#39;&#x2F;userDelete&#39;);INSERT INTO &#96;sys_role&#96; (&#96;id&#96;,&#96;description&#96;,&#96;name&#96;) VALUES (1,&#39;管理员&#39;,&#39;admin&#39;);INSERT INTO &#96;sys_role_permission&#96; (&#96;permission_id&#96;,&#96;role_id&#96;) VALUES (1,1);INSERT INTO &#96;sys_role_permission&#96; (&#96;permission_id&#96;,&#96;role_id&#96;) VALUES (2,1);INSERT INTO &#96;sys_user_role&#96; (&#96;role_id&#96;,&#96;uid&#96;) VALUES (1,1);</code></pre><ul><li>dao ：只编写一个测试方法，其他的都直接返回，简单的验证权限即可</li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserInfoDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">UserInfo</span>,<span class="hljs-title">Long</span>&gt; </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">findByUsername</span><span class="hljs-params">(String username)</span></span>;&#125;</code></pre><ul><li>service和impl </li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserInfoService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">findByUsername</span><span class="hljs-params">(String username)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfoServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserInfoService</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    UserInfoDao userInfoDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">findByUsername</span><span class="hljs-params">(String username)</span> </span>&#123;        <span class="hljs-keyword">return</span> userInfoDao.findByUsername(username);    &#125;&#125;</code></pre><h2 id="Config包下编写shiro和mysql配置类"><a href="#Config包下编写shiro和mysql配置类" class="headerlink" title="Config包下编写shiro和mysql配置类"></a>Config包下编写shiro和mysql配置类</h2><h3 id="MySQLConfig"><a href="#MySQLConfig" class="headerlink" title="MySQLConfig"></a>MySQLConfig</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQLConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MySQL5InnoDBDialect</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTableTypeString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"ENGINE=InnoDB DEFAULT CHARSET=utf8"</span>;    &#125;&#125;<span class="hljs-comment">//这个文件关联的是配置文件中最后一个配置，是让 Hibernate 默认创建 InnoDB 引擎并默认使用 utf-8 编码</span></code></pre><h3 id="MyShiroRealm"><a href="#MyShiroRealm" class="headerlink" title="MyShiroRealm"></a>MyShiroRealm</h3><p><strong>自定义Realm</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.shirodemo.config;<span class="hljs-keyword">import</span> com.lsh.shirodemo.entity.SysPermission;<span class="hljs-keyword">import</span> com.lsh.shirodemo.entity.SysRole;<span class="hljs-keyword">import</span> com.lsh.shirodemo.entity.UserInfo;<span class="hljs-keyword">import</span> com.lsh.shirodemo.service.UserInfoService;<span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<span class="hljs-keyword">import</span> javax.annotation.Resource;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyShiroRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    UserInfoService userInfoService;    <span class="hljs-comment">//Authorization权限认证授予，进入此方法代表身份认证已经通过</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> </span>&#123;        <span class="hljs-comment">//进入这里说明已经通过认证了</span>        <span class="hljs-comment">//获得所有用户信息</span>        UserInfo userInfo = (UserInfo)principalCollection.getPrimaryPrincipal();        <span class="hljs-comment">//定义实例返回</span>        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();        <span class="hljs-keyword">for</span>(SysRole role : userInfo.getRoles())&#123;            <span class="hljs-comment">//添加角色名</span>            simpleAuthorizationInfo.addRole(role.getName());            <span class="hljs-keyword">for</span>(SysPermission permission:role.getPermissions())&#123;                <span class="hljs-comment">//添加角色权限</span>                simpleAuthorizationInfo.addStringPermission(permission.getName());            &#125;        &#125;        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;        <span class="hljs-comment">//根据Token获取用户名</span>        String username = (String)authenticationToken.getPrincipal();        <span class="hljs-comment">//根据username获得用户详细信息</span>        UserInfo userInfo = userInfoService.findByUsername(username);        <span class="hljs-keyword">if</span>(userInfo == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-comment">//构造方法实例返回</span>        SimpleAuthenticationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(                userInfo,                userInfo.getPassword(),                ByteSource.Util.bytes(userInfo.getSalt()),                getName()        );        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;    &#125;&#125;</code></pre><h3 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a><strong>ShiroConfig</strong></h3><p>Apache Shiro 的核心通过 Filter 来实现，就好像 SpringMvc 通过 DispachServlet 来主控制一样。 既然是使用 Filter 一般也就能猜到，是通过URL规则来进行过滤和权限校验，所以我们需要定义一系列关于URL的规则和访问权限。</p><p>Filter Chain定义说明：</p><ul><li>1、一个URL可以配置多个Filter，使用逗号分隔</li><li>2、当设置多个过滤器时，全部验证通过，才视为通过</li><li>3、部分过滤器可指定参数，如perms，roles</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.shirodemo.config;<span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<span class="hljs-keyword">import</span> org.apache.shiro.mgt.SecurityManager;<span class="hljs-keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;<span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;<span class="hljs-keyword">import</span> java.util.LinkedHashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">shirFilter</span><span class="hljs-params">(SecurityManager securityManager)</span> </span>&#123;        System.out.println(<span class="hljs-string">"ShiroConfiguration.shirFilter()"</span>);        <span class="hljs-comment">//定义返回实例，实例需要setSecurityManager（传入参数）</span>        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();        shiroFilterFactoryBean.setSecurityManager(securityManager);        <span class="hljs-comment">// 拦截器.</span>        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, String&gt;();        <span class="hljs-comment">// 配置不会被拦截的链接 顺序判断</span>        filterChainDefinitionMap.put(<span class="hljs-string">"/static/**"</span>, <span class="hljs-string">"anon"</span>);        <span class="hljs-comment">// 配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span>        filterChainDefinitionMap.put(<span class="hljs-string">"/logout"</span>, <span class="hljs-string">"logout"</span>);        <span class="hljs-comment">// &lt;!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span>        <span class="hljs-comment">// &lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span>        filterChainDefinitionMap.put(<span class="hljs-string">"/**"</span>, <span class="hljs-string">"authc"</span>);        <span class="hljs-comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span>        shiroFilterFactoryBean.setLoginUrl(<span class="hljs-string">"/login"</span>);        <span class="hljs-comment">// 登录成功后要跳转的链接</span>        shiroFilterFactoryBean.setSuccessUrl(<span class="hljs-string">"/index"</span>);        <span class="hljs-comment">//未授权界面;</span>        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="hljs-string">"/403"</span>);        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);        <span class="hljs-keyword">return</span> shiroFilterFactoryBean;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 凭证匹配器</span><span class="hljs-comment">     * （由于我们的密码校验交给Shiro的SimpleAuthenticationInfo进行处理了）</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> HashedCredentialsMatcher <span class="hljs-title">hashedCredentialsMatcher</span><span class="hljs-params">()</span> </span>&#123;        HashedCredentialsMatcher hashedCredentialsMatcher = <span class="hljs-keyword">new</span> HashedCredentialsMatcher();        hashedCredentialsMatcher.setHashAlgorithmName(<span class="hljs-string">"md5"</span>); <span class="hljs-comment">// 散列算法:这里使用MD5算法;</span>        hashedCredentialsMatcher.setHashIterations(<span class="hljs-number">2</span>); <span class="hljs-comment">// 散列的次数，比如散列两次，相当于 md5(md5(""));</span>        <span class="hljs-keyword">return</span> hashedCredentialsMatcher;    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> MyShiroRealm <span class="hljs-title">myShiroRealm</span><span class="hljs-params">()</span> </span>&#123;        MyShiroRealm myShiroRealm = <span class="hljs-keyword">new</span> MyShiroRealm();        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());        <span class="hljs-keyword">return</span> myShiroRealm;    &#125;<span class="hljs-comment">//securityManager注册Realm规则（自定义）</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> SecurityManager <span class="hljs-title">securityManager</span><span class="hljs-params">()</span> </span>&#123;        DefaultWebSecurityManager securityManager = <span class="hljs-keyword">new</span> DefaultWebSecurityManager();        securityManager.setRealm(myShiroRealm());        <span class="hljs-keyword">return</span> securityManager;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 开启shiro aop注解支持.</span><span class="hljs-comment">     * 使用代理方式;所以需要开启代码支持;</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> securityManager</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="hljs-title">authorizationAttributeSourceAdvisor</span><span class="hljs-params">(SecurityManager securityManager)</span> </span>&#123;        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="hljs-keyword">new</span> AuthorizationAttributeSourceAdvisor();        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);        <span class="hljs-keyword">return</span> authorizationAttributeSourceAdvisor;    &#125;    <span class="hljs-meta">@Bean</span>(name = <span class="hljs-string">"simpleMappingExceptionResolver"</span>)    <span class="hljs-keyword">public</span> SimpleMappingExceptionResolver    createSimpleMappingExceptionResolver() &#123;        SimpleMappingExceptionResolver r = <span class="hljs-keyword">new</span> SimpleMappingExceptionResolver();        Properties mappings = <span class="hljs-keyword">new</span> Properties();        mappings.setProperty(<span class="hljs-string">"DatabaseException"</span>, <span class="hljs-string">"databaseError"</span>); <span class="hljs-comment">// 数据库异常处理</span>        mappings.setProperty(<span class="hljs-string">"UnauthorizedException"</span>, <span class="hljs-string">"403"</span>);        r.setExceptionMappings(mappings);  <span class="hljs-comment">// None by default</span>        r.setDefaultErrorView(<span class="hljs-string">"error"</span>);    <span class="hljs-comment">// No default</span>        r.setExceptionAttribute(<span class="hljs-string">"ex"</span>);     <span class="hljs-comment">// Default is "exception"</span>        <span class="hljs-comment">//r.setWarnLogCategory("example.MvcLogger");     // No default</span>        <span class="hljs-keyword">return</span> r;    &#125;&#125;</code></pre><h2 id="Controller测试"><a href="#Controller测试" class="headerlink" title="Controller测试"></a>Controller测试</h2><h3 id="HomeController"><a href="#HomeController" class="headerlink" title="HomeController"></a>HomeController</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.shirodemo.controller;<span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(&#123;<span class="hljs-string">"/"</span>,<span class="hljs-string">"/index"</span>&#125;)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"/index"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/login"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest request, Map&lt;String,Object&gt; map)</span></span>&#123;        System.out.println(<span class="hljs-string">"HomeController.login()"</span>);        String exception = (String)request.getAttribute(<span class="hljs-string">"shiroLoginFailure"</span>);        System.out.println(<span class="hljs-string">"exception="</span>+exception);        String msg = <span class="hljs-string">""</span>;        <span class="hljs-keyword">if</span>(exception!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">if</span>(UnknownAccountException<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getName</span>().<span class="hljs-title">equals</span>(<span class="hljs-title">exception</span>))</span>&#123;                System.out.println(<span class="hljs-string">"UnknownAccountException--=&gt;账户不存在"</span>);                msg = <span class="hljs-string">"UnknownAccountException--=&gt;账户不存在"</span>;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (IncorrectCredentialsException<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getName</span>().<span class="hljs-title">equals</span>(<span class="hljs-title">exception</span>)) </span>&#123;                System.out.println(<span class="hljs-string">"IncorrectCredentialsException -- &gt; 密码不正确："</span>);                msg = <span class="hljs-string">"IncorrectCredentialsException -- &gt; 密码不正确："</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"kaptchaValidateFailed"</span>.equals(exception)) &#123;                System.out.println(<span class="hljs-string">"kaptchaValidateFailed -- &gt; 验证码错误"</span>);                msg = <span class="hljs-string">"kaptchaValidateFailed -- &gt; 验证码错误"</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                msg = <span class="hljs-string">"else &gt;&gt; "</span>+exception;                System.out.println(<span class="hljs-string">"else -- &gt;"</span> + exception);            &#125;        &#125;        map.put(<span class="hljs-string">"msg"</span>,msg);        <span class="hljs-keyword">return</span> <span class="hljs-string">"/login"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/403"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">unauthorizedRole</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">"-----没有权限-----"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"403"</span>;    &#125;&#125;</code></pre><h3 id="UserInfoController"><a href="#UserInfoController" class="headerlink" title="UserInfoController"></a>UserInfoController</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.shirodemo.controller;<span class="hljs-keyword">import</span> com.lsh.shirodemo.entity.UserInfo;<span class="hljs-keyword">import</span> com.lsh.shirodemo.service.UserInfoService;<span class="hljs-keyword">import</span> org.apache.shiro.authz.annotation.RequiresPermissions;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<span class="hljs-keyword">import</span> javax.annotation.Resource;<span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfoController</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    UserInfoService userInfoService;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 按username取出账户信息</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/userList"</span>)    <span class="hljs-meta">@RequiresPermissions</span>(<span class="hljs-string">"userInfo:view"</span>)   <span class="hljs-comment">//权限管理</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">findUserInfoByUsername</span><span class="hljs-params">(@RequestParam String username)</span></span>&#123;        <span class="hljs-keyword">return</span> userInfoService.findByUsername(username);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 模拟增加账户，有权限管理</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/userAdd"</span>)    <span class="hljs-meta">@RequiresPermissions</span>(<span class="hljs-string">"userInfo:add"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addUserInfo</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"addUserInfo success!"</span>;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/userDelete"</span>)    <span class="hljs-meta">@RequiresPermissions</span>(<span class="hljs-string">"userInfo:delete"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteUserInfo</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"deleteUserInfo success!"</span>;    &#125;&#125;</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>编写好程序后就可以启动，首先访问<code>http://localhost:8080/userList?username=wmyskxz</code>页面，由于没有登录就会跳转到我们配置好的<code>http://localhost:8080/login</code>页面。登陆之后就会看到正确返回的JSON数据，上面这些操作时候触发<code>MyShiroRealm.doGetAuthenticationInfo()</code>这个方法，也就是登录认证的方法。</li><li>登录之后，我们还能访问<code>http://localhost:8080/userAdd</code>页面，因为我们在数据库中提前配置好了权限，能够看到正确返回的数据，但是我们访问<code>http://localhost:8080/userDelete</code>时，就会返回错误页面.</li></ol>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>和为s的连续正数序列</title>
    <link href="/2020/10/02/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/"/>
    <url>/2020/10/02/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-57-II-和为s的连续正数序列"><a href="#剑指-Offer-57-II-和为s的连续正数序列" class="headerlink" title="剑指 Offer 57 - II. 和为s的连续正数序列"></a><a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/" target="_blank" rel="noopener">剑指 Offer 57 - II. 和为s的连续正数序列</a></h1><p><strong>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</strong></p><p><strong>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</strong></p><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入：target = <span class="hljs-number">9</span>输出：[[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]</code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs angelscript">输入：target = <span class="hljs-number">15</span>输出：[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]]</code></pre><p><strong>解题思路：滑动窗口</strong></p><ul><li>也没什么好说的，简单来说就是双指针首先同时指向一个位置，如果窗口内的和小于目标值，那么就扩大，右边增加，同时增加窗口和，如果小于，就缩小，左边减少，同时减少窗口和。</li><li>直接上代码</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">findContinuousSequence</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span> </span>&#123;        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; vec;        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">1</span>,sum = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(i &lt;= target/<span class="hljs-number">2</span>)        &#123;            <span class="hljs-keyword">if</span>(sum &lt; target)            &#123;                sum += j;                j++;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &gt; target)            &#123;                sum -= i;                i++;            &#125;            <span class="hljs-keyword">else</span>            &#123;                <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = i;k &lt; j;k++)                &#123;                    ans.push_back(k);                &#125;                vec.push_back(ans);                sum -= i;                i++;            &#125;        &#125;        <span class="hljs-keyword">return</span> vec;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组中的逆序对</title>
    <link href="/2020/09/28/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <url>/2020/09/28/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-51-数组中的逆序对"><a href="#剑指-Offer-51-数组中的逆序对" class="headerlink" title="剑指 Offer 51. 数组中的逆序对"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">剑指 Offer 51. 数组中的逆序对</a></h1><p><strong>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</strong></p><p><strong>示例 1:</strong></p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]输出: <span class="hljs-number">5</span></code></pre><p><strong>限制：</strong></p><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= 数组长度 &lt;= <span class="hljs-number">50000</span></code></pre><p><strong>解题思路:</strong></p><p>此题要求两个数字的逆序对，首先，暴力法不可能实现，因为此题难度为hard，那么我们自然要寻找其他方法</p><p>由于题目要求：<strong>前面一个数字大于后面数字，则组成逆序对</strong></p><p>那么我们可以想到使用 <strong>归并排序</strong> ，因为归并的过程中首先拆分，然后自然的进行1对1的大小比对，进行排序，我们只需要在过程中加入一个变量count进行累加，便可以return回结果</p><p><strong>那么题目思路确认：归并排序改动</strong></p><p><strong>如何确认count的自增呢？</strong>这是一个非常重要的问题，可以看下面的解释</p><p>下面摘自 <a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/solution/shu-zu-zhong-de-ni-xu-dui-by-leetcode-solution/" target="_blank" rel="noopener">LeetCode官方题解</a></p><p>那么求逆序对和归并排序又有什么关系呢？关键就在于「归并」当中「并」的过程。我们通过一个实例来看看。</p><p>假设我们有两个已排序的序列等待合并，分别是 <code>L = { 8, 12, 16, 22, 100 }``L={8,12,16,22,100}</code> 和 <code>R = { 9, 26, 55, 64, 91 }``R={9,26,55,64,91}</code></p><p>一开始我们用指针 lPtr = 0 指向 L 的首部，rPtr = 0 指向 R 的头部。记已经合并好的部分为 M。</p><pre><code class="hljs angelscript">L = [<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">100</span>]   R = [<span class="hljs-number">9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">55</span>, <span class="hljs-number">64</span>, <span class="hljs-number">91</span>]  M = []     |                          |   lPtr                       rPtr</code></pre><p>我们发现 <code>lPtr</code> 指向的元素小于 <code>rPtr</code> 指向的元素，于是把 <code>lPtr</code> 指向的元素放入答案，并把 <code>lPtr</code> 后移一位。</p><pre><code class="hljs angelscript">L = [<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">100</span>]   R = [<span class="hljs-number">9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">55</span>, <span class="hljs-number">64</span>, <span class="hljs-number">91</span>]  M = [<span class="hljs-number">8</span>]        |                       |      lPtr                     rPtr</code></pre><p>这个时候我们把左边的 <strong>8</strong> 加入了答案，我们发现右边没有数比 <strong>8</strong> 小，所以 <strong>8</strong> 对逆序对总数的「贡献」为 <strong>0</strong>。</p><p>接着我们继续合并，把 <strong>9</strong> 加入了答案，此时 <code>lPtr</code> 指向 <strong>12</strong>，<code>rPtr</code> 指向 <strong>26</strong>。</p><pre><code class="hljs angelscript">L = [<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">100</span>]   R = [<span class="hljs-number">9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">55</span>, <span class="hljs-number">64</span>, <span class="hljs-number">91</span>]  M = [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>]        |                          |       lPtr                       rPtr</code></pre><p>此时 <code>lPtr</code> 比 <code>rPtr</code> 小，把 lPtr 对应的数加入答案，并考虑它对逆序对总数的贡献为 <code>rPtr</code> 相对<strong>R</strong>首位置的偏移 <strong>1</strong>（即右边只有一个数比 12 小，所以只有它和 12 构成逆序对），以此类推。</p><p>我们发现用这种「算贡献」的思想在合并的过程中计算逆序对的数量的时候，只在 lPtr 右移的时候计算，是基于这样的事实：当前 <code>lPtr</code> 指向的数字比 <code>rPtr</code> 小，但是比 RR 中 <code>[0 ... rPtr - 1]</code> 的其他数字大，<code>[0 ... rPtr - 1]</code> 的其他数字本应当排在 lPtr 对应数字的左边，但是它排在了右边，所以这里就贡献了 <code>rPtr</code> 个逆序对。</p><p><strong>实际上，如果令 j = mid + 1, j在归并排序过程中发生变化，如果是nums[i] &lt; nums[j] ，那么增加的逆序数对就是 <code>j - (mid + 1)</code></strong></p><p><strong>AC代码：</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(n)</span></span>;        <span class="hljs-keyword">return</span> mergeSort(nums,tmp,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; tmp,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;        <span class="hljs-keyword">if</span>(l &gt;= r)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> mid = (l+r)/<span class="hljs-number">2</span>;        <span class="hljs-keyword">int</span> count = mergeSort(nums,tmp,l,mid) + mergeSort(nums,tmp,mid+<span class="hljs-number">1</span>,r);        <span class="hljs-keyword">int</span> i = l,j = mid+<span class="hljs-number">1</span>,pos = l;        <span class="hljs-keyword">while</span>(i &lt;= mid&amp;&amp;j &lt;= r)        &#123;            <span class="hljs-keyword">if</span>(nums[i]&lt;=nums[j])            &#123;                tmp[pos] = nums[i];                i++;                count += (j - (mid+<span class="hljs-number">1</span>));            &#125;<span class="hljs-keyword">else</span>&#123;                tmp[pos] = nums[j];                j++;            &#125;            pos++;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = i;k &lt;= mid;k++)        &#123;            tmp[pos++] = nums[k];            count += (j - (mid+<span class="hljs-number">1</span>));        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = j;k &lt;= r;k++)        &#123;            tmp[pos++] = nums[k];        &#125;        copy(tmp.<span class="hljs-built_in">begin</span>()+l,tmp.<span class="hljs-built_in">begin</span>()+r+<span class="hljs-number">1</span>,nums.<span class="hljs-built_in">begin</span>()+l);        <span class="hljs-keyword">return</span> count;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长不含重复字符的子字符串</title>
    <link href="/2020/09/26/%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2020/09/26/%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-48-最长不含重复字符的子字符串"><a href="#剑指-Offer-48-最长不含重复字符的子字符串" class="headerlink" title="剑指 Offer 48. 最长不含重复字符的子字符串"></a><a href="https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/" target="_blank" rel="noopener">剑指 Offer 48. 最长不含重复字符的子字符串</a></h1><p><strong>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</strong></p><pre><code class="hljs makefile"><span class="hljs-section">输入: "abcabcbb"</span><span class="hljs-section">输出: 3 </span><span class="hljs-section">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span></code></pre><pre><code class="hljs makefile"><span class="hljs-section">输入: "bbbbb"</span><span class="hljs-section">输出: 1</span><span class="hljs-section">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span></code></pre><pre><code class="hljs makefile"><span class="hljs-section">输入: "pwwkew"</span><span class="hljs-section">输出: 3</span><span class="hljs-section">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3</span>请注意，你的答案必须是 子串 的长度，<span class="hljs-string">"pwke"</span> 是一个子序列，不是子串</code></pre><ul><li><code>s.length &lt;= 40000</code></li></ul><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​    这题可以用动态规划来分析：</p><ul><li><p><strong>状态定义</strong>： 设动态规划列表dp，dp[j] 代表以字符s[j] 为结尾的 “最长不重复子字符串”的长度</p></li><li><p><strong>转移方程</strong>： 固定右边界j，设字符串s[j] 左边距离最近的相同的字符串为s[i] ，s[i] = s[j]</p><ul><li>当i &lt; 0,说明s[j]左边没有相同字符，dp[j] = dp[j-1] + 1</li><li>当dp[j-1] &lt; j - i ,说明s[i] 在子字符串dp[j-1]区间之外，那么dp[j] = dp[j-1] + 1</li><li>当dp[j-1]&gt;j - i,说明s[i] 在子字符串dp[j-1]区间之中，那么dp[j] = j - i；</li></ul></li><li><p>那么得出状态转移方程</p><p>dp[j] = dp[j-1] + 1;    (dp[j-1] &lt; j - i)</p><p>dp[j] = j - i;                (dp[j-1]  &gt;= j - i)</p></li><li><p>返回值返回max(dp)，利用循环赋值找最大值即可</p></li></ul><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>,tmp = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; s.<span class="hljs-built_in">size</span>();j++)        &#123;            <span class="hljs-keyword">int</span> i = j<span class="hljs-number">-1</span>;            <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span>&amp;&amp;s[i]!=s[j]) i--;<span class="hljs-comment">//线性遍历寻找s[i] == s[j]中i的下标</span>            tmp = tmp &lt; j-i?tmp+<span class="hljs-number">1</span>:j-i;<span class="hljs-comment">//状态转移方程组</span>            res = <span class="hljs-built_in">max</span>(res,tmp);<span class="hljs-comment">//循环赋值寻找最大值</span>        &#125;        <span class="hljs-keyword">return</span> res;<span class="hljs-comment">//返回dp最大值</span>    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的子结构</title>
    <link href="/2020/09/20/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    <url>/2020/09/20/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-26-树的子结构"><a href="#剑指-Offer-26-树的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构"></a><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/" target="_blank" rel="noopener">剑指 Offer 26. 树的子结构</a></h1><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p><p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p><p>例如:<br><strong>给定的树 A:</strong>            </p><p>   3<br>  / <br>  4  5<br> / <br> 1  2</p><p><strong>给定的树 B：</strong></p><p>  4<br> /<br> 1</p><p><strong>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</strong></p><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入：A = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], B = [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]输出：<span class="hljs-literal">false</span></code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs 限制：">输入：A &#x3D; [3,4,5,1,2], B &#x3D; [4,1]输出：true</code></pre><p><strong>限制：</strong></p><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= 节点个数 &lt;= <span class="hljs-number">10000</span></code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>先序遍历树A中的每个节点na </li><li>判断树A中以na为根节点的子树是否包含树B   <strong>对应函数recur（A，B）</strong></li></ol><h4 id="recur-A-B"><a href="#recur-A-B" class="headerlink" title="recur(A,B)"></a>recur(A,B)</h4><ol><li>终止条件：<ol><li>当节点B为空：说明树B匹配完成，返回true</li><li>当节点A为空，说明已经越过树A叶子节点，返回false</li><li>当节点A和节点B的值不同，返回false</li></ol></li><li>返回值<ol><li>判断A和B的左子树节点是否相等，<code>recur(A-&gt;left,B-&gt;right)</code></li><li>判断A和B的右子树节点是否相等,   <code>recur(A-&gt;right,B-&gt;right)</code></li></ol></li></ol><h4 id="isSubStructure-A-B"><a href="#isSubStructure-A-B" class="headerlink" title="isSubStructure(A,B)"></a>isSubStructure(A,B)</h4><ol><li>空值处理，返回false</li><li>若树B是树A的子结构，满足以下三种情况<ol><li>以<strong>节点A为根节点</strong>的子树包含B  <code>recur(A,B)</code></li><li>树B是<strong>树A左子树</strong>的子结构，对应 <code>isSubStructure(A-&gt;left,B)</code></li><li>树B是<strong>树A右子树</strong>的子结构，对应 <code>isSubStructure(A-&gt;right,B)</code>；</li></ol></li></ol><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isSubStructure</span><span class="hljs-params">(TreeNode* A, TreeNode* B)</span> </span>&#123;        <span class="hljs-keyword">if</span>(A == <span class="hljs-literal">NULL</span>||B == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">return</span> recur(A,B)||isSubStructure(A-&gt;left,B)||isSubStructure(A-&gt;right,B);    &#125;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">recur</span><span class="hljs-params">(TreeNode* A,TreeNode* B)</span></span>&#123;        <span class="hljs-keyword">if</span>(B == <span class="hljs-literal">NULL</span>)   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">if</span>(A == <span class="hljs-literal">NULL</span> || A-&gt;val != B-&gt;val)   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">return</span> recur(A-&gt;left,B-&gt;left)&amp;&amp;recur(A-&gt;right,B-&gt;right);    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2020/09/16/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/09/16/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/" target="_blank" rel="noopener">剑指 Offer 24. 反转链表</a></h1><h2 id="定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。"><a href="#定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。" class="headerlink" title="定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。"></a>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</h2><p><strong>示例:</strong></p><pre><code class="hljs angelscript">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL输出: <span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;NULL</code></pre><p><strong>限制：</strong></p><p><code>0 &lt;= 节点个数 &lt;= 5000</code></p><h3 id="解题思路：双指针，就地反转"><a href="#解题思路：双指针，就地反转" class="headerlink" title="解题思路：双指针，就地反转"></a>解题思路：双指针，就地反转</h3><ul><li>首先定义两个指针 <code>pre,cur</code>，pre是cur的前一个指针，指向cur指向元素的前一个元素 <code>ListNode* pre = NULL;ListNode* cur = head;</code></li><li>定义while循环，条件是 <code>cur != NULL</code></li><li>然后，我们定义一个暂存的节点tmp指向cur的下一个元素，方便指针向后走 <code>ListNode* tmp = cur-&gt;next;</code></li><li>我们需要反转链表，那么在循环中局部反转，如何做呢？很显然，让 <code>cur-&gt;next = pre</code>即可，这样cur本来向后的指向就指向了前一个元素，达到了反转</li><li>然后 <code>pre = cur</code> 让pre指向cur ，然后 <code>cur = tmp</code>让cur向后走，直到链表所有元素全部被反转</li></ul><p><strong>AC代码</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;        ListNode* pre = <span class="hljs-literal">NULL</span>;        ListNode* cur = head;        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">NULL</span>)        &#123;            ListNode* tmp = cur-&gt;next;            cur-&gt;next = pre;            pre = cur;            cur = tmp;        &#125;        <span class="hljs-keyword">return</span> pre;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值的整数次方</title>
    <link href="/2020/09/16/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <url>/2020/09/16/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-16-数值的整数次方"><a href="#剑指-Offer-16-数值的整数次方" class="headerlink" title="剑指 Offer 16. 数值的整数次方"></a><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/" target="_blank" rel="noopener">剑指 Offer 16. 数值的整数次方</a></h4><h3 id="实现函数double-Power-double-base-int-exponent-，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。"><a href="#实现函数double-Power-double-base-int-exponent-，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。" class="headerlink" title="实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。"></a>实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。</h3><p><strong>示例 1:</strong></p><pre><code class="hljs 示例">输入: 2.00000, 10输出: 1024.00000</code></pre><p><strong>示例 2:</strong></p><pre><code class="hljs angelscript">输入: <span class="hljs-number">2.10000</span>, <span class="hljs-number">3</span>输出: <span class="hljs-number">9.26100</span></code></pre><p><strong>示例 3:</strong></p><pre><code class="hljs angelscript">输入: <span class="hljs-number">2.00000</span>, <span class="hljs-number">-2</span>输出: <span class="hljs-number">0.25000</span>解释: <span class="hljs-number">2</span><span class="hljs-number">-2</span> = <span class="hljs-number">1</span>/<span class="hljs-number">22</span> = <span class="hljs-number">1</span>/<span class="hljs-number">4</span> = <span class="hljs-number">0.25</span></code></pre><p><strong>说明:</strong></p><ul><li>-100.0 &lt; <em>x</em> &lt; 100.0</li><li><em>n</em> 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</li></ul><h4 id="解题思路：快速幂"><a href="#解题思路：快速幂" class="headerlink" title="解题思路：快速幂"></a>解题思路：快速幂</h4><p><img src="/2020/09/16/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/F:%5Chexo%5Csource_posts%5C%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9%5C40a7a874523e26cacae9c502a6e8cf8b58dba878739f17e6bb3ed6be76e97569-Picture1.png" srcset="/img/loading.gif" alt="40a7a874523e26cacae9c502a6e8cf8b58dba878739f17e6bb3ed6be76e97569-Picture1"></p><p><strong>AC代码</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">long</span> b = n;        <span class="hljs-keyword">double</span> res = <span class="hljs-number">1.0</span>;        <span class="hljs-keyword">if</span>(b &lt; <span class="hljs-number">0</span>)&#123;            x = <span class="hljs-number">1</span> / x;            b = -b;        &#125;        <span class="hljs-keyword">while</span>(b &gt; <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)  res *= x;            x *= x;            b &gt;&gt;= <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制中1的个数</title>
    <link href="/2020/09/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2020/09/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-15-二进制中1的个数"><a href="#剑指-Offer-15-二进制中1的个数" class="headerlink" title="剑指 Offer 15. 二进制中1的个数"></a><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 15. 二进制中1的个数</a></h2><h3 id="请实现一个函数，输入一个整数，输出该数二进制表示中-1-的个数。例如，把-9-表示成二进制是-1001，有-2-位是-1。因此，如果输入-9，则该函数输出-2。"><a href="#请实现一个函数，输入一个整数，输出该数二进制表示中-1-的个数。例如，把-9-表示成二进制是-1001，有-2-位是-1。因此，如果输入-9，则该函数输出-2。" class="headerlink" title="请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。"></a>请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</h3><p><strong>示例 1：</strong></p><pre><code class="hljs lsl">输入：<span class="hljs-number">00000000000000000000000000001011</span>输出：<span class="hljs-number">3</span>解释：输入的二进制串 <span class="hljs-number">00000000000000000000000000001011</span> 中，共有三位为 '<span class="hljs-number">1</span>'。</code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs lsl">输入：<span class="hljs-number">00000000000000000000000010000000</span>输出：<span class="hljs-number">1</span>解释：输入的二进制串 <span class="hljs-number">00000000000000000000000010000000</span> 中，共有一位为 '<span class="hljs-number">1</span>'。</code></pre><p><strong>示例 3：</strong></p><pre><code class="hljs lsl">输入：<span class="hljs-number">11111111111111111111111111111101</span>输出：<span class="hljs-number">31</span>解释：输入的二进制串 <span class="hljs-number">11111111111111111111111111111101</span> 中，共有 <span class="hljs-number">31</span> 位为 '<span class="hljs-number">1</span>'。</code></pre><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><ul><li>根据 <strong>与运算</strong> 定义，设二进制数字 n<em>n</em> ，则有：<ul><li>若 n &amp; 1 = 0，则n二进制 <strong>最右一位</strong> 为 0；</li><li>若 n &amp; 1 = 1，则 n二进制 <strong>最右一位</strong> 为1 。</li></ul></li><li>根据以上特点，考虑以下 <strong>循环判断</strong> ：<ul><li>判断n最右一位是否为1，根据结果计数</li><li>将n右移一位，(本题要求把数字n看作无符号数，因此使用无符号右移操作)</li></ul></li></ul><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><ul><li>初始化数量统计变量 <code>res = 0</code></li><li>循环逐位判断：当n = 0时跳出<ul><li>​    <code>res +=  n&amp;1</code>:若n&amp;1 = 1，则统计数res加</li><li><code>n &gt;&gt;= 1</code> : 将二进制数字n无符号右移一位(java中无符号右移符号为 &gt;&gt;=)</li></ul></li><li>返回res</li></ul><p><strong>AC代码</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>) &#123;            res += n &amp; <span class="hljs-number">1</span>;            n &gt;&gt;&gt;= <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人的运动范围</title>
    <link href="/2020/09/16/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
    <url>/2020/09/16/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-13-机器人的运动范围"><a href="#剑指-Offer-13-机器人的运动范围" class="headerlink" title="剑指 Offer 13. 机器人的运动范围"></a><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/" target="_blank" rel="noopener">剑指 Offer 13. 机器人的运动范围</a></h1><h3 id="地上有一个m行n列的方格，从坐标-0-0-到坐标-m-1-n-1-。一个机器人从坐标-0-0-的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格-35-37-，因为3-5-3-7-18。但它不能进入方格-35-38-，因为3-5-3-8-19。请问该机器人能够到达多少个格子？"><a href="#地上有一个m行n列的方格，从坐标-0-0-到坐标-m-1-n-1-。一个机器人从坐标-0-0-的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格-35-37-，因为3-5-3-7-18。但它不能进入方格-35-38-，因为3-5-3-8-19。请问该机器人能够到达多少个格子？" class="headerlink" title="地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？"></a>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</h3><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入：m = <span class="hljs-number">2</span>, n = <span class="hljs-number">3</span>, k = <span class="hljs-number">1</span>输出：<span class="hljs-number">3</span></code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs angelscript">输入：m = <span class="hljs-number">3</span>, n = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>输出：<span class="hljs-number">1</span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n,m &lt;= 100</code></li><li><code>0 &lt;= k &lt;= 20</code></li></ul><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h3><p>​    本题与 矩阵中的路径 类似，是典型的矩阵搜索问题，此类问题通常使用 <strong>DFS或BFS</strong>解决，此题还有2个优化的地方，分别是 <strong>数位之和计算</strong> 和 <strong>搜索方向简化</strong></p><h4 id="数位之和计算"><a href="#数位之和计算" class="headerlink" title="数位之和计算"></a>数位之和计算</h4><p>​    依题意，<code>x -&gt; x+1</code> 的时候 数位之和的增量要分类计算</p><ul><li>​    如果（x+1)%10 = 0  那么 s(x+1) = s(x) - 8</li><li>​    反之，那么s(x+1) = s(x) + 1</li></ul><p>那么就有三元表达式写法</p><pre><code class="hljs java">(x + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> != <span class="hljs-number">0</span> ? s_x + <span class="hljs-number">1</span> : s_x - <span class="hljs-number">8</span></code></pre><h4 id="搜索方向简化"><a href="#搜索方向简化" class="headerlink" title="搜索方向简化"></a>搜索方向简化</h4><p><strong>我们在搜索的过程中搜索方向可以缩减为向右和向下，而不必再向上和向左进行搜索。</strong></p><p>如下图，我们展示了 16 * 16 的地图随着限制条件 k 的放大，可行方格的变化趋势，每个格子里的值为行坐标和列坐标的数位之和，蓝色方格代表非障碍方格，即其值小于等于当前的限制条件 k。我们可以发现随着限制条件 k 的增大，(0, 0) 所在的蓝色方格区域内新加入的非障碍方格都可以由上方或左方的格子移动一步得到。而其他不连通的蓝色方格区域会随着 k 的增大而连通，且连通的时候也是由上方或左方的格子移动一步得到，因此我们可以将我们的搜索方向缩减为向右或向下。</p><p><img src="/2020/09/16/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/F:%5Chexo%5Csource_posts%5C%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4%5C2019c08d97a5868606aa510808d9b1c147e484f95e3ee90819dd118387dcb4e4-%E5%B9%BB%E7%81%AF%E7%89%8710.jpg" srcset="/img/loading.gif" alt></p><h4 id="深度优先遍历DFS"><a href="#深度优先遍历DFS" class="headerlink" title="深度优先遍历DFS"></a>深度优先遍历DFS</h4><h5 id="算法解析："><a href="#算法解析：" class="headerlink" title="算法解析："></a>算法解析：</h5><ul><li><strong>递归参数</strong>： 当前元素在矩阵中的行列索引 <code>i,j</code>，两者的数位和 <code>s1,s2</code></li><li><strong>终止条件</strong>： 当行列索引不符合要求<strong>或</strong> 当前元素已经访问过（使用visit数组判断是否遍历），返回0，代表不计入可达解</li><li><strong>递推工作</strong><ul><li>标记当前单元格，将索引 <code>i,j</code>存入visit中，代表已经被访问过</li><li>搜索下一单元格，计算当前元素的 <strong>下，右</strong> 两个方向元素的数位和，并开启下层递归</li><li><strong>回溯返回值</strong>：返回 <code>1 + 右方搜索的可达解总数 + 下方搜索的可达解总数</code>，代表从本单元格递归搜索的可达解总数</li></ul></li></ul><p><strong>AC代码</strong></p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">int</span> m, n, k;    <span class="hljs-keyword">boolean</span>[][] visited;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">this</span>.m = m; <span class="hljs-keyword">this</span>.n = n; <span class="hljs-keyword">this</span>.k = k;        <span class="hljs-keyword">this</span>.visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[m][n];        <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> si, <span class="hljs-keyword">int</span> sj)</span> </span>&#123;        <span class="hljs-keyword">if</span>(i &gt;= m || j &gt;= n || k &lt; si + sj || visited[i][j]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        visited[i][j] = <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + dfs(i + <span class="hljs-number">1</span>, j, (i + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> != <span class="hljs-number">0</span> ? si + <span class="hljs-number">1</span> : si - <span class="hljs-number">8</span>, sj) + dfs(i, j + <span class="hljs-number">1</span>, si, (j + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> != <span class="hljs-number">0</span> ? sj + <span class="hljs-number">1</span> : sj - <span class="hljs-number">8</span>);    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵中的路径</title>
    <link href="/2020/09/16/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <url>/2020/09/16/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-12-矩阵中的路径"><a href="#剑指-Offer-12-矩阵中的路径" class="headerlink" title="剑指 Offer 12. 矩阵中的路径"></a><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/" target="_blank" rel="noopener">剑指 Offer 12. 矩阵中的路径</a></h1><h4 id="请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。"><a href="#请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。" class="headerlink" title="请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。"></a>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</h4><pre><code class="hljs xml">[["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]]</code></pre><h4 id="但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。"><a href="#但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。" class="headerlink" title="但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。"></a><strong>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</strong></h4><p><strong>示例一：</strong></p><pre><code class="hljs prolog">输入：board = [[<span class="hljs-string">"A"</span>,<span class="hljs-string">"B"</span>,<span class="hljs-string">"C"</span>,<span class="hljs-string">"E"</span>],[<span class="hljs-string">"S"</span>,<span class="hljs-string">"F"</span>,<span class="hljs-string">"C"</span>,<span class="hljs-string">"S"</span>],[<span class="hljs-string">"A"</span>,<span class="hljs-string">"D"</span>,<span class="hljs-string">"E"</span>,<span class="hljs-string">"E"</span>]], word = <span class="hljs-string">"ABCCED"</span>输出：true</code></pre><p><strong>示例二：</strong></p><pre><code class="hljs nix">输入：<span class="hljs-attr">board</span> = [[<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>],[<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>]], <span class="hljs-attr">word</span> = <span class="hljs-string">"abcd"</span>输出：<span class="hljs-literal">false</span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= board.length &lt;= 200</code></li><li><code>1 &lt;= board[i].length &lt;= 200</code></li></ul><h2 id="解法：深度优先搜索DFS"><a href="#解法：深度优先搜索DFS" class="headerlink" title="解法：深度优先搜索DFS"></a>解法：深度优先搜索DFS</h2><h3 id="本题是很典型的矩阵搜索问题，可使用DFS-剪枝解决"><a href="#本题是很典型的矩阵搜索问题，可使用DFS-剪枝解决" class="headerlink" title="本题是很典型的矩阵搜索问题，可使用DFS+剪枝解决"></a>本题是很典型的矩阵搜索问题，可使用DFS+剪枝解决</h3><h5 id="算法原理："><a href="#算法原理：" class="headerlink" title="算法原理："></a>算法原理：</h5><ul><li><strong>深度优先搜索</strong>：可以理解为暴力法遍历矩阵中所有字符的可能型。DFS通过递归，先朝一个方向搜到底，再回溯至上一个节点，沿另一个方向搜索，以此类推。</li><li>剪枝：在搜索中， 遇到 <code>这条路不可能和目标字符串匹配成功</code>的情况（例如：此矩阵元素和目标字符不同，此元素已被访问），则应立即返回，称为 <code>可行性剪枝</code></li></ul><h5 id="算法解析："><a href="#算法解析：" class="headerlink" title="算法解析："></a>算法解析：</h5><ol><li><strong>标记当前矩阵元素</strong> 将<code>board[i][j]值暂存于变量tmp</code>，并修改为字符 <code>/</code>代表此元素已经被访问，防止之后搜索的时候重复访问</li><li><strong>搜索下一个单元格</strong> 由题意知道，向上下左右四个方向开启递归，使用 <code>||</code>连接（只要有一条路径可行就返回true）</li><li><strong>还原当前矩阵元素</strong> 将<code>tmp</code>暂存值还原至 <code>board[i][j]</code>元素</li></ol><p>DFS函数返回值：回溯返回值res，代表是否搜索到了字符串</p><p><strong>完整代码</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">exist</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-built_in">string</span> <span class="hljs-keyword">word</span>)</span> </span>&#123;        <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">word</span>.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">int</span> m = board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">int</span> n = board.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; m;j++)            &#123;                <span class="hljs-keyword">if</span>(dfs(board,<span class="hljs-keyword">word</span>,i,j,<span class="hljs-number">0</span>))                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-comment">//i,j为board横竖坐标，k为word上的指针，用来遍历word</span>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-built_in">string</span> <span class="hljs-keyword">word</span>,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j,<span class="hljs-keyword">int</span> k)</span></span>&#123;        <span class="hljs-keyword">if</span>(j &gt;= board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()||j &lt; <span class="hljs-number">0</span>||i &gt;= board.<span class="hljs-built_in">size</span>()||i &lt; <span class="hljs-number">0</span>||board[i][j] != <span class="hljs-keyword">word</span>[k])               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">if</span>(k == <span class="hljs-keyword">word</span>.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">char</span> tmp = board[i][j];        board[i][j] = <span class="hljs-string">'/'</span>;        <span class="hljs-keyword">bool</span> res = dfs(board,<span class="hljs-keyword">word</span>,i+<span class="hljs-number">1</span>,j,k+<span class="hljs-number">1</span>)||dfs(board,<span class="hljs-keyword">word</span>,i<span class="hljs-number">-1</span>,j,k+<span class="hljs-number">1</span>)||dfs(board,<span class="hljs-keyword">word</span>,i,j+<span class="hljs-number">1</span>,k+<span class="hljs-number">1</span>)||dfs(board,<span class="hljs-keyword">word</span>,i,j<span class="hljs-number">-1</span>,k+<span class="hljs-number">1</span>);        board[i][j] = tmp;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重建二叉树</title>
    <link href="/2020/09/15/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/09/15/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-07-重建二叉树"><a href="#剑指-Offer-07-重建二叉树" class="headerlink" title="剑指 Offer 07. 重建二叉树"></a><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 07. 重建二叉树</a></h4><h2 id="输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。"><a href="#输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。" class="headerlink" title="输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。"></a><strong>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</strong></h2><p>例如，给出</p><pre><code class="hljs angelscript">前序遍历 preorder = [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]中序遍历 inorder = [<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>]</code></pre><pre><code class="hljs angelscript"><span class="hljs-number">3</span>  / \ <span class="hljs-number">9</span>  <span class="hljs-number">20</span>   /  \  <span class="hljs-number">15</span>   <span class="hljs-number">7</span></code></pre><p><strong>限制：</strong>0 &lt;= 节点个数 &lt;= 5000</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>​    </p><h5 id="首先，我们了解二叉树基本遍历知识："><a href="#首先，我们了解二叉树基本遍历知识：" class="headerlink" title="首先，我们了解二叉树基本遍历知识："></a>首先，我们了解二叉树基本遍历知识：</h5><p>​        前序遍历特点： 节点按照【根节点|左子树|右子树】排序，以题目为例：【3|9|20 15 7】</p><p>​        中序遍历特点： 节点按照【左子树|根节点|右子树】排序，以题目为例：【9|3|15 20 7】</p><p>​    题目中指定：输入的前序遍历和中序遍历的结果都不含重复的数字，表明树中节点唯一</p><p>​    </p><h5 id="根据以上特点，按照顺序"><a href="#根据以上特点，按照顺序" class="headerlink" title="根据以上特点，按照顺序"></a>根据以上特点，按照顺序</h5><pre><code>1. 前序遍历的首个节点即是根节点`root`的值  2. 在中序遍历中搜索根节点`root`的索引，可将中序遍历划分为【左子树|根节点|右子树】  3. 根据中序遍历中的左（右）子树的节点数量，可以将前序遍历划分为【根节点|左子树|右子树】</code></pre><p><strong>自此可以确定三个节点的关系</strong>：</p><pre><code>1. 树的根节点  2. 左子树根节点  3. 右子树根节点（即前序遍历中左（右）子树的首个元素）</code></pre><p>那么我们可以使用<strong>递归</strong>的方法进行处理：每轮确定三个节点的关系</p><h4 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h4><ul><li><p><strong>递归参数</strong>： 前序遍历中根节点索引为<code>pre_root</code>, 中序遍历左边界<code>in_left</code>, 中序遍历右边界 <code>in_right</code></p></li><li><p><strong>终止条件</strong>： 当<code>in_left&gt;in_right</code> ，子树中序遍历为空，说明已经越过了叶子节点，返回<code>NULL</code></p></li><li><p><strong>递推工作</strong></p><ol><li><strong>建立根节点root</strong>：值为前序遍历中索引为pre_root的节点值</li><li><strong>搜索根节点root在中序遍历中的索引，确定左右子树</strong>：这里我们使用哈希表dic预存储中序遍历的值与索引的对应关系</li><li><strong>构建根节点root的左子树和右子树</strong>：通过调用递归函数 <code>recur()</code> 开始下一层递归<ul><li><strong>左子树</strong>：根节点索引为<code>pre_root+1</code>,中序遍历的左右边界分别为<code>in_left</code> 和 <code>i-1</code></li><li><strong>右子树</strong>：根节点索引为<code>i - in_left + pre_root + 1</code> （即：根节点索引+左子树长度+1），中序遍历的左右边界分别为 <code>i+1</code> 和  <code>in_right</code></li></ul></li></ol></li></ul><ul><li><strong>返回值</strong>：返回<code>root</code>，含义：当前递归层级建立的根节点root为上一递归层的根节点的左或右节点</li></ul><h4 id="代码展示："><a href="#代码展示：" class="headerlink" title="代码展示："></a>代码展示：</h4><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    HashMap&lt;Integer, Integer&gt; dic = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    <span class="hljs-keyword">int</span>[] po;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;        po = preorder;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; inorder.length; i++)             dic.put(inorder[i], i);        <span class="hljs-keyword">return</span> recur(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, inorder.length - <span class="hljs-number">1</span>);    &#125;    <span class="hljs-function">TreeNode <span class="hljs-title">recur</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_root, <span class="hljs-keyword">int</span> in_left, <span class="hljs-keyword">int</span> in_right)</span> </span>&#123;        <span class="hljs-keyword">if</span>(in_left &gt; in_right) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(po[pre_root]);        <span class="hljs-keyword">int</span> i = dic.get(po[pre_root]);        root.left = recur(pre_root + <span class="hljs-number">1</span>, in_left, i - <span class="hljs-number">1</span>);        root.right = recur(pre_root + i - in_left + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, in_right);        <span class="hljs-keyword">return</span> root;    &#125;&#125;作者：jyd链接：https:<span class="hljs-comment">//leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-di-gui-fa-qin/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话设计模式读后总结</title>
    <link href="/2020/09/10/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <url>/2020/09/10/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="花了7天上午的时间读完《大话设计模式》，随笔记录一下自己的收获"><a href="#花了7天上午的时间读完《大话设计模式》，随笔记录一下自己的收获" class="headerlink" title="花了7天上午的时间读完《大话设计模式》，随笔记录一下自己的收获"></a>花了7天上午的时间读完《大话设计模式》，随笔记录一下自己的收获</h1><h2 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h2><p><strong>1. 开闭原则</strong></p><p>​        开放-封闭原则 </p><p>​        大意：对于修改，我们应该封闭，对于扩展，我们应该开放。</p><p>​    当应用的需求改变时，在不修改软件的源代码前提下，可以扩展模块的功能，满足业务需求（低耦合）</p><p><strong>2. 里氏替换原则</strong></p><p>​        大意：子类可以扩展父类的功能，但不能改变父类原有的功能，也就是说子类在继承父类时，除了添加新的方法完成扩展以外，尽量不要重写父类的方法（低耦合）</p><p><strong>3.依赖倒置原则</strong></p><p>​    面向接口编程</p><p>​        大意：高层模块不应该依赖底层模块，他们都应该依赖抽象，抽象不应该依赖细节，细节应该依赖抽象（低耦合）</p><p><strong>4. 单一职责原则</strong></p><p>​        单一功能原则</p><p>​        大意：一个类应该有且仅有一个引起他变化的原因，否则类就应该被拆分（高内聚）</p><p><strong>5.接口隔离原则</strong></p><p>​        大意：程序员应该将臃肿庞大的接口拆分为更小和更具体的接口，让接口只包含客户感兴趣的方法（高内聚）</p><p><strong>6.迪米特原则</strong></p><p>​        大意：当两个类无需直接通信时，那么就不应该发生直接的相互调用，可以通过第三方转发该调用（低耦合）</p><p><strong>合成复用原则</strong></p><p>​    组合/聚合复用原则</p><p>​        大意：他要求在软件复用时，要尽量使用组合或者聚合等关联关系来实现，其次才考虑使用继承方法，如果要使用继承，必须严格遵守里氏代换原则，</p><p>因为继承会破坏类的封闭性，继承会将父类的实现细节暴露，同时子类父类耦合度高，不符合设计原理。</p><p>​        </p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot-security-demo</title>
    <link href="/2020/09/09/springboot-security-demo/"/>
    <url>/2020/09/09/springboot-security-demo/</url>
    
    <content type="html"><![CDATA[<h2 id="在这里一并介绍SpringBoot的基本布局和项目开始"><a href="#在这里一并介绍SpringBoot的基本布局和项目开始" class="headerlink" title="在这里一并介绍SpringBoot的基本布局和项目开始"></a>在这里一并介绍SpringBoot的基本布局和项目开始</h2><h4 id="这里插入Spring-Security官方网址"><a href="#这里插入Spring-Security官方网址" class="headerlink" title="这里插入Spring-Security官方网址"></a>这里插入<a href="https://www.springcloud.cc/spring-security-zhcn.html" target="_blank" rel="noopener">Spring-Security官方网址</a></h4><h4 id="1-SpringBoot-（IDEA）快速开始"><a href="#1-SpringBoot-（IDEA）快速开始" class="headerlink" title="1. SpringBoot （IDEA）快速开始"></a><strong>1. SpringBoot （IDEA）快速开始</strong></h4><p>​    Ⅰ：引入 pom.xml 文件，在IDEA中可以直接导入web,security,mysql,mybatis等各种需要的模块</p><p>​    Ⅱ：等待创建完成，然后建立各层次</p><p>​    Ⅲ：在java包下，创建以下目录：config , controller , dao , domain(entity) , security , util ,service</p><p>​    </p><p>这些类大概包括了基本项目的构造，有利于降低耦合度</p><p><strong>controller</strong>:  表现层，与web页面和html交互，可以使用 addAttribute 把变量放到前端界面，然后通过EL表达式在前端页面取值，进行操作</p><p><strong>config</strong>: 配置层，一些基本的配置，这里也可以用applications.yml/application.properites 来配置，因为对于SpringBoot，“约定大于配置” ，我们一般通过约定来规划配置，在这里我使用了java文件进行配置，更为麻烦，一般config定义配置类</p><p><strong>dao</strong>: 数据库交互层，dao层中的方法一般定义为接口，让service实现，这里定义的是mapper的方法，即是数据库基本操作语句，这里可以使用mybatis-plus使用逆向工程生成dao和mapper</p><p><strong>domain</strong>: 别名entity ， 也就是实体类，这里的定义一般与数据库的键值相同，这样会避免冲突的发生</p><p><strong>serivce</strong>: 这里有两种方法，我一般倾向于创建一个service接口与dao的代码完全相同，然后创建serviceimpl类来实现service接口，降低程序耦合性</p><p><strong>util</strong>: 工具类，看业务逻辑需要什么便可以自己定义，在这个项目定义了MD5密码加密</p><h4 id="2-使用mybatis连接数据库"><a href="#2-使用mybatis连接数据库" class="headerlink" title="2. 使用mybatis连接数据库"></a><strong>2. 使用mybatis连接数据库</strong></h4><p>在appication.properties中</p><pre><code class="hljs properties"><span class="hljs-meta">ms.db.driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-meta">ms.db.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/cache?characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span><span class="hljs-meta">ms.db.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">ms.db.password</span>=<span class="hljs-string">123456</span><span class="hljs-meta">ms.db.maxActive</span>=<span class="hljs-string">500</span><span class="hljs-meta">logging.level.org.springframework.security</span>= <span class="hljs-string">INFO</span><span class="hljs-meta">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><span class="hljs-meta">spring.main.allow-bean-definition-overriding</span>=<span class="hljs-string">true</span></code></pre><p>这里有一个需要注意的地方，ms.db.url需要设置一个serverTimezone，如果不这么做在springboot启动时会报错</p><p>这里是Mybatis基本设置</p><pre><code class="hljs java">ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();dataSource.setDriverClass(env.getProperty(<span class="hljs-string">"ms.db.driverClassName"</span>));dataSource.setJdbcUrl(env.getProperty(<span class="hljs-string">"ms.db.url"</span>));dataSource.setUser(env.getProperty(<span class="hljs-string">"ms.db.username"</span>));dataSource.setPassword(env.getProperty(<span class="hljs-string">"ms.db.password"</span>));dataSource.setMaxPoolSize(<span class="hljs-number">20</span>);dataSource.setMinPoolSize(<span class="hljs-number">5</span>);dataSource.setInitialPoolSize(<span class="hljs-number">10</span>);dataSource.setMaxIdleTime(<span class="hljs-number">300</span>);dataSource.setAcquireIncrement(<span class="hljs-number">5</span>);dataSource.setIdleConnectionTestPeriod(<span class="hljs-number">60</span>);</code></pre><h4 id="3-SpringSecurity基本配置·"><a href="#3-SpringSecurity基本配置·" class="headerlink" title="3. SpringSecurity基本配置·"></a><strong>3. SpringSecurity基本配置</strong>·</h4><p>重写2个configure方法，一个定义身份权限，一个定义拦截器，拦截各种请求和静态资源等等</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function">UserDetailsService <span class="hljs-title">customUserService</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//注册UserDetailsService 的bean</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomUserService();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        auth.userDetailsService(customUserService()).passwordEncoder(<span class="hljs-keyword">new</span> PasswordEncoder()&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> </span>&#123;                <span class="hljs-keyword">return</span> MD5Util.encode((String)rawPassword);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> </span>&#123;                <span class="hljs-keyword">return</span> encodedPassword.equals(MD5Util.encode((String)rawPassword));            &#125;&#125;); <span class="hljs-comment">//user Details Service验证</span>    &#125;    <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.authorizeRequests()                .antMatchers(<span class="hljs-string">"/css/**"</span>).permitAll()                .anyRequest().authenticated()                .and()                .formLogin()                .loginPage(<span class="hljs-string">"/login"</span>)                .failureUrl(<span class="hljs-string">"/login?error"</span>)                .permitAll()                .and()                .logout()                .permitAll();    &#125;&#125;</code></pre><p>这里是 service 层，实现UserDetailSercvice(SpringSecurity接口) ，添加用户权限</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomUserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123; <span class="hljs-comment">//自定义UserDetailsService 接口</span>    <span class="hljs-meta">@Autowired</span>    UserDao userDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> </span>&#123; <span class="hljs-comment">//重写loadUserByUsername 方法获得 userdetails 类型用户</span>        SysUser user = userDao.findByUserName(username);        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">"用户名不存在"</span>);        &#125;        <span class="hljs-comment">//System.out.println(user.getPassword());</span>        <span class="hljs-comment">//System.out.println("用户名为"+user.getUsername());</span>        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-comment">//用于添加用户的权限。只要把用户权限添加到authorities 就万事大吉。</span>        <span class="hljs-keyword">for</span>(SysRole role:user.getRoles())        &#123;            System.out.println(role.getId());            authorities.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(role.getName()));            System.out.println(role.getName());        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> org.springframework.security.core.userdetails.User(user.getUsername(),                user.getPassword(), authorities);    &#125;&#125;</code></pre><h5 id="4-util工具类-md5"><a href="#4-util工具类-md5" class="headerlink" title="4. util工具类(md5)"></a><strong>4. util工具类(md5)</strong></h5><p>MD5加密工具，将数据库密码进行加密，首先执行这个类得到加密后的password，然后使用sql语句将对应的账户密码插入数据库中，在这里，用户名与密码相同</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5Util</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SALT = <span class="hljs-string">"tamboo"</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encode</span><span class="hljs-params">(String password)</span> </span>&#123;        password = password + SALT;        MessageDigest md5 = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            md5 = MessageDigest.getInstance(<span class="hljs-string">"MD5"</span>);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);        &#125;        <span class="hljs-keyword">char</span>[] charArray = password.toCharArray();        <span class="hljs-keyword">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[charArray.length];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; charArray.length; i++)            byteArray[i] = (<span class="hljs-keyword">byte</span>) charArray[i];        <span class="hljs-keyword">byte</span>[] md5Bytes = md5.digest(byteArray);        StringBuffer hexValue = <span class="hljs-keyword">new</span> StringBuffer();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; md5Bytes.length; i++) &#123;            <span class="hljs-keyword">int</span> val = ((<span class="hljs-keyword">int</span>) md5Bytes[i]) &amp; <span class="hljs-number">0xff</span>;            <span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">16</span>) &#123;                hexValue.append(<span class="hljs-string">"0"</span>);            &#125;            hexValue.append(Integer.toHexString(val));        &#125;        <span class="hljs-keyword">return</span> hexValue.toString();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(MD5Util.encode(<span class="hljs-string">"abel"</span>));    &#125;&#125;</code></pre><h4 id="SpringSecurity知识点解读"><a href="#SpringSecurity知识点解读" class="headerlink" title="SpringSecurity知识点解读"></a><strong>SpringSecurity知识点解读</strong></h4><p>Ⅰ： 整体流程表：引用自<a href="https://blog.csdn.net/qq_22172133/article/details/86503223" target="_blank" rel="noopener">博客地址</a></p><p><img src="https://img-blog.csdnimg.cn/20190813175708861.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMTcyMTMz,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="img"></p><p>Ⅱ：注解分析</p><h4 id="1-注解-EnableWebSecurity"><a href="#1-注解-EnableWebSecurity" class="headerlink" title="1.注解@EnableWebSecurity"></a><strong>1.注解@EnableWebSecurity</strong></h4><p>​    在Springboot应用中使用<strong>Spring Security</strong>，官方提示该注解应该和<strong>@Configuration</strong>一起使用，注解<strong>WebSecurityConfige</strong>类</p><p>​    此类继承<strong>WebSecurityConfigurerAdapter</strong>，这样就构成了Spring Security的配置类</p><h4 id="2-抽象类-WebSecurityConfigurerAdapter"><a href="#2-抽象类-WebSecurityConfigurerAdapter" class="headerlink" title="2.抽象类 WebSecurityConfigurerAdapter"></a>2.抽象类 WebSecurityConfigurerAdapter</h4><p>​    在一般情况下，我们会让标注了 <strong>@Configuration</strong>和 <strong>@EnableWebSecurity *<em>类继承抽象类 *</em>WebSecurityConfigurerAdapter</strong></p><p>​    这样的话只需要重写抽象类中的方法即可完成配置</p><h4 id="方法configure（AuthenticationManagerBuilder-auth）和-configure-HttpSecurity-http"><a href="#方法configure（AuthenticationManagerBuilder-auth）和-configure-HttpSecurity-http" class="headerlink" title="方法configure（AuthenticationManagerBuilder auth）和 configure(HttpSecurity http)"></a>方法configure（AuthenticationManagerBuilder auth）和 configure(HttpSecurity http)</h4><p>第一个配置的是权限，第二个配置的是url的拦截</p><p><img src="/2020/09/09/springboot-security-demo/F:%5Chexo%5Csource_posts%5Cspringboot-security-demo%5Cimage-20200909232107390.png" srcset="/img/loading.gif" alt="image-20200909232107390"></p><p><strong>5.踩坑</strong></p><p>调试过程：</p><p>在SpringBoot启动类中，在Spring Boot2.x版本中@SpringBootApplication已经包含了@ComponentScan，无需再进行配置</p><p>在controller层中，如果加@RestController，那么在方法中return “login”    并不会跳转到login.html页面，因为@RestController方法是@ResponseBody 和 @Controller方法的合成,</p><p>直接用@Controller方法,return “login”，这样就会跳转到login.html页面</p>]]></content>
    
    
    <categories>
      
      <category>SSM实例</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>@RequestMapping错误</title>
    <link href="/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/"/>
    <url>/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>@RequestMapping</strong></p><p>​    方法添加@RequestMapping可以正常访问，但是当类上也添加注解@RequestMapping就报404错误</p><p>一般报4xx错误都是客户端问题，比如路径请求不对之类的错误。</p><p><img src="/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/F:%5Chexo%5Csource_posts%5CRequestMapping%E9%94%99%E8%AF%AF%5CQQ%E5%9B%BE%E7%89%8720200807155152.png" srcset="/img/loading.gif" alt></p><p>此处经过排查，发现是视图解析器的前缀有错</p><p>!(RequestMapping错误\QQ图片20200807155152.png)</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"WEB-INF/pages/"</span> /&gt;</span></code></pre><p>value应该是</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/pages/"</span> /&gt;</span></code></pre><p>加上之后便可以正常运行</p>]]></content>
    
    
    <categories>
      
      <category>SSM错误合集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF-Constant</title>
    <link href="/2020/07/19/ACM-UCF-Constant/"/>
    <url>/2020/07/19/ACM-UCF-Constant/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153321.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153342.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153403.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment">dp背包问题 恰好装满 每个物品可取多次 </span><span class="hljs-comment">*/</span> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><span class="hljs-keyword">int</span> C[<span class="hljs-number">8</span>];<span class="hljs-keyword">int</span> N;ll memo[<span class="hljs-number">8</span>][<span class="hljs-number">100</span>];<span class="hljs-function">ll <span class="hljs-title">go</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(n == N)        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(n&gt;N || c==<span class="hljs-number">8</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(memo[c][n] &gt; <span class="hljs-number">-1</span>)        <span class="hljs-keyword">return</span> memo[c][n];    <span class="hljs-keyword">return</span> memo[c][n] = go(c, n+C[c]) + go(c+<span class="hljs-number">1</span>, n);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//    freopen("constant.in", "r", stdin);</span><span class="hljs-comment">//    freopen("constant.out", "w", stdout);</span>    <span class="hljs-keyword">int</span> T;    <span class="hljs-built_in">cin</span>&gt;&gt;T;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> cas=<span class="hljs-number">1</span>; cas&lt;=T; cas++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">8</span>; i++)            <span class="hljs-built_in">cin</span>&gt;&gt;C[i];        <span class="hljs-built_in">cin</span>&gt;&gt;N;        <span class="hljs-built_in">memset</span>(memo, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(memo));        ll res = go(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Equation #%d: %I64d\n"</span>, cas, res);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF-PacMan</title>
    <link href="/2020/07/19/ACM-UCF-PacMan/"/>
    <url>/2020/07/19/ACM-UCF-PacMan/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719135942.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719140201.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719140649.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX=<span class="hljs-number">105</span>;<span class="hljs-keyword">int</span> board[MAX][MAX];<span class="hljs-comment">//存储游戏板信息</span><span class="hljs-keyword">int</span> best[MAX][MAX];<span class="hljs-comment">//存储最好分数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> n, r, c;<span class="hljs-comment">//游戏板数n，游戏板的行数r和列数c</span>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>; t&lt;=n; t++) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;r, &amp;c);        <span class="hljs-comment">//读取游戏板中信息</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;r; i++) &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;c; j++) &#123;                <span class="hljs-comment">//将pacman的起点和终点标记为0</span>                <span class="hljs-keyword">if</span>((!i &amp;&amp; !j) || (i==r<span class="hljs-number">-1</span> &amp;&amp; j==c<span class="hljs-number">-1</span>)) &#123;                    <span class="hljs-keyword">char</span> temp;                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">" %c"</span>, &amp;temp);                    board[i][j]=<span class="hljs-number">0</span>;                &#125;                <span class="hljs-keyword">else</span>                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;board[i][j]);            &#125;        &#125;        <span class="hljs-built_in">memset</span>(best, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(best));        <span class="hljs-comment">//填写第一行的最好分数</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;c; i++)            best[<span class="hljs-number">0</span>][i]=best[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+board[<span class="hljs-number">0</span>][i];        <span class="hljs-comment">//填写第一列的最好分数</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;r; i++)            best[i][<span class="hljs-number">0</span>]=best[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+board[i][<span class="hljs-number">0</span>];        <span class="hljs-comment">//循环遍历每个可能的Pac Man子问题并解决它</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;r; i++) &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;c; j++) &#123;                best[i][j]=<span class="hljs-built_in">max</span>(best[i<span class="hljs-number">-1</span>][j], best[i][j<span class="hljs-number">-1</span>])+board[i][j];            &#125;        &#125;        <span class="hljs-comment">//输出最终结果</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Game Board #%d: %d\n"</span>, t, best[r<span class="hljs-number">-1</span>][c<span class="hljs-number">-1</span>]);        <span class="hljs-keyword">if</span>(t&lt;n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF pentastic</title>
    <link href="/2020/07/19/ACM-UCF-pentastic/"/>
    <url>/2020/07/19/ACM-UCF-pentastic/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-pentastic/Y%5B50WK518U9FC0QRV06VJ4D.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-pentastic/QMIROO@DB6EL%5DX%7DGRSAMPXM.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-pentastic/image-20200719114428334.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">9999</span>;<span class="hljs-keyword">int</span> num[<span class="hljs-number">10</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>== x?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>+x;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>==x?<span class="hljs-number">4</span>:x<span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_mindex</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> mindex=maxn;    <span class="hljs-keyword">int</span> minval=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)    &#123;        <span class="hljs-keyword">if</span>(num[i]&lt;minval)        &#123;            mindex=i;            minval=num[i];        &#125;    &#125;    <span class="hljs-keyword">return</span> mindex;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> t;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;t);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c=<span class="hljs-number">1</span>;c&lt;=t;c++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)        &#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num[i]);        &#125;        <span class="hljs-keyword">int</span> minndex,predex,nextdex;        <span class="hljs-keyword">while</span>(find_mindex()!=maxn)        &#123;            minndex=find_mindex();            num[minndex]=-num[minndex];            predex=pre(minndex);            num[predex]-=num[minndex];            nextdex=nex(minndex);            num[nextdex]-=num[minndex];        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Pentagon #%d:\n"</span>,c);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d %d %d %d\n\n"</span>,num[<span class="hljs-number">0</span>],num[<span class="hljs-number">1</span>],num[<span class="hljs-number">2</span>],num[<span class="hljs-number">3</span>],num[<span class="hljs-number">4</span>]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题 16.11. 跳水板</title>
    <link href="/2020/07/08/%E9%9D%A2%E8%AF%95%E9%A2%98-16-11-%E8%B7%B3%E6%B0%B4%E6%9D%BF/"/>
    <url>/2020/07/08/%E9%9D%A2%E8%AF%95%E9%A2%98-16-11-%E8%B7%B3%E6%B0%B4%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h4 id="面试题-16-11-跳水板"><a href="#面试题-16-11-跳水板" class="headerlink" title="面试题 16.11. 跳水板"></a><a href="https://leetcode-cn.com/problems/diving-board-lcci/" target="_blank" rel="noopener">面试题 16.11. 跳水板</a></h4><p>难度简单37收藏分享切换为英文关注反馈</p><p>你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为<code>shorter</code>，长度较长的木板长度为<code>longer</code>。你必须正好使用<code>k</code>块木板。编写一个方法，生成跳水板所有可能的长度。</p><p>返回的长度需要从小到大排列。</p><p><strong>示例：</strong></p><pre><code class="hljs angelscript">输入：shorter = <span class="hljs-number">1</span>longer = <span class="hljs-number">2</span>k = <span class="hljs-number">3</span>输出： &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;</code></pre><p><strong>提示：</strong></p><ul><li>0 &lt; shorter &lt;= longer</li><li>0 &lt;= k &lt;= 100000</li></ul><p><strong>解题思路：</strong></p><p>​    很简单的一道题目，题目给出k的范围是0~100000，那么就知道需要用O(n)的时间复杂度</p><p>​    题意中只需要设置一个变量i，就可以得到shorter的数量i和longer的数量k-i，那么Length = (k - i) * shorter + i * longer;</p><p>​    显然，这是个一次关系，变换可得 Length = (longer - shorter) * i + k * shorter;</p><p>​    那么我们给出以下代码，便可通过测试</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">divingBoard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> shorter, <span class="hljs-keyword">int</span> longer, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;();        &#125;        <span class="hljs-keyword">if</span>(shorter == longer)        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;longer*k&#125;;        &#125;                <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ves</span><span class="hljs-params">(k+<span class="hljs-number">1</span>)</span></span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; ves.<span class="hljs-built_in">size</span>();i++)        &#123;            ves.at(i) = (k - i) * shorter + i * longer;        &#125;        <span class="hljs-keyword">return</span> ves;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>LeetCode每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/06/hello-world/"/>
    <url>/2020/07/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
