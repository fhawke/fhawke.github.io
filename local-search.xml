<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>字符串的排列</title>
    <link href="/2021/01/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <url>/2021/01/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-38-字符串的排列"><a href="#剑指-Offer-38-字符串的排列" class="headerlink" title="剑指 Offer 38. 字符串的排列"></a><a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/" target="_blank" rel="noopener">剑指 Offer 38. 字符串的排列</a></h2><p>输入一个字符串，打印出该字符串中字符的所有排列。</p><p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">"abc"</span>输出：[<span class="hljs-string">"abc"</span>,<span class="hljs-string">"acb"</span>,<span class="hljs-string">"bac"</span>,<span class="hljs-string">"bca"</span>,<span class="hljs-string">"cab"</span>,<span class="hljs-string">"cba"</span>]</code></pre><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>对于这种题目，我们可以首先画出递归树，确定状态变量，确定结束条件，剪枝等</p><p><img src="/2021/01/15/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210115112828338.png" srcset="/img/loading.gif" alt="image-20210115112828338"></p><p>对于此题，我们可以使用<code>used</code>表示该字母是否已经被遍历，那么我们在固定一个字符，遍历下面的字符时，只需要判断<code>used == false</code>即可</p><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; res;    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">permutation</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> &#123;&#125;;        &#125;        <span class="hljs-built_in">string</span> temp = <span class="hljs-string">""</span>;        <span class="hljs-comment">//sort(s.begin(),s.end());</span>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">used</span><span class="hljs-params">(s.<span class="hljs-built_in">size</span>())</span></span>;        recur(s,temp,used);        <span class="hljs-keyword">return</span> res;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recur</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s,<span class="hljs-built_in">string</span>&amp; path,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&amp; used)</span></span>&#123;        <span class="hljs-keyword">if</span>(path.<span class="hljs-built_in">size</span>() == s.<span class="hljs-built_in">size</span>())&#123;            res.push_back(path);            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; s.<span class="hljs-built_in">size</span>();i++)&#123;            <span class="hljs-keyword">if</span>(!used[i])&#123;                <span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">1</span>&amp;&amp;s[i<span class="hljs-number">-1</span>] == s[i]&amp;&amp;!used[i<span class="hljs-number">-1</span>])<span class="hljs-comment">//判重剪枝</span>                <span class="hljs-keyword">continue</span>;                path.push_back(s[i]);<span class="hljs-comment">//做出选择</span>                used[i] = <span class="hljs-literal">true</span>;    <span class="hljs-comment">//设置当前已被遍历</span>                recur(s,path,used);<span class="hljs-comment">//进入下一层递归</span>                used[i] = <span class="hljs-literal">false</span>;<span class="hljs-comment">//撤销选择，回溯</span>                path.pop_back();<span class="hljs-comment">//撤销选择，回溯</span>            &#125;        &#125;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>礼物的最大价值</title>
    <link href="/2021/01/15/%E7%A4%BC%E7%89%A9%E7%9A%84%E6%9C%80%E5%A4%A7%E4%BB%B7%E5%80%BC/"/>
    <url>/2021/01/15/%E7%A4%BC%E7%89%A9%E7%9A%84%E6%9C%80%E5%A4%A7%E4%BB%B7%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-47-礼物的最大价值"><a href="#剑指-Offer-47-礼物的最大价值" class="headerlink" title="剑指 Offer 47. 礼物的最大价值"></a><a href="https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof/" target="_blank" rel="noopener">剑指 Offer 47. 礼物的最大价值</a></h2><p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p><pre><code class="hljs angelscript">输入: [  [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],  [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>],  [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]]输出: <span class="hljs-number">12</span>解释: 路径 <span class="hljs-number">1</span>→<span class="hljs-number">3</span>→<span class="hljs-number">5</span>→<span class="hljs-number">2</span>→<span class="hljs-number">1</span> 可以拿到最多价值的礼物</code></pre><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>根据题目说明，知道某单元格只可能从上边单元格或左边单元格到达</p><p>设f(i,j)为从期盼左上角走至单元格(i,j)的礼物<strong>最大累计价值</strong></p><p>动态转移方程：<code>f(i,j) = max(f(i,j-1) , f(i-1,j)) + grid[i][j]</code></p><p>AC代码：</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxValue</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;        <span class="hljs-keyword">int</span> row = grid.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">int</span> col = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; row;i++)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt;col;j++)&#123;                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>&amp;&amp;j == <span class="hljs-number">0</span>)                <span class="hljs-keyword">continue</span>;                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)  grid[i][j] += grid[i][j<span class="hljs-number">-1</span>];                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)  grid[i][j] += grid[i<span class="hljs-number">-1</span>][j];                <span class="hljs-keyword">else</span>&#123;                    grid[i][j] += <span class="hljs-built_in">max</span>(grid[i][j<span class="hljs-number">-1</span>],grid[i<span class="hljs-number">-1</span>][j]);                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> grid[row<span class="hljs-number">-1</span>][col<span class="hljs-number">-1</span>];    &#125;    &#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的镜像</title>
    <link href="/2021/01/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <url>/2021/01/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-27-二叉树的镜像"><a href="#剑指-Offer-27-二叉树的镜像" class="headerlink" title="剑指 Offer 27. 二叉树的镜像"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/" target="_blank" rel="noopener">剑指 Offer 27. 二叉树的镜像</a></h2><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><p>例如输入：</p><p>   4<br>  /  <br> 2   7<br> / \  / <br>1  3 6  9</p><p>镜像输出：</p><p>   4<br>  /  <br> 7   2<br> / \  / <br>9  6 3  1</p><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入：root = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]输出：[<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]</code></pre><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li><p>给定一个二叉树，输出镜像，那么我们要考虑到，将原二叉树的所有左右子节点交换，自然就能得到镜像二叉树</p></li><li><p>问题就到了如何<strong>交换左右子节点</strong></p></li><li><p>我们需要交换所有的左右子节点，自然可以采用递归的方式，递归的交换左右子节点，在交换过程中，首先要保存左子节点，因为要将原来的右子节点赋给镜像的左子节点，左子节点会发生改变</p></li></ul><p>那么我们的整体解题思路就很简单：首先判断边界条件，如果二叉树为空，返回NULL，然后递归遍历二叉树，交换左右子节点，即可生成二叉树的镜像</p><p>此处可以将递归的返回值作为root的左/右子节点</p><p><code>mirrorTree(TreeNode* root)函数的作用就是交换当前root的左右节点</code></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function">TreeNode* <span class="hljs-title">mirrorTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">NULL</span>)    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;        TreeNode* tmp = root-&gt;left;        root-&gt;left = mirrorTree(root-&gt;right);        root-&gt;right = mirrorTree(tmp);        <span class="hljs-keyword">return</span> root;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized</title>
    <link href="/2020/12/31/synchronized/"/>
    <url>/2020/12/31/synchronized/</url>
    
    <content type="html"><![CDATA[<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><blockquote><p>synchronized可以保证方法或代码块运行时，同一时刻只有一个方法可以进入到临界区，还可以保证共享变量的内存可见性</p></blockquote><p>同步代码块使用<code>monitorenter</code>和<code>monitorexit</code>来进入和退出同步块，对于同步方法来说，是依靠方法修饰符的<code>ACC_SYNCHRONIZED</code>完成。</p><p>无论采取哪种方式，本质上都是对monitor对象的获取，这个获取过程是排他的，也就是说，同一时刻只能有一个线程获取到由<code>synchronized</code>所保护对象的监视器</p><p>当对象由方法块或者这个对象的同步方法调用时，执行方法的线程必须先获取该对象的监视器才能进入方法块和同步方法，而没有获取到监视器的线程将会被阻塞到同步块和同步方法的入口处，进入<strong>阻塞状态</strong></p><p>Java对象头和monitor是实现synchronized的基础</p><p>Java对象头包括两部分</p><ul><li>Mark Word    标记字段，用于存储对象自身的运行时数据，比如哈希码，GC分代，锁状态标志，偏向线程ID等</li><li>Class Pointer   对象指向它的类元数据的指针，虚拟机通过这个指针来确定对象是哪个类的实例</li></ul><blockquote><p>偏向锁</p></blockquote><p>当一个线程访问同步块并获得锁时，会在对象头(Mark Word)和栈帧的锁记录里存储锁偏向的线程ID，以后线程在进入和退出同步块时，不需要通过CAS来加锁和解锁，只需简单的测试一下对象头的<code>Mark Word</code>里是否存储着指向当前线程的偏向锁，如果其他线程竞争该锁，则尝试用CAS将对象的偏向锁指向当前线程</p><blockquote><p>轻量级锁</p></blockquote><p>线程在执行同步以前，JVM会在当前线程的栈帧里创建用于存储锁记录的空间，并将对象头的<code>Mark Word</code>复制到锁记录中，官方称为<code>Displaced Mark Word</code>，然后线程尝试使用CAS将对象头中的<code>Mark Word</code>替换为指向锁记录的指针，如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程尝试使用自旋来获取锁</p>]]></content>
    
    
    <categories>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>volatile</title>
    <link href="/2020/12/31/volatile/"/>
    <url>/2020/12/31/volatile/</url>
    
    <content type="html"><![CDATA[<h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><blockquote><p>volatile就是轻量级的synchronized</p></blockquote><p>它让多处理器开发中保证了共享变量的<strong>可见性</strong>，可见性的意思是当一个线程修改一个变量时，其他变量能读到这个修改的值，如果一个字段被声明为volatile，JMM保证所有线程看到这个变量的值是一致的</p><ul><li>对任意单个volatile变量的读写具有原子性，但类似于volatile++这种复合操作不具有原子性</li><li>volatile可以保证可见性，当一个变量被volatile修饰后，线程对此变量的读取不能从本地内存中读取，必须要从主内存中读取，然后缓存到本地内存中</li><li>volatile可以保证有序性，禁止指令重排序</li></ul><p><strong>volatile可以保证线程可见性且提供了一定的有序性，但是无法保证原子性，在JVM底层，volatile使用内存屏障实现</strong></p><h2 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h2><blockquote><p>执行程序时，为了提高性能，编译器和处理器经常会对指令做重排序</p></blockquote><ul><li>编译器重排序：编译器在不改单线程程序语义的前提下，可以重新安排语句的执行顺序</li><li>处理器重排序：如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序</li></ul><h3 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h3><p><code>happens-before</code>保证了程序的<strong>有序性</strong>，它规定如果两个操作的执行顺序无法从<code>happens-before</code>原则中推导出来，那么他们就不能保证有序性，可以随意进行重排序</p><p><strong>JVM如何禁止重排序？</strong></p><p>观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码，发现加入volatile关键字时，<strong>会多出一个lock前缀指令</strong></p><p>lock前缀指令其实就相当于一个<strong>内存屏障</strong></p><p><strong>内存屏障</strong>是一组处理指令，用于实现对内存操作的顺序限制，volatile底层就是通过内存屏障实现的</p>]]></content>
    
    
    <categories>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal</title>
    <link href="/2020/12/31/ThreadLocal/"/>
    <url>/2020/12/31/ThreadLocal/</url>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>ThreadLocal：线程变量，是一个以ThreadLocal对象为键，任意对象为值的一个存储结构。</p></blockquote><p>这个结构被附带在线程上，线程可以根据一个<code>ThreadLocal</code>对象查询到绑定在这个线程的一个值</p><ul><li>Thread类中有一个成员变量属于<code>ThreadLocalMap</code>，他是一个map类，它的key是ThreadLocal的实例对象</li><li>当为<code>ThreadLocal</code>类型的变量执行<code>set</code>操作时，首先获取当前线程的<code>TheadLocalMap</code>变量，然后以<code>ThreadLocal</code>类的对象为key，设定<code>value</code>，get操作类似</li><li><code>ThreadLocal</code>变量的活动范围为某线程，是该线程独有的，这里是解决相同变量被多个线程访问的<strong>另一种思路</strong>，<code>ThreadLocal.set()</code>到线程中的对象是该线程自己使用的对象，其他线程是无法访问的，线程终止后，该值作为垃圾被回收</li><li><code>ThreadLocal</code>变量的工作原理是：每个线程独自拥有一个变量，对变量的操作是线程本地的操作</li></ul><h2 id="set-get注意点"><a href="#set-get注意点" class="headerlink" title="set/get注意点"></a>set/get注意点</h2><blockquote><p>每次<code>set/get</code>值，并不是直接使用线程<code>id</code>作为<code>TheadLocalMap</code>的key，而是使用<code>ThreadLocal</code>作为key</p></blockquote><ul><li>如果直接使用线程id作为key，无法区分放入<code>ThreadLocalMap</code>的多个value</li><li>使用<code>ThreadLocal</code>作为key，因为每一个<code>ThreadLocal</code>对象都可以由<code>ThreadLocalHashCode</code>属性唯一区分</li></ul><h3 id="那么如何保证ThreadLocalHashCode唯一呢？"><a href="#那么如何保证ThreadLocalHashCode唯一呢？" class="headerlink" title="那么如何保证ThreadLocalHashCode唯一呢？"></a>那么如何保证<code>ThreadLocalHashCode</code>唯一呢？</h3><p>​    在<code>ThreadLocal</code>类中，包含了一个<code>static AtomicInteger nextHashCode</code>类变量和一个<code>static final</code>修饰的常量(作为相邻两个<code>nextHashCode</code>的差值)。因为<code>nextHashCode</code>是类变量，所以每一次创建<code>ThreadLocal</code>对象都可以保证<code>nextHashCode</code>被更新到新的值，并且下一次调用<code>ThreadLocal</code>类这个被更新的值仍然可用，同时使用的<code>AtomicInteger</code>保证每次自增都是原子性的。</p><h2 id="ThreadLocal和线程同步机制"><a href="#ThreadLocal和线程同步机制" class="headerlink" title="ThreadLocal和线程同步机制"></a>ThreadLocal和线程同步机制</h2><blockquote><p>他们都是为了解决多线程中相同变量的访问冲突问题</p></blockquote><ul><li>在同步机制中，通过对象的锁机制保证同一时间只有一个线程访问变量，这时该变量是多个线程共享的，使用同步机制要求程序员分析什么时候对变量进行读写，较为麻烦</li><li>而<code>ThreadLocal</code>从另一个角度出发，它为每一个线程提供了一个独立的变量副本，从而隔离了多个线程对统一变量的访问冲突，因为每一个线程访问/操作的都是自己的本地变量，因此也没有必要对变量进行同步了，<code>ThreadLocal</code>提供了线程安全的共享对象</li><li>总的来说，对于多线程资源共享问题，同步机制采取了<strong>时间换空间</strong>，而<code>ThreadLocal</code>采取了<strong>空间换时间</strong>，前者提供一份变量，让不同线程排队访问，后者为每一个线程提供一份变量，同时可以相互访问不受影响</li></ul><h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h2><p><code>ThreadLocalMap</code>作为hash表的一种实现方式，是通过<strong>开放寻址法</strong>来解决哈希冲突，与HashMap不同</p><p>开放寻址法</p><ul><li>如果出现散列冲突，就重新探测一个空闲位置，将其插入，往散列表中插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用，我们就从当前位置开始，以此往后寻找，看是否由空闲位置，直到找到为止</li></ul>]]></content>
    
    
    <categories>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis:单机数据库</title>
    <link href="/2020/12/30/redis-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2020/12/30/redis-%E5%8D%95%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="单机数据库"><a href="#单机数据库" class="headerlink" title="单机数据库"></a>单机数据库</h1><h2 id="服务器中的数据库"><a href="#服务器中的数据库" class="headerlink" title="服务器中的数据库"></a>服务器中的数据库</h2><p>Redis服务器将所有数据库都保存在服务器状态<code>redis.h/redisServer</code>结构的db数组中，db数组的每个项都是一个<code>redis.h/redisDb</code>结构，每个<code>redisDb</code>结构代表一个数据库</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">redisServer</span>&#123;</span>    <span class="hljs-comment">//...</span>    <span class="hljs-comment">//一个数组，保存服务器中所有数据库</span>redisDb *db;    <span class="hljs-comment">//...</span>&#125;;</code></pre><p>在初始化服务器时，程序会根据服务器状态的dbnum属性来决定应该创建多少个数据库(默认为16个)</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">redisServer</span>&#123;</span>    <span class="hljs-comment">//...</span>    <span class="hljs-comment">//服务器的数据库数量</span>    <span class="hljs-keyword">int</span> dbnum;    <span class="hljs-comment">//...</span>&#125;</code></pre><h2 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h2><p>每个Redis客户端都有自己的目标数据库，每当客户端执行数据库写/读命令时，目标数据库会成为这些命令的操作对象</p><p>默认情况下，Redis客户端的目标数据库是0号数据库，可以通过<code>SELECT</code>命令来切换目标数据库</p><p><strong>实际上</strong></p><p>在服务器内部，客户端状态<code>redisClient</code>结构的<code>db</code>属性记录了客户端当前的目标数据库，<code>db</code>是一个指向<code>redisDb</code>结构的指针</p><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">redisClient</span>&#123;</span><span class="hljs-comment">//...</span>    <span class="hljs-comment">//记录客户端当前正在使用的数据库</span>    redisDb *db;    <span class="hljs-comment">//...</span>&#125;redisClient;</code></pre><p><strong>通过修改<code>redisClient.db</code>指针，让它指向服务器中的不同数据库，从而实现切换数据库的功能，这就是<code>SELECT</code>命令的实现原理</strong></p><h2 id="数据库键空间"><a href="#数据库键空间" class="headerlink" title="数据库键空间"></a>数据库键空间</h2><blockquote><p>Redis是一个键值对数据库服务器</p></blockquote><p>服务器中的每个数据库都由一个<code>redis.h/redisDb</code>结构表示，其中,<code>redisDb</code>结构的<code>dict</code>字典保存了数据库中的所有键值对，我们将这个字典称为键空间</p><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">redisDb</span>&#123;</span>    <span class="hljs-comment">//...</span>    <span class="hljs-comment">//数据库键空间，保存着数据库中的所有键值对</span>    dict *dict;    <span class="hljs-comment">//...</span>&#125;redisDb;</code></pre><ul><li>键空间的键也就是数据库的键，每个键都是一个字符串对象</li><li>键空间的值也就是数据库的值，每个值可以是5种基本对象中的任何一种</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><blockquote><p><code>SET,GET,DEL</code> 分别代表 添加/更新，取得，删除</p></blockquote><p><code>FLUSHDB</code>清空当前数据库</p><p><code>EXPIRE/PEXPIRE</code>    客户端可以通过这些命令，以秒/毫秒为精度为数据库中的某个键设置生存时间(TTL)</p><p><strong>过期时间是一个UNIX时间戳，当键的过期时间来临，服务器会自动从数据库中删除这个键</strong></p><h3 id="过期键删除策略"><a href="#过期键删除策略" class="headerlink" title="过期键删除策略"></a>过期键删除策略</h3><ul><li>定时删除<ul><li>在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作</li></ul></li><li>惰性删除<ul><li>放任键过期不管，但是每次从键空间获取键时，都检查取得的键是否过期，如果过期则删除</li></ul></li><li>定期删除<ul><li>每隔一段时间，程序对数据库进行一次检查，删除里面的过期键，至于要删除多少过期键，以及要检查多少数据库，由算法决定</li></ul></li></ul><p>Redis一般使用<strong>惰性删除+定期删除</strong></p><p><strong>数据库主要由<code>dict expires</code>两个字典构成，其中<code>dict</code>字典负责保存键值对，<code>expires</code>字典则负责保存键的过期时间</strong></p><h2 id="AOF-RDB"><a href="#AOF-RDB" class="headerlink" title="AOF/RDB"></a>AOF/RDB</h2><h4 id="生成RDB文件"><a href="#生成RDB文件" class="headerlink" title="生成RDB文件"></a>生成RDB文件</h4><p>在执行SAVE或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，已过期的键不会被保存到新创建的RDB文件中</p><p><strong>因此，数据库中包含过期键不会对生成新的RDB文件造成影响</strong></p><h4 id="载入RDB文件"><a href="#载入RDB文件" class="headerlink" title="载入RDB文件"></a>载入RDB文件</h4><ul><li>主服务器：载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键载入数据库，过期键被忽略</li><li>从服务器：载入RDB文件时，文件中保存的所有键全部载入到数据库，在后面的主从服务器数据同步时，从服务器的数据库被清空</li></ul><h4 id="AOF文件写入"><a href="#AOF文件写入" class="headerlink" title="AOF文件写入"></a>AOF文件写入</h4><p>服务器以AOF持久化模式运行时，如果某个键已过期，同时没有被删除，AOF文件不会因为这个过期键产生任何影响</p><p>在过期键被惰性删除或定期删除后，程序会向AOF文件追加(append)一条<code>DEL</code>命令显示的记录该键已被删除</p><h4 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h4><p>在执行AOF重写的过程中，程序会对数据库中的键做检查，已过期的键不会保存到重写后的AOF文件中</p><p>所谓重写：就是过滤重复语句</p><blockquote><p>例如</p></blockquote><pre><code class="hljs c++">RPUSH <span class="hljs-built_in">list</span> <span class="hljs-string">"a"</span> <span class="hljs-string">"b"</span>RPUSH <span class="hljs-built_in">list</span> <span class="hljs-string">"c"</span>RPUSH <span class="hljs-built_in">list</span> <span class="hljs-string">"d"</span> <span class="hljs-string">"e"</span></code></pre><p>重写后</p><pre><code class="hljs c++">RPUSH <span class="hljs-built_in">list</span> <span class="hljs-string">"a"</span> <span class="hljs-string">"b"</span> <span class="hljs-string">"c"</span> <span class="hljs-string">"d"</span> <span class="hljs-string">"e"</span></code></pre><p><strong>过滤了部分重复语句，节省了AOF文件空间</strong></p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><blockquote><p>当服务器运行在复制模式下时，从服务器的过期键删除动作由主服务器控制</p></blockquote><ul><li>主服务器在删除一个过期键后，会显式的向所有从服务器发送一个<code>DEL</code>命令，告知从服务器删除这个过期键</li><li>从服务器在执行客户端发送的读命令时，即使碰到过期键也不会主动将其删除，而是继续处理</li><li>从服务器只有在街道主服务器发送的<code>DEL</code>命令后，采后删除过期键</li></ul><p><strong>如此，通过主服务器控制从服务器统一地删除过期键，可以保证主从服务器的一致性</strong></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis:数据结构与对象</title>
    <link href="/2020/12/29/redis-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <url>/2020/12/29/redis-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与对象"><a href="#数据结构与对象" class="headerlink" title="数据结构与对象"></a>数据结构与对象</h1><h2 id="简单动态字符串-SDS"><a href="#简单动态字符串-SDS" class="headerlink" title="简单动态字符串(SDS)"></a>简单动态字符串(SDS)</h2><blockquote><p>Redis并没有使用C语言传统的字符串表示(以空字符串节为的字符数组)，而是自己构建了一种名为简单动态字符串(SDS)</p></blockquote><p>例如客户端执行命令 </p><p><code>redis: SET msg &quot;hello world&quot;</code></p><ul><li>Redis将在数据库中创建一个新的键值对</li><li>键值对的键是一个字符串对象，对象的底层实现是一个保存着字符串<code>&quot;msg&quot;</code>的<strong>SDS</strong></li><li>键值对的值也是一个字符串对象，对象的底层实现是一个保存着字符串<code>&quot;hello world&quot;</code>的<strong>SDS</strong></li></ul><p>SDS除了用来保存数据库中的字符串值以外，还可以用作缓冲区，AOF模块中的AOF缓冲区，以及客户端状态中的输入缓冲区，都是由SDS实现的</p><h3 id="The-Design-of-SDS"><a href="#The-Design-of-SDS" class="headerlink" title="The Design of SDS"></a>The Design of SDS</h3><p>每个<code>sds.h/sdshdr</code>结构表示一个SDS值</p><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sdshdr</span>&#123;</span><span class="hljs-comment">//记录buf数组已使用字节的数量</span><span class="hljs-comment">//等于SDS所保存字符串长度</span><span class="hljs-keyword">int</span> len;<span class="hljs-comment">//记录buf数组中未使用字节的数量</span><span class="hljs-keyword">int</span> <span class="hljs-built_in">free</span>;<span class="hljs-comment">//字节数组，用来保存字符串</span><span class="hljs-keyword">char</span> buf[];&#125;</code></pre><p><strong>与C的字符串一样，SDS为空字符分配额外的1字节空间，以及添加空字符到字符串末尾等操作由SDS函数自动完成，由于SDS末尾也有额外空字符，SDS也可以使用部分<code>string.h</code>函数，例如<code>print(&quot;%s&quot;,s-&gt;buf)</code></strong></p><h3 id="why-SDS"><a href="#why-SDS" class="headerlink" title="why SDS?"></a>why SDS?</h3><h4 id="1-常数复杂度获取字符串长度"><a href="#1-常数复杂度获取字符串长度" class="headerlink" title="1. 常数复杂度获取字符串长度"></a>1. 常数复杂度获取字符串长度</h4><ul><li>C字符串本身不记录自身的长度信息，如果要获取一个C字符串的长度，必须遍历整个字符串，时间复杂度<code>O(n)</code></li><li>而SDS是结构体结构，有元素<code>len</code>记录SDS本身长度，因此获取长度时间复杂度<code>O(1)</code></li><li>设置和更新SDS长度的工作是由SDS的API在执行时自动完成，使用SDS无需任何手动修改长度的工作</li></ul><h4 id="2-杜绝缓冲区溢出"><a href="#2-杜绝缓冲区溢出" class="headerlink" title="2. 杜绝缓冲区溢出"></a>2. 杜绝缓冲区溢出</h4><ul><li>C字符串不记录自身长度会带来另外一个问题：<strong>容易造成缓冲区溢出</strong><ul><li>如果使用<code>&lt;string.h&gt;/strcat</code>函数，将两个字符串进行拼接，如果事先没有声明足够长的数组，会导致出现缓冲区溢出的情况</li></ul></li><li>对于SDS来说，SDS的空间分配策略完全杜绝了发生缓冲区溢出的可能性<ul><li>当SDS API 需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足，API自动将SDS的空间扩展到执行修改所需的大小</li><li>所以使用SDS不需要手动修改空间大小，也不会出现缓冲区溢出问题</li></ul></li></ul><h4 id="3-减少修改字符串时带来的内存重分配次数"><a href="#3-减少修改字符串时带来的内存重分配次数" class="headerlink" title="3. 减少修改字符串时带来的内存重分配次数"></a>3. 减少修改字符串时带来的内存重分配次数</h4><ul><li>由于C字符串不记录自身长度，对于一个包含了N个字符串的C字符串来说，C字符串底层是一个N+1字符长的数组，因此每次增长或缩短一个字符串，程序需要对保存这个C字符串的数组进行一次<strong>内存重分配操作</strong><ul><li>如果增长字符串，例如<code>append</code>，<strong>执行操作之前</strong>，程序需要先通过内存重分配来扩展底层数组的空间大小，否则会导致缓冲区溢出</li><li>如果缩短字符串，例如<code>trim</code>，<strong>执行操作之后</strong>，程序需要通过内存重分配来释放字符串不再使用的那部分空间，否则会导致内存泄漏</li><li>内存重分配涉及的算法较为复杂，是一个比较耗时的操作</li></ul></li><li>SDS通过未使用空间<code>(free)</code>，解决了字符串长度和底层数组长度的关联，在SDS中，buf数组的长度不一定是字符数量加一，数组里面可以包含未使用的字节，长度用<code>free</code>指定<ul><li>空间预分配<ul><li>当SDS的一个API需要对SDS进行修改，并且需要对SDS进行扩展，程序不仅会为SDS分配修改所必须要的空间，<strong>还会为SDS分配额外的未使用空间</strong><ul><li>如果对SDS进行修改之后，SDS长度小于1MB，那么程序分配和<code>len</code>属性同样大小的未使用空间</li><li>如果对SDS进行修改之后，SDS长度大于等于1MB，那么程序会分配1MB的未使用空间</li></ul></li><li>这样，<strong>SDS将连续增长N此字符串所需的内存重分配次数从必定N次降低为最多N次</strong></li></ul></li><li>惰性空间释放<ul><li>惰性空间释放用于优化SDS的字符串缩短操作</li><li>当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是用<code>free</code>来将这些字节的数量记录起来</li><li>如果在进行缩短后，马上进行拼接，就可以不用进行内存重分配，直接将<code>free</code>的长度分配给需要拼接的字符串即可，提升了效率</li></ul></li></ul></li></ul><h4 id="4-二进制安全"><a href="#4-二进制安全" class="headerlink" title="4. 二进制安全"></a>4. 二进制安全</h4><blockquote><p>C字符串中的字符必须符合某种编码(ASCII)，因此字符串里面不能包含空字符，自然无法保存音频，视频，图片等二进制数据</p></blockquote><p>对于Redis，允许中间出现空字符，所以程序不会对SDS中的数据做任何的限制，过滤等情况</p><p>因此，Redis可以用SDS来保存一系列二进制数据</p><h4 id="5-兼容部分C字符串函数"><a href="#5-兼容部分C字符串函数" class="headerlink" title="5. 兼容部分C字符串函数"></a>5. 兼容部分C字符串函数</h4><p>​    前面提过，SDS同样以空字符作为结尾标志，因此它也可以使用部分<code>&lt;string.h&gt;</code>中的函数</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="left">C字符串</th><th align="left">SDS</th></tr></thead><tbody><tr><td align="left">获取字符串长度的复杂度为O(n)</td><td align="left">获取字符串长度的复杂度为O(1)</td></tr><tr><td align="left">API是不安全的，可能造成缓冲区溢出</td><td align="left">API安全，不会造成缓冲区溢出</td></tr><tr><td align="left">修改字符串N次必定执行N次内存重分配</td><td align="left">修改字符串N次最多执行N次内存重分配</td></tr><tr><td align="left">只能保存文本数据</td><td align="left">可以保存文本或二进制数据(图像，视频，音频…)</td></tr><tr><td align="left">可以使用<code>&lt;string.h&gt;</code>库中所有函数</td><td align="left">可以使用部分<code>&lt;string.h&gt;</code>库中的函数</td></tr></tbody></table><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的类型与编码"><a href="#对象的类型与编码" class="headerlink" title="对象的类型与编码"></a>对象的类型与编码</h3><p>Redis中的每个对象都由一个<code>redisObject</code>结构表示，该结构中和保存数据有关的三个属性分别是<code>type,encoding,ptr</code></p><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">redisObject</span>&#123;</span>    <span class="hljs-comment">//类型</span>    <span class="hljs-keyword">unsigned</span> type:<span class="hljs-number">4</span>;    <span class="hljs-comment">//编码</span>    <span class="hljs-keyword">unsigned</span> encoding:<span class="hljs-number">4</span>;    <span class="hljs-comment">//指向底层实现数据结构的指针</span>    <span class="hljs-keyword">void</span> *ptr;    <span class="hljs-comment">//...</span>    &#125;robj;</code></pre><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>对象的<code>type</code>属性记录了对象的类型，对于Redis数据库保存的键值对来说，键总是一个字符串对象，而值可以是字符串对象，列表对象，哈希对象，集合对象或有序集合对象中的其中一个</p><ul><li>我们称呼一个数据库键为”字符串键”时，我们指的是”这个数据库键所对应的值为字符串对象”</li></ul><h4 id="编码与底层实现"><a href="#编码与底层实现" class="headerlink" title="编码与底层实现"></a>编码与底层实现</h4><ul><li>可以使用<code>OBJECT ENCODING ...</code>来查看一个数据库键的值对象的编码</li></ul><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><blockquote><p>字符串对象的编码可以是<code>row,raw,embstr</code></p></blockquote><p>如果字符串对象保存的是一个字符串值，且字符串值的长度小于等于39字节，那么字符串对象将使用<code>embstr</code>编码的方法保存这个字符串的值</p><p><code>embstr</code>编码是专门用于保存短字符串的一种优化编码方式</p><blockquote><p>编码可转换</p></blockquote><p><code>int</code>编码的字符串对象和<code>embstr</code>编码的字符串对象在条件满足的情况下，会被转换成<code>raw</code>编码的字符串对象</p><ul><li>例如，对于<code>int</code>类型的字符串对象来说，如果我们执行命令使得这个对象保存的不再是整数值，而是一个字符串值，那么字符串对象编码会变为<code>raw</code></li></ul><h3 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h3><p>底层多为<code>ziplist,linkedlist</code></p><p><code>ziplist</code>编码的列表对象使用压缩列表作为底层实现，每个压缩列表节点保存了一个列表元素</p><p><code>linkedlist</code>编码的列表对象使用双端链表作为底层实现，每个双端链表节点都保存了一个字符串对象，每个字符串对象都保存了一个列表元素</p><h3 id="类型检查与命令多态"><a href="#类型检查与命令多态" class="headerlink" title="类型检查与命令多态"></a>类型检查与命令多态</h3><h4 id="类型检查的实现"><a href="#类型检查的实现" class="headerlink" title="类型检查的实现"></a>类型检查的实现</h4><p>在执行一个类型特定的命令之前，Redis会先检查输入键的类型是否正确，然后再决定是否执行给定的命令</p><ul><li><p>在执行一个类型特定命令之前，服务器会先检查输入数据库键的值对象是否是执行命令所需的类型，如果是，服务器对键执行指定的命令</p></li><li><p>否则服务器拒绝执行命令，向客户端返回一个类型错误</p></li></ul><h4 id="多态命令的实现"><a href="#多态命令的实现" class="headerlink" title="多态命令的实现"></a>多态命令的实现</h4><p>Redis除了会根据值对象的类型判断键是否能够执行指定命令之外，还会根据值对象的编码方式，选择正确的命令实现代码来执行命令</p><blockquote><p>如果对一个键执行LLEN命令，那么服务器除了要确保执行命令的是列表键之外，还需要根据键的值对象<strong>所使用的编码</strong>来选择正确的LLEN命令</p></blockquote><ul><li>如果列表对象的编码是<code>ziplist</code>，那么说明列表对象的实现为压缩列表，程序将使用<code>ziplistLen</code>函数返回列表长度</li><li>如果列表对象的编码是<code>linkedlist</code>，那么说明列表对象的实现为双端链表，程序将使用<code>listLength</code>函数返回双端列表长度</li></ul><h3 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h3><blockquote><p>C语言不具备自动内存回收功能，Redis在自己的对象系统中构建了这样的机制</p></blockquote><p>​    Redis在自己的对象系统中，构建了一个<strong>引用计数</strong>技术实现的内存回收机制，通过这一机制，程序可以通过跟踪对象给的引用计数信息，在适当的时候自动释放对象并回收内存</p><h4 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h4><blockquote><p>对象的引用计数属性还带有对象共享的作用</p></blockquote><p>如果键A已经创建了一个包含整数值100的字符串作为值对象，键B也要创建一个同样保存整数值100的字符串</p><ul><li>那么服务器直接让键A和键B共享同一个字符串对象即可<ul><li>步骤:</li><li><ol><li>将数据库键的值指针指向一个现有的值对象</li></ol></li><li><ol start="2"><li>将被共享的值对象引用计数增1</li></ol></li></ul></li></ul><p><strong>当服务器需要用到值0-9999的字符串对象时，服务器就会使用这些共享对象，而不是新创建对象</strong></p><h3 id="对象的空转时长"><a href="#对象的空转时长" class="headerlink" title="对象的空转时长"></a>对象的空转时长</h3><p>对象<code>redisObject</code>结构中包含的最后一个属性是<code>unsigned: lru:22</code>，该属性记录了对象最后一次被命令程序访问的时间</p><p><strong>可以通过它，得到对象的空转时间</strong></p><h3 id="重点回顾"><a href="#重点回顾" class="headerlink" title="重点回顾"></a>重点回顾</h3><ul><li>Redis数据库中的每个键值对的键和值都是一个对象</li><li>Redis有字符串，列表，哈希，集合，有序集合五种类型的对象，每种类型的对象至少都有两种或以上的编码方式，适用于不同场景</li><li>服务器在执行某些命令前，会先检查给定键的类型能否执行指定的命令，以及命令多态</li><li>Redis的对象系统带有引用计数实现的内存回收机制，当一个对象不再被使用时，对象所占用的内存就会被自动释放</li><li>Redis会共享值为<strong>0-9999</strong>的字符串对象</li><li>对象会记录自己最后一次被访问的时间，这个时间可以用于计算对象的空转时间</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教育平台开发所遇问题</title>
    <link href="/2020/12/29/%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/29/%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%89%80%E9%81%87%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="教育平台搭建过程所遇的问题"><a href="#教育平台搭建过程所遇的问题" class="headerlink" title="教育平台搭建过程所遇的问题"></a>教育平台搭建过程所遇的问题</h1><h2 id="pom文件无法成功导入问题"><a href="#pom文件无法成功导入问题" class="headerlink" title="pom文件无法成功导入问题"></a>pom文件无法成功导入问题</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">guli.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">guli.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-plus.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">velocity.version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">velocity.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">swagger.version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">swagger.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aliyun.oss.version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun.oss.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">jodatime.version</span>&gt;</span>2.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">jodatime.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">poi.version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">poi.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">commons-fileupload.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-io.version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">commons-io.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">httpclient.version</span>&gt;</span>4.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">httpclient.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">jwt.version</span>&gt;</span>0.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">jwt.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aliyun-java-sdk-core.version</span>&gt;</span>4.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun-java-sdk-core.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aliyun-sdk-oss.version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun-sdk-oss.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aliyun-java-sdk-vod.version</span>&gt;</span>2.15.2<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun-java-sdk-vod.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aliyun-java-vod-upload.version</span>&gt;</span>1.4.11<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun-java-vod-upload.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aliyun-sdk-vod-upload.version</span>&gt;</span>1.4.11<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun-sdk-vod-upload.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.2.28<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">gson.version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">gson.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">json.version</span>&gt;</span>20170516<span class="hljs-tag">&lt;/<span class="hljs-name">json.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-dbutils.version</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">commons-dbutils.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">canal.client.version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">canal.client.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">docker.image.prefix</span>&gt;</span>zx<span class="hljs-tag">&lt;/<span class="hljs-name">docker.image.prefix</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">cloud-alibaba.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-comment">&lt;!--Spring Cloud--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;cloud-alibaba.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--mybatis-plus 持久层--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity-engine-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--swagger--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--swagger ui--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--aliyunOSS--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--日期时间工具--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jodatime.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--xls--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--xlsx--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--文件上传--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--commons-io--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--httpclient--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;httpclient.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;gson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!-- JWT --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--aliyun--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aliyun-java-sdk-core.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aliyun-sdk-oss.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-vod<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aliyun-java-sdk-vod.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-vod-upload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aliyun-java-vod-upload.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-vod-upload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aliyun-sdk-vod-upload.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.json<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;json.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-dbutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-dbutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-dbutils.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.otter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>canal.client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;canal.client.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p>导入上述文件有一个问题，aliyun-sdk-vod-upload 和 aliyun-sdk-vod-upload引入报错</p><p><strong>原因</strong></p><ul><li>阿里云的这个模块是不开源的，无法通过maven直接导入，需要先在官网下载解压包</li><li>解压后，在lib目录下执行指令 <code>mvn install:install-file -DgroupId=com.aliyun -DartifactId=aliyun-sdk-vod-upload -Dversion=1.4.11 -Dpackaging=jar -Dfile=aliyun-java-vod-upload-1.4.11.jar</code></li><li><code>-DgroupId</code> 对应 <code>&lt;groupId&gt;&lt;/groupId&gt;</code></li><li><code>-DartifactId=</code> 对应 <code>&lt;artifactId&gt;&lt;/artifactId&gt;</code> </li><li><code>-Dversion=</code> 对应 <code>&lt;version&gt;&lt;/version&gt;</code></li><li><code>-Dpackaging</code> 对应本地目录位置 </li><li><code>BuildSuccess</code>后，就可以在<code>pom.xml</code>文件中直接引入</li></ul><h2 id="如果微服务启动过程报错，找不到xml文件"><a href="#如果微服务启动过程报错，找不到xml文件" class="headerlink" title="如果微服务启动过程报错，找不到xml文件"></a>如果微服务启动过程报错，找不到xml文件</h2><p><code>AbstractHandlerExceptionResolver.java:194 |org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver |Resolved exception caused by handler execution: org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.guli.edu.mapper.CourseMapper.getCoursePublishVoById</code></p><ul><li>可以查看dao层编译后的mapper文件，看看target文件夹里面有没有xml文件，如果没有，说明没有编译进去</li><li>需要手动在pom文件中加打包配置</li></ul><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 项目打包时会将java目录中的*.xml文件也进行打包 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><ul><li>然后在配置文件 <code>application.yml/application.properties</code>中加</li></ul><pre><code class="hljs properties"><span class="hljs-comment">#配置mapper xml文件的路径</span><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:com/guli/edu/mapper/xml/*.xml</span></code></pre><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><pre><code class="hljs xml">http &#123;    server &#123;        listen       81;        ......    &#125;，        ......server &#123;listen 8201;server_name localhost;location ~ /edu/ &#123;            proxy_pass http://localhost:8101;&#125;location ~ /user/ &#123;    rewrite /(.+)$ /mock/5950a2419adc231f356a6636/vue-admin/$1  break;  proxy_pass https://www.easy-mock.com;&#125;&#125;&#125;</code></pre><ul><li>在server中加需要转发的节点，格式如上所示</li><li>nginx配置的关键作用就是，在前端的路由转发的时候，每一个微服务调用的都是不同的接口</li><li>那么前端自然也不能都使用同样的接口，那么我们就需要使用nginx进行配置转发</li><li>首先在nginx.conf中自己定义一个nginx启动的接口9001，然后配置server将所有访问nginx的路由根据访问前缀转发到不同的接口</li></ul><h2 id="Redis缓存配置"><a href="#Redis缓存配置" class="headerlink" title="Redis缓存配置"></a>Redis缓存配置</h2><p>Redis是当前比较热门的NOSQL系统之一，它是一个开源的使用ANSI c语言编写的key-value存储系统（区别于MySQL的二维表格的形式存储。）。和Memcache类似，但很大程度补偿了Memcache的不足。和Memcache一样，Redis数据都是缓存在计算机内存中，不同的是，Memcache只能将数据缓存到内存中，无法自动定期写入硬盘，这就表示，一断电或重启，内存清空，数据丢失。所以Memcache的应用场景适用于缓存无需持久化的数据。而Redis不同的是它会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化。</p><p>Redis的特点：</p><p>1，Redis读取的速度是110000次/s，写的速度是81000次/s；</p><p>2，原子 。Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</p><p>3，支持多种数据结构：string（字符串）；list（列表）；hash（哈希），set（集合）；zset(有序集合)</p><p>4，持久化，集群部署</p><p>5，支持过期时间，支持事务，消息订阅</p><h3 id="需要配置文件"><a href="#需要配置文件" class="headerlink" title="需要配置文件"></a>需要配置文件</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- redis --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>添加配置类</p><p>@EnableCaching<br>@Configuration<br>public class RedisConfig extends CachingConfigurerSupport {</p><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;    RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();    RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);    jackson2JsonRedisSerializer.setObjectMapper(om);    template.setConnectionFactory(factory);    <span class="hljs-comment">//key序列化方式</span>    template.setKeySerializer(redisSerializer);    <span class="hljs-comment">//value序列化</span>    template.setValueSerializer(jackson2JsonRedisSerializer);    <span class="hljs-comment">//value hashmap序列化</span>    template.setHashValueSerializer(jackson2JsonRedisSerializer);    <span class="hljs-keyword">return</span> template;&#125;<span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;    RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-comment">//解决查询缓存转换异常的问题</span>    ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);    jackson2JsonRedisSerializer.setObjectMapper(om);    <span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span>    RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()            .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))          .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))            .disableCachingNullValues();    RedisCacheManager cacheManager = RedisCacheManager.builder(factory)            .cacheDefaults(config)            .build();    <span class="hljs-keyword">return</span> cacheManager;&#125;</code></pre><p>}</p><h3 id="使用注解的方式在接口中添加Redis缓存"><a href="#使用注解的方式在接口中添加Redis缓存" class="headerlink" title="使用注解的方式在接口中添加Redis缓存"></a>使用注解的方式在接口中添加Redis缓存</h3><h3 id="存-Cacheable"><a href="#存-Cacheable" class="headerlink" title="存@Cacheable"></a>存@Cacheable</h3><p>根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。</p><p>查看源码，属性值如下：</p><table><thead><tr><th><strong>属性/方法名</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>value</td><td>缓存名，必填，它指定了你的缓存存放在哪块命名空间</td></tr><tr><td>cacheNames</td><td>与 value 差不多，二选一即可</td></tr><tr><td>key</td><td>可选属性，可以使用 SpEL 标签自定义缓存的key</td></tr></tbody></table><h3 id="（2）缓存-CachePut"><a href="#（2）缓存-CachePut" class="headerlink" title="（2）缓存@CachePut"></a>（2）缓存@CachePut</h3><p>使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。其他方法可以直接从响应的缓存中读取缓存数据，而不需要再去查询数据库。一般用在新增方法上。</p><p>查看源码，属性值如下：</p><table><thead><tr><th><strong>属性/方法名</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>value</td><td>缓存名，必填，它指定了你的缓存存放在哪块命名空间</td></tr><tr><td>cacheNames</td><td>与 value 差不多，二选一即可</td></tr><tr><td>key</td><td>可选属性，可以使用 SpEL 标签自定义缓存的key</td></tr></tbody></table><h3 id="（3）缓存-CacheEvict"><a href="#（3）缓存-CacheEvict" class="headerlink" title="（3）缓存@CacheEvict"></a>（3）缓存@CacheEvict</h3><p>使用该注解标志的方法，会清空指定的缓存。一般用在更新或者删除方法上</p><p>查看源码，属性值如下：</p><table><thead><tr><th><strong>属性/方法名</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>value</td><td>缓存名，必填，它指定了你的缓存存放在哪块命名空间</td></tr><tr><td>cacheNames</td><td>与 value 差不多，二选一即可</td></tr><tr><td>key</td><td>可选属性，可以使用 SpEL 标签自定义缓存的key</td></tr><tr><td>allEntries</td><td>是否清空所有缓存，默认为 false。如果指定为 true，则方法调用后将立即清空所有的缓存</td></tr><tr><td>beforeInvocation</td><td>是否在方法执行前就清空，默认为 false。如果指定为 true，则在方法执行前就会清空缓存</td></tr></tbody></table><h3 id="Redis缓存配置文件"><a href="#Redis缓存配置文件" class="headerlink" title="Redis缓存配置文件"></a>Redis缓存配置文件</h3><pre><code class="hljs properties"><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.44.132</span><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><span class="hljs-meta">spring.redis.database</span>= <span class="hljs-string">0</span><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">20</span><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1</span><span class="hljs-comment">#最大阻塞等待时间(负数表示没限制)</span><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">"banner"</span>, key = <span class="hljs-string">"'selectIndexList'"</span>)</code></pre><p>注意上面代码中的key ，在<code>&quot;&quot;</code>中加了一个 <code>&#39;&#39;</code> ，不然会报错 </p><h2 id="Node-js-nuxt端口冲突问题"><a href="#Node-js-nuxt端口冲突问题" class="headerlink" title="Node.js  nuxt端口冲突问题"></a>Node.js  nuxt端口冲突问题</h2><ul><li><p>在成功启动vue后台管理后，启动前台用户界面时，报端口冲突</p></li><li><p>类似报错信息</p></li><li><pre><code class="js"><span class="number">24</span> error Failed at the voting_app@<span class="number">1.1</span><span class="number">.0</span> start script <span class="string">'npm run server'</span>.<span class="number">24</span> error Make sure you have the latest version <span class="keyword">of</span> node.js and npm installed.<span class="number">24</span> error If you <span class="keyword">do</span>, <span class="keyword">this</span> is most likely a problem <span class="keyword">with</span> the voting_app package,<span class="number">24</span> error not <span class="keyword">with</span> npm itself.<span class="number">24</span> error Tell the author that <span class="keyword">this</span> fails on your system:<span class="number">24</span> error     npm run server<span class="number">24</span> error You can <span class="keyword">get</span> information on how to open an issue for this project with:24 error     npm bugs voting_app24 error Or if that isn't available, you can <span class="keyword">get</span> their info via:24 error     npm owner ls voting_app24 error There is likely additional logging output above.25 verbose exit [ 1, true ]<pre><code class="hljs">### 解决方式- `npm cache clean --force`- ` rm -rf node_modules package-lock.json`- `npm install`- ` npm start`然后重启电脑，即可成功访问## 用户登陆方式问题### 带token的登陆方式- 本项目的登陆方法使用带token的记录方式```java@ApiOperation(value = "根据token令牌获取登陆信息")    @GetMapping("auth/getLoginInfo")    public R getLoginInfo(HttpServletRequest request)&#123;        try&#123;            String memberId = JwtUtils.getMemberIdByJwtToken(request);            LoginInfoVo loginInfoVo = ucenterMemberService.getLoginInfo(memberId);            return R.ok().data("item",loginInfoVo);        &#125;catch (Exception e)&#123;            e.printStackTrace();            throw new EduException(20001,"无法获取到token");        &#125;    &#125;</code></pre></code></pre></li></ul><p>后端传参数<code>item</code>到前端，前端获取到参数以后根据 token令牌 判断用户登陆状态</p><h3 id="权限管理模块编写完成后，前端根据数据库的值，通过动态路由来定位页面"><a href="#权限管理模块编写完成后，前端根据数据库的值，通过动态路由来定位页面" class="headerlink" title="权限管理模块编写完成后，前端根据数据库的值，通过动态路由来定位页面"></a>权限管理模块编写完成后，前端根据数据库的值，通过动态路由来定位页面</h3><ul><li>通过SpringSecurity来实现登陆和权限验证</li><li>在前后台整合完毕后，注意在此过程中<strong>必须保证</strong>Redis客户端开启，因为Redis客户端一段时间没有连接维持，就会自动关闭</li><li>这样前台登陆时，就会显示超时，因为项目首先会把前端传来的用户名和密码存储至Redis进行缓冲</li></ul>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客系统开发过程</title>
    <link href="/2020/12/29/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
    <url>/2020/12/29/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="博客系统开发流程"><a href="#博客系统开发流程" class="headerlink" title="博客系统开发流程"></a>博客系统开发流程</h1><h2 id="1-框架搭建"><a href="#1-框架搭建" class="headerlink" title="1. 框架搭建"></a>1. 框架搭建</h2><ul><li><p>使用SpringBoot搭建，编写配置文件</p></li><li><p>yml文件配置-application.yml</p></li><li><pre><code>spring:  thymeleaf:    mode: HTML  profiles:    active: pro</code></pre></li></ul><p>  mybatis:<br>    type-aliases-package: com.star.entity<br>    mapper-locations: classpath:mapper/*.xml<br>    configuration:<br>      map-underscore-to-camel-case: true<br>  <pre><code class="hljs diff"><span class="hljs-deletion">- application-dev.yml</span><span class="hljs-deletion">-</span></code></pre><br>  spring:<br>    datasource:<br>      driver-class-name: com.mysql.cj.jdbc.Driver<br>      url: jdbc:mysql://localhost:3306/myblog?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC<br>      username: root<br>      password: 123456</p><p>  logging:<br>    level:<br>      root: info<br>      com.star: debug<br>    file:<br>      name: log/blog-dev.log<br>  <pre><code class="hljs css"><span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">application</span><span class="hljs-selector-class">.pro</span><span class="hljs-selector-class">.yml</span><span class="hljs-selector-tag">-</span></code></pre><br>  spring:<br>    datasource:<br>      driver-class-name: com.mysql.cj.jdbc.Driver<br>      url: jdbc:mysql://localhost:3306/myblog?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;serverTimezone=GMT%2B8<br>      username: root<br>      password: 123456</p><p>  logging:<br>    level:<br>      root: warn<br>      com.star: info<br>    file:<br>      name: log/blog-pro.log<br>  <pre><code class="hljs dust"><span class="xml">**公共部分application.yml配置了thymeleaf模板，当前配置文件，数据库持久层配置(mapper)，开发环境和部署环境配置了数据库和日志**</span><span class="xml">- logback-spring.xml配置（重写SpringBoot默认日志配置）</span><span class="xml">- ```xml</span><span class="xml">  <span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><span class="xml">      <span class="hljs-comment">&lt;!--包含Spring boot对logback日志的默认配置--&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"org/springframework/boot/logging/logback/defaults.xml"</span> /&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"LOG_FILE"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$</span></span></span><span class="hljs-template-variable">&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&#125;/spring.log&#125;"</span>/&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"org/springframework/boot/logging/logback/console-appender.xml"</span> /&gt;</span></span><span class="xml">  </span><span class="xml">      <span class="hljs-comment">&lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"TIME_FILE"</span></span></span><span class="xml">                class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;</span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;FILE_LOG_PATTERN&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;LOG_FILE&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;LOG_FILE&#125;</span><span class="xml">.%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd&#125;</span><span class="xml">.%i<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></span><span class="xml">              <span class="hljs-comment">&lt;!--保留历史日志一个月的时间--&gt;</span></span><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span></span><span class="xml">              <span class="hljs-comment">&lt;!--</span></span><span class="xml">              Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志</span><span class="xml">              --&gt;</span><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><span class="xml">                  <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span></span><span class="xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><span class="xml">  </span><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><span class="xml">  </span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">"INFO"</span>&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"CONSOLE"</span> /&gt;</span></span><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"TIME_FILE"</span> /&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><span class="xml">  </span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><span class="xml">          <span class="hljs-comment">&lt;!--</span></span><span class="xml">              1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）</span><span class="xml">              2、重写了默认配置，设置日志文件大小在10MB时，按日期切分日志</span><span class="xml">          --&gt;</span></code></pre></p><p><code>spring.profiles.active=dev</code> 使用参数指定SpringBoot启动</p><h3 id="PageHelper配置模板"><a href="#PageHelper配置模板" class="headerlink" title="PageHelper配置模板"></a>PageHelper配置模板</h3><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/pictures"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">pictures</span><span class="hljs-params">(Model model, @RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span>Integer pageNum)</span>&#123;    PageHelper.startPage(pageNum,<span class="hljs-number">10</span>);    List&lt;Picture&gt; pictureList = pictureService.listPicture();    PageInfo&lt;Picture&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(pictureList);    model.addAttribute(<span class="hljs-string">"pageInfo"</span>,pageInfo);    <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/pictures"</span>;&#125;</code></pre><h2 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h2><p>在页面访问时候需要错误页面，以及出现错误跳转到错误页面的处理</p><ul><li>404.html</li><li>500.html</li><li>error.html</li></ul><p><strong>全局异常处理</strong></p><p>对于404和500界面，出现错误进行捕捉，自定义的错误我们需要自己拦截，定义一个类来捕捉，通过这个类来拦截所有的异常</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.hander;<span class="hljs-keyword">import</span> org.slf4j.Logger;<span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<span class="hljs-keyword">import</span> org.springframework.core.annotation.AnnotationUtils;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-comment">//拦截所有带controller注解的控制器</span><span class="hljs-meta">@ControllerAdvice</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerExceptionHandler</span> </span>&#123;    <span class="hljs-comment">//日志记录异常</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="hljs-keyword">this</span>.getClass());    <span class="hljs-comment">//异常处理方法</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@Descripion</span> 处理错误信息（全局异常处理）</span><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> lsh</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request : 访问的异常URL</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e : 异常参数</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  返回错误信息页面</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@ExceptionHandler</span>(Exception<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">ModelAndView</span> <span class="hljs-title">exceptionHandler</span>(<span class="hljs-title">HttpServletRequest</span> <span class="hljs-title">request</span>,<span class="hljs-title">Exception</span> <span class="hljs-title">e</span>) <span class="hljs-title">throws</span> <span class="hljs-title">Exception</span></span>&#123;        <span class="hljs-comment">//记录异常信息</span>        logger.error(<span class="hljs-string">"Request URL : &#123;&#125;,Exception : &#123;&#125;"</span>,request.getRequestURL(),e);        <span class="hljs-comment">//当标识了状态码的时候就不拦截</span>        <span class="hljs-keyword">if</span>(AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus<span class="hljs-class">.<span class="hljs-keyword">class</span>)!</span>=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">throw</span> e;        &#125;        <span class="hljs-comment">//返回记录的异常信息</span>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();        mv.addObject(<span class="hljs-string">"url"</span>,request.getRequestURL());        mv.addObject(<span class="hljs-string">"exception"</span>,e);        <span class="hljs-comment">//跳转到error包下的error界面</span>        mv.setViewName(<span class="hljs-string">"error/error"</span>);        <span class="hljs-keyword">return</span> mv;    &#125;&#125;</code></pre><ul><li><p>对于资源找不到的类，作异常处理</p></li><li><pre><code class="java"><span class="keyword">package</span> com.star;<span class="keyword">import</span> org.springframework.http.HttpStatus;<span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;<span class="comment">/**</span><span class="comment"> * 自定义异常</span><span class="comment"> * <span class="doctag">@ResponseStatus</span>(HttpStatus.NOT_FOUND) 注解表示资源找不到的状态码，标识了状态码的时候就不拦截</span><span class="comment"> */</span><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>{    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundException</span><span class="params">()</span> </span>{    }    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundException</span><span class="params">(String message)</span> </span>{        <span class="keyword">super</span>(message);    }    <span class="function"><span class="keyword">public</span> <span class="title">NotFoundException</span><span class="params">(String message, Throwable cause)</span> </span>{        <span class="keyword">super</span>(message, cause);    }}&lt;!--￼<span class="number">5</span>--&gt;</code></pre></li><li><p>切面处理</p></li><li><pre><code class="java"><span class="keyword">package</span> com.star.aspect;<span class="keyword">import</span> org.aspectj.lang.JoinPoint;<span class="keyword">import</span> org.aspectj.lang.annotation.*;<span class="keyword">import</span> org.slf4j.Logger;<span class="keyword">import</span> org.slf4j.LoggerFactory;<span class="keyword">import</span> org.springframework.stereotype.Component;<span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<span class="keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="keyword">import</span> java.util.Arrays;<span class="comment">/**</span><span class="comment"> * <span class="doctag">@Pointcut</span>("execution(* com.star.controller..(..))")：定义切面，声明log()是一个切面，通过execution来表示需要拦截的类，</span><span class="comment"> * 这里表示拦截控制器下面的所有类所有方法</span><span class="comment"> * 在访问页面（controller）之前，拦截请求的URL、IP、调用的方法、传递的参数、返回的内容，并记录到日志</span><span class="comment"> */</span><span class="meta">@Aspect</span><span class="meta">@Component</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>{    <span class="comment">//获取日志信息</span>    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());    <span class="comment">//定义切面</span>    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.star.controller.*.*(..))"</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>{}    <span class="comment">//在切面之前执行</span>    <span class="meta">@Before</span>(<span class="string">"log()"</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span></span>{        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();        <span class="comment">//获取URL，IP</span>        String url = request.getRequestURL().toString();        String ip =  request.getRemoteAddr();        <span class="comment">//获取请求方法</span>        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + joinPoint.getSignature().getName();        <span class="comment">//获取请求参数</span>        Object[] args = joinPoint.getArgs();        RequestLog requestLog = <span class="keyword">new</span> RequestLog(url,ip,classMethod,args);        logger.info(<span class="string">"Request : {}"</span>,requestLog);    }</code></pre></li></ul><pre><code>//在切面之后执行@After(&quot;log()&quot;)public void doAfter(){    logger.info(&quot;----doAfter----&quot;);}//返回之后拦截@AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)public void doAfterReturn(Object result){    logger.info(&quot;Result : {}&quot;,result);}//封装请求参数private class RequestLog{    private String url;    private String ip;    private String classMethod;    private Object[] args;    public RequestLog(String url, String ip, String classMethod, Object[] args) {        this.url = url;        this.ip = ip;        this.classMethod = classMethod;        this.args = args;    }    @Override    public String toString() {        return &quot;RequestLog{&quot; +                &quot;url=&apos;&quot; + url + &apos;\&apos;&apos; +                &quot;, ip=&apos;&quot; + ip + &apos;\&apos;&apos; +                &quot;, classMethod=&apos;&quot; + classMethod + &apos;\&apos;&apos; +                &quot;, args=&quot; + Arrays.toString(args) +                &apos;}&apos;;    }}</code></pre><p>  }<br>  <pre><code class="hljs">## 4. 登陆功能- 首先定义用户实体类- ```java  package com.star.entity;    import lombok.AllArgsConstructor;  import lombok.Getter;  import lombok.NoArgsConstructor;  import lombok.Setter;    import java.util.Date;    /**   * 用户实体类   * - 昵称   * - 用户名   * - 密码   * - 邮箱   * - 类型   * - 头像   * - 创建时间   * - 更新时间   */  @Getter  @Setter  @NoArgsConstructor  @AllArgsConstructor  public class User &#123;      private Long id;      private String nickname;      private String username;      private String password;      private String email;      private String avatar;      private Integer type;      private Date createTime;      private Date updateTime;  &#125;</code></pre></p><ul><li><p>定义MD5加密，思路是将明文密码通过MD5加密存储到数据库，在校验的时候通过输入的密码进行MD5再次加密，和数据库的密码比对</p></li><li><pre><code class="java"><span class="keyword">package</span> com.star.util;</code></pre></li></ul><p>  import java.security.MessageDigest;<br>  import java.security.NoSuchAlgorithmException;</p><p>  /**</p><ul><li><p>MD5加密工具类</p></li><li><p>/<br>public class MD5Utils {</p><p>  /**</p><ul><li><p>@Description: MD5加密</p></li><li><p>@Auther: ONESTAR</p></li><li><p>@Date: 17:19 2020/5/27</p></li><li><p>@Param: 要加密的字符串</p></li><li><p>@Return: 加密后的字符串</p></li><li><p>/<br>public static String code(String str){<br>  try {</p><pre><code>MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);md.update(str.getBytes());byte[]byteDigest = md.digest();int i;StringBuffer buf = new StringBuffer(&quot;&quot;);for (int offset = 0; offset &lt; byteDigest.length; offset++) {    i = byteDigest[offset];    if (i &lt; 0)        i += 256;    if (i &lt; 16)        buf.append(&quot;0&quot;);    buf.append(Integer.toHexString(i));}//32位加密return buf.toString();// 16位的加密//return buf.toString().substring(8, 24);</code></pre><p>  } catch (NoSuchAlgorithmException e) {</p><pre><code>e.printStackTrace();return null;</code></pre><p>  }</p><p>}</p><p>//根据明文输出密码<br>public static void main(String[] args) {<br>  System.out.println(code(“123456”));<br>}</p></li></ul><p>}</p><pre><code class="hljs">- 建立持久层接口- ```java  package com.star.dao;    import com.star.entity.User;  import org.apache.ibatis.annotations.Mapper;  import org.apache.ibatis.annotations.Param;  import org.springframework.stereotype.Repository;    @Mapper  @Repository  public interface UserDao &#123;      /**       * @param 定义下个属性的别名，在xml中直接可以用 username = #&#123;username&#125; 来进行判断       * @param username  用户名       * @param password  密码       * @return  返回用户对象       */      User findByUsernameAndPassword(@Param("username") String username,@Param("password") String password);  &#125;</code></pre></li></ul><ul><li><p>mapper.xml文件</p></li><li><pre><code class="xml"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.star.dao.UserDao"</span>&gt;</span>    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUsernameAndPassword"</span> <span class="attr">resultType</span>=<span class="string">"com.star.entity.User"</span>&gt;</span>        select * from myblog.t_user        where username = #{username} and password = #{password};    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span><span class="comment"><pre><code class="hljs haxe">- Service层及SerivceImpl- ```java  <span class="hljs-keyword">package</span> com.star.service;    <span class="hljs-keyword">import</span> com.star.entity.User;    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;      <span class="hljs-comment">//核对用户名和密码</span>      User checkUser(<span class="hljs-keyword">String</span> username,<span class="hljs-keyword">String</span> password);  &#125;</code></pre></span></code></pre></li><li><pre><code class="java"><span class="keyword">package</span> com.star.service.impl;<span class="keyword">import</span> com.star.dao.UserDao;<span class="keyword">import</span> com.star.entity.User;<span class="keyword">import</span> com.star.service.UserService;<span class="keyword">import</span> com.star.util.MD5Utils;<span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="keyword">import</span> org.springframework.stereotype.Service;<span class="meta">@Service</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>{    <span class="meta">@Autowired</span>    <span class="keyword">private</span> UserDao userDao;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> User <span class="title">checkUser</span><span class="params">(String username, String password)</span> </span>{        User user = userDao.findByUsernameAndPassword(username, MD5Utils.code(password));        <span class="keyword">return</span> user;    }}&lt;!--￼<span class="number">9</span>--&gt;</code></pre></li><li><p>登陆拦截器</p></li><li><p>在没有登陆的情况下不能让客户访问到后台管理页面，所以添加一个登陆拦截器，将访问路径过滤，使用SpringBoot内置的interceptor</p></li><li><pre><code class="java"><span class="keyword">package</span> com.star.interceptor;<span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;<span class="keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="comment">/**</span><span class="comment"> * <span class="doctag">@Description</span>: 登录过滤拦截</span><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>{    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{        <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">"user"</span>)==<span class="keyword">null</span>){            response.sendRedirect(<span class="string">"/admin"</span>);            <span class="keyword">return</span> <span class="keyword">false</span>;        }        <span class="keyword">return</span> <span class="keyword">true</span>;    }}&lt;!--￼<span class="number">10</span>--&gt;</code></pre></li><li><p>通过前端的表单传入参数  (<code>th:action=&quot;@{/admin/login}&quot;</code> 表示动作，将参数传入页面，通过后端校验) </p></li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui large form"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">"@&#123;/admin/login&#125;"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui  segment"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"field"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui left icon input"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"user icon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"用户名"</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"field"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui left icon input"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"lock icon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"密码"</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui fluid large teal submit button"</span>&gt;</span>登   录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui error mini message"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui mini negative message"</span> &gt;</span>用户名和密码错误<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><h2 id="5-实体类构建"><a href="#5-实体类构建" class="headerlink" title="5. 实体类构建"></a>5. 实体类构建</h2><ul><li>直接上代码了，没有什么好说的</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 博客实体类，和评论一对多关系</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> String content;    <span class="hljs-keyword">private</span> String firstPicture;    <span class="hljs-keyword">private</span> String flag;    <span class="hljs-keyword">private</span> Integer views;    <span class="hljs-keyword">private</span> Integer commentCount;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> appreciation;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> shareStatement;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> commentabled;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> published;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> recommend;    <span class="hljs-keyword">private</span> Date createTime;    <span class="hljs-keyword">private</span> Date updateTime;    <span class="hljs-keyword">private</span> String description;    <span class="hljs-keyword">private</span> Type type;    <span class="hljs-keyword">private</span> User user;    <span class="hljs-keyword">private</span> Long typeId;    <span class="hljs-keyword">private</span> Long userId;    <span class="hljs-keyword">private</span> List&lt;Comment&gt; comments = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 评论实体类，和子评论一对多</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Comment</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String content;    <span class="hljs-keyword">private</span> String avatar;    <span class="hljs-keyword">private</span> Date createTime;    <span class="hljs-keyword">private</span> Long blogId;    <span class="hljs-keyword">private</span> Long parentCommentId;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> adminComment;    <span class="hljs-comment">//回复评论</span>    <span class="hljs-keyword">private</span> List&lt;Comment&gt; replyComments = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">private</span> Comment ParentComment;    <span class="hljs-keyword">private</span> String parentNickname;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 友情链接实体类</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FriendLink</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String blogname;    <span class="hljs-keyword">private</span> String blogaddress;    <span class="hljs-keyword">private</span> String pictureaddress;    <span class="hljs-keyword">private</span> Date createTime;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 留言实体类，和回复留言一对多</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Message</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String content;    <span class="hljs-keyword">private</span> String avatar;    <span class="hljs-keyword">private</span> Date createTime;    <span class="hljs-keyword">private</span> Long parentMessageId;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> adminMessage;    <span class="hljs-comment">//回复留言</span>    <span class="hljs-keyword">private</span> List&lt;Message&gt; replyMessages = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">private</span> Message parentMessage;    <span class="hljs-keyword">private</span> String parentNickname;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 相册实体类</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Picture</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String picturename;    <span class="hljs-keyword">private</span> String picturetime;    <span class="hljs-keyword">private</span> String pictureaddress;    <span class="hljs-keyword">private</span> String picturedescription;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 分类实体类，和博客一对多</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Type</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> List&lt;Blog&gt; blogs = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 用户实体类</span><span class="hljs-comment"> * - 昵称</span><span class="hljs-comment"> * - 用户名</span><span class="hljs-comment"> * - 密码</span><span class="hljs-comment"> * - 邮箱</span><span class="hljs-comment"> * - 类型</span><span class="hljs-comment"> * - 头像</span><span class="hljs-comment"> * - 创建时间</span><span class="hljs-comment"> * - 更新时间</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String avatar;    <span class="hljs-keyword">private</span> Integer type;    <span class="hljs-keyword">private</span> Date createTime;    <span class="hljs-keyword">private</span> Date updateTime;&#125;</code></pre><h2 id="6-分类管理"><a href="#6-分类管理" class="headerlink" title="6. 分类管理"></a>6. 分类管理</h2><h3 id="1-持久层接口"><a href="#1-持久层接口" class="headerlink" title="1. 持久层接口"></a>1. 持久层接口</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.dao;<span class="hljs-keyword">import</span> com.star.entity.Type;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Mapper</span><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TypeDao</span> </span>&#123;    <span class="hljs-comment">//新增保存分类</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">saveType</span><span class="hljs-params">(Type type)</span></span>;    <span class="hljs-comment">//根据id查询分类</span>    <span class="hljs-function">Type <span class="hljs-title">getType</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">//查询所有分类</span>    <span class="hljs-function">List&lt;Type&gt; <span class="hljs-title">getAllType</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//根据分类名称查询分类</span>    <span class="hljs-function">Type <span class="hljs-title">getTypeByName</span><span class="hljs-params">(String name)</span></span>;    <span class="hljs-comment">//编辑修改分类</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateType</span><span class="hljs-params">(Type type)</span></span>;    <span class="hljs-comment">//删除分类</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteType</span><span class="hljs-params">(Long id)</span></span>;&#125;</code></pre><h3 id="2-mapper文件"><a href="#2-mapper文件" class="headerlink" title="2. mapper文件"></a>2. mapper文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.star.dao.TypeDao"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 新增保存分类 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"saveType"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.Type"</span>&gt;</span>        insert into myblog.t_type values(#&#123;id&#125;,#&#123;name&#125;);    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 根据id查询分类 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getType"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.Type"</span>&gt;</span>        select id,name from myblog.t_type where id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 查询所有分类 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getAllType"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.Type"</span>&gt;</span>        select * from myblog.t_type;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 根据分类名字查询 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getTypeByName"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.Type"</span>&gt;</span>        select * from myblog.t_type where name = #&#123;name&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 编辑修改分类 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateType"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.Type"</span>&gt;</span>        update myblog.t_type set name = #&#123;name&#125; where id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 删除分类 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteType"</span>&gt;</span>        delete from myblog.t_type where id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h3 id="3-service层及Impl"><a href="#3-service层及Impl" class="headerlink" title="3. service层及Impl"></a>3. service层及Impl</h3><ul><li>对应mapper文件的方法</li><li>@Transactional注解： 实现事务操作</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service.impl;<span class="hljs-keyword">import</span> com.star.dao.TypeDao;<span class="hljs-keyword">import</span> com.star.entity.Type;<span class="hljs-keyword">import</span> com.star.service.TypeService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Transactional</span>注解： 实现事务操作</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TypeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TypeService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> TypeDao typeDao;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveType</span><span class="hljs-params">(Type type)</span> </span>&#123;        <span class="hljs-keyword">return</span> typeDao.saveType(type);    &#125;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Type <span class="hljs-title">getType</span><span class="hljs-params">(Long id)</span> </span>&#123;        <span class="hljs-keyword">return</span> typeDao.getType(id);    &#125;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Type&gt; <span class="hljs-title">getAllType</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> typeDao.getAllType();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Type <span class="hljs-title">getTypeByName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">return</span> typeDao.getTypeByName(name);    &#125;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateType</span><span class="hljs-params">(Type type)</span> </span>&#123;        <span class="hljs-keyword">return</span> typeDao.updateType(type);    &#125;    <span class="hljs-meta">@Transactional</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteType</span><span class="hljs-params">(Long id)</span> </span>&#123;        typeDao.deleteType(id);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service;<span class="hljs-keyword">import</span> com.star.entity.Type;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TypeService</span> </span>&#123;    <span class="hljs-comment">//新增保存分类</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">saveType</span><span class="hljs-params">(Type type)</span></span>;    <span class="hljs-comment">//根据id查询分类</span>    <span class="hljs-function">Type <span class="hljs-title">getType</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">//查询所有分类</span>    <span class="hljs-function">List&lt;Type&gt; <span class="hljs-title">getAllType</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//根据分类名称查询分类</span>    <span class="hljs-function">Type <span class="hljs-title">getTypeByName</span><span class="hljs-params">(String name)</span></span>;    <span class="hljs-comment">//编辑修改分类</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateType</span><span class="hljs-params">(Type type)</span></span>;    <span class="hljs-comment">//删除分类</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteType</span><span class="hljs-params">(Long id)</span></span>;&#125;</code></pre><h3 id="4-引入分页插件"><a href="#4-引入分页插件" class="headerlink" title="4. 引入分页插件"></a>4. 引入分页插件</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入分页插件--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="5-Controller"><a href="#5-Controller" class="headerlink" title="5.  Controller"></a>5.  Controller</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> jdk.nashorn.internal.objects.annotations.Getter;<span class="hljs-keyword">import</span> org.springframework.validation.annotation.Validated;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<span class="hljs-keyword">import</span> com.star.entity.Type;<span class="hljs-keyword">import</span> com.star.service.TypeService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/admin"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TypeController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> TypeService typeService;    <span class="hljs-comment">//分页查询分类列表</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/types"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model, @RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span>Integer pageNum)</span>&#123;        String orderBy = <span class="hljs-string">"id desc"</span>;        PageHelper.startPage(pageNum,<span class="hljs-number">10</span>,orderBy);        List&lt;Type&gt; list = typeService.getAllType();        PageInfo&lt;Type&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;Type&gt;(list);        model.addAttribute(<span class="hljs-string">"pageInfo"</span>,pageInfo);        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/types"</span>;    &#125;    <span class="hljs-comment">//返回新增分类页面</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"types/input"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">input</span><span class="hljs-params">(Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"type"</span>,<span class="hljs-keyword">new</span> Type());        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/types-input"</span>;    &#125;    <span class="hljs-comment">//新增分类</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/types"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">post</span><span class="hljs-params">(Type type, RedirectAttributes attributes)</span></span>&#123;        Type type1 = typeService.getTypeByName(type.getName());        <span class="hljs-keyword">if</span>(type1 != <span class="hljs-keyword">null</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"不能添加重复的分类"</span>);        &#125;        <span class="hljs-keyword">int</span> t = typeService.saveType(type);        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"新增失败"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"新增成功"</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/types"</span>;    &#125;    <span class="hljs-comment">//跳转修改分类界面</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/types/&#123;id&#125;/input"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editInput</span><span class="hljs-params">(@PathVariable Long id,Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"type"</span>,typeService.getType(id));        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/types-input"</span>;    &#125;    <span class="hljs-comment">//编辑修改分类</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/types/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editPost</span><span class="hljs-params">(Type type,RedirectAttributes attributes)</span></span>&#123;        Type type1 = typeService.getTypeByName(type.getName());        <span class="hljs-keyword">if</span>(type1 != <span class="hljs-keyword">null</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"不能添加重复的分类"</span>);            <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/types/input"</span>;        &#125;        <span class="hljs-keyword">int</span> t = typeService.updateType(type);        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"编辑失败"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"编辑成功"</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/types"</span>;    &#125;    <span class="hljs-comment">//删除分类</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/types/&#123;id&#125;/delete"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">(@PathVariable Long id,RedirectAttributes attributes)</span></span>&#123;        typeService.deleteType(id);        attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"删除成功"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/types"</span>;    &#125;&#125;</code></pre><h2 id="7-博客管理"><a href="#7-博客管理" class="headerlink" title="7. 博客管理"></a>7. 博客管理</h2><h3 id="1-创建查询实体类BlogQuery，ShowBlog，SearchBlog"><a href="#1-创建查询实体类BlogQuery，ShowBlog，SearchBlog" class="headerlink" title="1.  创建查询实体类BlogQuery，ShowBlog，SearchBlog"></a>1.  创建查询实体类BlogQuery，ShowBlog，SearchBlog</h3><ul><li>建立不同的查询类是为了分离，如BlogQuery就是为了显示列表，显示列表的所有元素就是当前BlogQuery的属性</li><li>同理，ShowBlog就是编辑修改页面，需要用到的属性</li><li>SearchBlog，由于搜索博客只需要两个属性，建立一个SearchBlog单独用来创立视图层引用</li><li>以上三个业务层和持久层都是用的BlogDao和BlogService层</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 查询博客列表</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogQuery</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> Date updateTime;    <span class="hljs-keyword">private</span> Boolean recommend;    <span class="hljs-keyword">private</span> Boolean published;    <span class="hljs-keyword">private</span> Long typeId;    <span class="hljs-keyword">private</span> Type type;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 编辑修改文章实体类</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowBlog</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String flag;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> String content;    <span class="hljs-keyword">private</span> Long typeId;    <span class="hljs-keyword">private</span> String firstPicture;    <span class="hljs-keyword">private</span> String description;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> recommend;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> published;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> shareStatement;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> appreciation;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> commentabled;    <span class="hljs-keyword">private</span> Date updateTime;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Getter;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> lombok.Setter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 搜索博客管理列表</span><span class="hljs-comment"> */</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchBlog</span> </span>&#123;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> Long typeId;&#125;</code></pre><h3 id="2-Dao层和Service及Impl"><a href="#2-Dao层和Service及Impl" class="headerlink" title="2. Dao层和Service及Impl"></a>2. Dao层和Service及Impl</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.dao;<span class="hljs-keyword">import</span> com.star.entity.Blog;<span class="hljs-keyword">import</span> com.star.entity.BlogQuery;<span class="hljs-keyword">import</span> com.star.entity.SearchBlog;<span class="hljs-keyword">import</span> com.star.entity.ShowBlog;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Mapper</span><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BlogDao</span> </span>&#123;    <span class="hljs-comment">//保存新增博客</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">saveBlog</span><span class="hljs-params">(Blog blog)</span></span>;    <span class="hljs-comment">//查询文章管理列表</span>    <span class="hljs-function">List&lt;BlogQuery&gt; <span class="hljs-title">getAllBlogQuery</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//删除博客</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteBlog</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">//更新博客</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBlog</span><span class="hljs-params">(ShowBlog showBlog)</span></span>;    <span class="hljs-comment">//查询编辑修改的文章</span>    <span class="hljs-function">ShowBlog <span class="hljs-title">getBlogById</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">//搜索博客管理列表</span>    <span class="hljs-function">List&lt;BlogQuery&gt; <span class="hljs-title">searchByTitleAndType</span><span class="hljs-params">(SearchBlog searchBlog)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service;<span class="hljs-keyword">import</span> com.star.entity.Blog;<span class="hljs-keyword">import</span> com.star.entity.BlogQuery;<span class="hljs-keyword">import</span> com.star.entity.SearchBlog;<span class="hljs-keyword">import</span> com.star.entity.ShowBlog;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BlogService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">saveBlog</span><span class="hljs-params">(Blog blog)</span></span>;    <span class="hljs-function">List&lt;BlogQuery&gt; <span class="hljs-title">getAllBlog</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteBlog</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-function">ShowBlog <span class="hljs-title">getBlogById</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBlog</span><span class="hljs-params">(ShowBlog showBlog)</span></span>;    <span class="hljs-function">List&lt;BlogQuery&gt; <span class="hljs-title">getBlogBySearch</span><span class="hljs-params">(SearchBlog searchBlog)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service.impl;<span class="hljs-keyword">import</span> com.star.dao.BlogDao;<span class="hljs-keyword">import</span> com.star.entity.Blog;<span class="hljs-keyword">import</span> com.star.entity.BlogQuery;<span class="hljs-keyword">import</span> com.star.entity.SearchBlog;<span class="hljs-keyword">import</span> com.star.entity.ShowBlog;<span class="hljs-keyword">import</span> com.star.service.BlogService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BlogService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BlogDao blogDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveBlog</span><span class="hljs-params">(Blog blog)</span> </span>&#123;        blog.setCreateTime(<span class="hljs-keyword">new</span> Date());        blog.setUpdateTime(<span class="hljs-keyword">new</span> Date());        blog.setViews(<span class="hljs-number">0</span>);        blog.setCommentCount(<span class="hljs-number">0</span>);        <span class="hljs-keyword">return</span> blogDao.saveBlog(blog);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;BlogQuery&gt; <span class="hljs-title">getAllBlog</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> blogDao.getAllBlogQuery();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteBlog</span><span class="hljs-params">(Long id)</span> </span>&#123;        blogDao.deleteBlog(id);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShowBlog <span class="hljs-title">getBlogById</span><span class="hljs-params">(Long id)</span> </span>&#123;        <span class="hljs-keyword">return</span> blogDao.getBlogById(id);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBlog</span><span class="hljs-params">(ShowBlog showBlog)</span> </span>&#123;        showBlog.setUpdateTime(<span class="hljs-keyword">new</span> Date());        <span class="hljs-keyword">return</span> blogDao.updateBlog(showBlog);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;BlogQuery&gt; <span class="hljs-title">getBlogBySearch</span><span class="hljs-params">(SearchBlog searchBlog)</span> </span>&#123;        <span class="hljs-keyword">return</span> blogDao.searchByTitleAndType(searchBlog);    &#125;&#125;</code></pre><h3 id="3-mapper文件，这里设计多表查询，较为复杂"><a href="#3-mapper文件，这里设计多表查询，较为复杂" class="headerlink" title="3. mapper文件，这里设计多表查询，较为复杂"></a>3. mapper文件，这里设计多表查询，较为复杂</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.star.dao.BlogDao"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"saveBlog"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.Blog"</span>&gt;</span>        insert into myblog.t_blog (id,title, content, first_picture, flag,    views, comment_count, appreciation, share_statement, commentabled, published,    recommend, create_time, update_time, type_id, user_id, description)    values (#&#123;id&#125;,#&#123;title&#125;,#&#123;content&#125;,#&#123;firstPicture&#125;,#&#123;flag&#125;,#&#123;views&#125;,#&#123;commentCount&#125;,#&#123;appreciation&#125;,    #&#123;shareStatement&#125;,#&#123;commentabled&#125;,#&#123;published&#125;,#&#123;recommend&#125;,#&#123;createTime&#125;,    #&#123;updateTime&#125;,#&#123;typeId&#125;,#&#123;userId&#125;,#&#123;description&#125;);    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 查询文章管理列表多对一配置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"blog"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.star.entity.BlogQuery"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"title"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"updateTime"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"update_Time"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"recommend"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"recommend"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"published"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"published"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"typeId"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"type_id"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"type"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"com.star.entity.Type"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 查询文章管理列表 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getAllBlogQuery"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"blog"</span>&gt;</span>        select b.id,b.title,b.update_time,b.recommend,b.published,b.type_id,t.id,t.name    from myblog.t_blog b left outer join    myblog.t_type t on b.type_id = t.id order by b.update_time desc    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 删除博客 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteBlog"</span>&gt;</span>        delete from myblog.t_blog where id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 更新博客 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateBlog"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.ShowBlog"</span>&gt;</span>    update myblog.t_blog set published = #&#123;published&#125;,flag = #&#123;flag&#125; ,    title = #&#123;title&#125;, content = #&#123;content&#125;, type_id = #&#123;typeId&#125;,    first_picture = #&#123;firstPicture&#125; , description = #&#123;description&#125; , recommend = #&#123;recommend&#125; ,    share_statement = #&#123;shareStatement&#125;, appreciation = #&#123;appreciation&#125;,    commentabled = #&#123;commentabled&#125; ,update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 查询编辑修改的文章 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getBlogById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.ShowBlog"</span>&gt;</span>    select b.id,b.flag,b.title,b.content,b.type_id,    b.first_picture,b.description,b.recommend,b.published,b.share_statement,    b.appreciation,b.commentabled from myblog.t_blog b  where  b.id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!-- 模糊查询 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"searchByTitleAndType"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.SearchBlog"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"blog"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pattern"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"'%' + title + '%'"</span> /&gt;</span>        select b.id,b.title,b.type_id,t.id,t.name from myblog.t_blog b ,myblog.t_type t        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"1 == 1"</span>&gt;</span>                b.type_id = t.id            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"typeId != null"</span>&gt;</span>                and b.type_id = #&#123;typeId&#125;            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">"title != null"</span>&gt;</span>                and b.title like #&#123;pattern&#125;            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h3 id="4-resultMap-xml详解"><a href="#4-resultMap-xml详解" class="headerlink" title="4. resultMap/xml详解"></a>4. resultMap/xml详解</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"唯一的标识"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"映射的pojo对象"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"表的主键字段，或者可以为查询语句中的别名字段"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"字段类型"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"映射pojo对象的主键属性"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"表的一个字段（可以为任意表的一个字段）"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"字段类型"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"映射到pojo对象的一个属性（须为type定义的pojo对象中的一个属性）"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"pojo的一个对象属性"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"pojo关联的pojo对象"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"关联pojo对象对应表的主键字段"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"字段类型"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"关联pojo对象的主席属性"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">"任意表的字段"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"字段类型"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"关联pojo对象的属性"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 集合中的property须为oftype定义的pojo对象的属性--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"pojo的集合属性"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"集合中的pojo对象"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"集合中pojo对象对应的表的主键字段"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"字段类型"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"集合中pojo对象的主键属性"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"可以为任意表的字段"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"字段类型"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"集合中的pojo对象的属性"</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><h3 id="5-Controller-1"><a href="#5-Controller-1" class="headerlink" title="5.  Controller"></a>5.  Controller</h3><ul><li>注意controller下的方法互相跳转，需要在return中加 “<code>redirect:</code>“</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<span class="hljs-keyword">import</span> com.star.entity.*;<span class="hljs-keyword">import</span> com.star.service.BlogService;<span class="hljs-keyword">import</span> com.star.service.TypeService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/admin"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BlogService blogService;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> TypeService typeService;    <span class="hljs-comment">//跳转博客新增页面</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/blogs/input"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">input</span><span class="hljs-params">(Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"types"</span>,typeService.getAllType());        model.addAttribute(<span class="hljs-string">"blog"</span>,<span class="hljs-keyword">new</span> Blog());        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/blogs-input"</span>;    &#125;    <span class="hljs-comment">//博客新增</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/blogs"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">post</span><span class="hljs-params">(Blog blog, RedirectAttributes attributes, HttpSession session)</span></span>&#123;        blog.setUser((User)session.getAttribute(<span class="hljs-string">"user"</span>));        blog.setType(typeService.getType(blog.getType().getId()));        blog.setTypeId(blog.getType().getId());        blog.setUserId(blog.getUser().getId());        <span class="hljs-keyword">int</span> b = blogService.saveBlog(blog);        <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"新增失败"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"新增新增"</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/blogs"</span>;    &#125;    <span class="hljs-comment">//博客列表</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/blogs"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">blogs</span><span class="hljs-params">(Model model, @RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span> Integer pageNum)</span>&#123;        String orderBy = <span class="hljs-string">"update_time desc"</span>;        PageHelper.startPage(pageNum,<span class="hljs-number">10</span>,orderBy);        List&lt;BlogQuery&gt; list = blogService.getAllBlog();        PageInfo&lt;BlogQuery&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;BlogQuery&gt;(list);        model.addAttribute(<span class="hljs-string">"types"</span>,typeService.getAllType());        model.addAttribute(<span class="hljs-string">"pageInfo"</span>,pageInfo);        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/blogs"</span>;    &#125;    <span class="hljs-comment">//删除博客</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/blogs/&#123;id&#125;/delete"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">(@PathVariable Long id,RedirectAttributes attributes)</span></span>&#123;        blogService.deleteBlog(id);        attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"删除成功"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/blogs"</span>;    &#125;    <span class="hljs-comment">//跳转到编辑修改文章</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/blogs/&#123;id&#125;/input"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editInput</span><span class="hljs-params">(@PathVariable Long id,Model model)</span></span>&#123;        ShowBlog blogById = blogService.getBlogById(id);        List&lt;Type&gt; allType = typeService.getAllType();        model.addAttribute(<span class="hljs-string">"blog"</span>,blogById);        model.addAttribute(<span class="hljs-string">"types"</span>,allType);        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/blogs-input"</span>;    &#125;    <span class="hljs-comment">//编辑修改文章</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"blogs/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editPost</span><span class="hljs-params">(ShowBlog showBlog,RedirectAttributes attributes)</span></span>&#123;        <span class="hljs-keyword">int</span> b = blogService.updateBlog(showBlog);        <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"编辑成功"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"编辑失败"</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/blogs"</span>;    &#125;    <span class="hljs-comment">//搜索博客管理列表</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/blogs/search"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">search</span><span class="hljs-params">(SearchBlog searchBlog,Model model,</span></span><span class="hljs-function"><span class="hljs-params">                         @RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span>Integer pageNum)</span>&#123;        List&lt;BlogQuery&gt; blogBySearch = blogService.getBlogBySearch(searchBlog);        PageHelper.startPage(pageNum,<span class="hljs-number">10</span>);        PageInfo&lt;BlogQuery&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(blogBySearch);        model.addAttribute(<span class="hljs-string">"pageInfo"</span>,pageInfo);        <span class="hljs-comment">//这是thymeleaf的一个模板片断，相当于返回admin/blogs模板中的某个片段。</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/blogs :: blogList"</span>;    &#125;&#125;</code></pre><h2 id="8-友链管理"><a href="#8-友链管理" class="headerlink" title="8. 友链管理"></a>8. 友链管理</h2><p><strong>友链功能：CRUD，还需要编辑修改友链传递数据，新增作重复判断</strong></p><h3 id="Dao文件接口"><a href="#Dao文件接口" class="headerlink" title="Dao文件接口"></a>Dao文件接口</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.dao;<span class="hljs-keyword">import</span> com.star.entity.FriendLink;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Mapper</span><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FriendLinkDao</span> </span>&#123;    <span class="hljs-comment">//查询友链管理列表</span>    <span class="hljs-function">List&lt;FriendLink&gt; <span class="hljs-title">listFriendLink</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//新增友链</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">saveFriendLink</span><span class="hljs-params">(FriendLink friendLink)</span></span>;    <span class="hljs-comment">//根据网址查询友链</span>    <span class="hljs-function">FriendLink <span class="hljs-title">getFriendLinkByBlogaddress</span><span class="hljs-params">(String blogaddress)</span></span>;    <span class="hljs-comment">//根据id查询友链</span>    <span class="hljs-function">FriendLink <span class="hljs-title">getFriendLink</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">//编辑修改友链</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateFriendLink</span><span class="hljs-params">(FriendLink friendLink)</span></span>;    <span class="hljs-comment">//删除友链</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteFriendLink</span><span class="hljs-params">(Long id)</span></span>;&#125;</code></pre><h3 id="xml文件"><a href="#xml文件" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.star.dao.FriendLinkDao"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 查询所有友链 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"listFriendLink"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.FriendLink"</span>&gt;</span>        select * from myblog.t_friend order by t_friend.create_time desc    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 添加友链 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"saveFriendLink"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.FriendLink"</span>&gt;</span>        insert into myblog.t_friend(blogaddress, blogname, create_time, pictureaddress)        values (#&#123;blogaddress&#125;,#&#123;blogname&#125;,#&#123;createTime&#125;,#&#123;pictureaddress&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 根据网址查询友链 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getFriendLinkByBlogaddress"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.FriendLink"</span>&gt;</span>        select * from myblog.t_friend f where f.blogaddress = #&#123;blogaddress&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 根据id查询友链 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getFriendLink"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.FriendLink"</span>&gt;</span>        select * from myblog.t_friend f where f.id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 编辑修改友链 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateFriendLink"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.FriendLink"</span>&gt;</span>        update myblog.t_friend set blogname = #&#123;blogname&#125;,blogaddress = #&#123;blogaddress&#125;, pictureaddress = #&#123;pictureaddress&#125;        where id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 删除友链 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteFriendLink"</span>&gt;</span>        delete from myblog.t_friend where id= #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h3 id="Service及Impl"><a href="#Service及Impl" class="headerlink" title="Service及Impl"></a>Service及Impl</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service;<span class="hljs-keyword">import</span> com.star.entity.FriendLink;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FriendLinkService</span> </span>&#123;    <span class="hljs-comment">//查询友链管理列表</span>    <span class="hljs-function">List&lt;FriendLink&gt; <span class="hljs-title">listFriendLink</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//新增友链</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">saveFriendLink</span><span class="hljs-params">(FriendLink friendLink)</span></span>;    <span class="hljs-comment">//根据网址查询友链</span>    <span class="hljs-function">FriendLink <span class="hljs-title">getFriendLinkByBlogaddress</span><span class="hljs-params">(String blogaddress)</span></span>;    <span class="hljs-comment">//根据id查询友链</span>    <span class="hljs-function">FriendLink <span class="hljs-title">getFriendLink</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">//编辑修改友链</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateFriendLink</span><span class="hljs-params">(FriendLink friendLink)</span></span>;    <span class="hljs-comment">//删除友链</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteFriendLink</span><span class="hljs-params">(Long id)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service.impl;<span class="hljs-keyword">import</span> com.star.dao.FriendLinkDao;<span class="hljs-keyword">import</span> com.star.entity.FriendLink;<span class="hljs-keyword">import</span> com.star.service.FriendLinkService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FriendLinkServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FriendLinkService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> FriendLinkDao friendLinkDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;FriendLink&gt; <span class="hljs-title">listFriendLink</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> friendLinkDao.listFriendLink();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">saveFriendLink</span><span class="hljs-params">(FriendLink friendLink)</span> </span>&#123;        <span class="hljs-keyword">return</span> friendLinkDao.saveFriendLink(friendLink);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> FriendLink <span class="hljs-title">getFriendLinkByBlogaddress</span><span class="hljs-params">(String blogaddress)</span> </span>&#123;        <span class="hljs-keyword">return</span>  friendLinkDao.getFriendLinkByBlogaddress(blogaddress);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> FriendLink <span class="hljs-title">getFriendLink</span><span class="hljs-params">(Long id)</span> </span>&#123;        <span class="hljs-keyword">return</span> friendLinkDao.getFriendLink(id);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateFriendLink</span><span class="hljs-params">(FriendLink friendLink)</span> </span>&#123;        <span class="hljs-keyword">return</span> friendLinkDao.updateFriendLink(friendLink);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteFriendLink</span><span class="hljs-params">(Long id)</span> </span>&#123;        friendLinkDao.deleteFriendLink(id);    &#125;&#125;</code></pre><h3 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<span class="hljs-keyword">import</span> com.star.entity.FriendLink;<span class="hljs-keyword">import</span> com.star.service.FriendLinkService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/admin"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FriendController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> FriendLinkService friendLinkService;    <span class="hljs-comment">//查询所有友链</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/friendlinks"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">friend</span><span class="hljs-params">(Model model, @RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span> Integer pageNum)</span>&#123;        PageHelper.startPage(pageNum,<span class="hljs-number">10</span>);        List&lt;FriendLink&gt; friendLinkList = friendLinkService.listFriendLink();        PageInfo&lt;FriendLink&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(friendLinkList);        model.addAttribute(<span class="hljs-string">"pageInfo"</span>,pageInfo);        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/friendlinks"</span>;    &#125;    <span class="hljs-comment">//跳转友链新增界面</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/friendlinks/input"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">input</span><span class="hljs-params">(Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"friendlink"</span>,<span class="hljs-keyword">new</span> FriendLink());        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/friendlinks-input"</span>;    &#125;    <span class="hljs-comment">//新增友链</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/friendlinks"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">post</span><span class="hljs-params">(FriendLink friendLink, BindingResult result, RedirectAttributes attributes)</span></span>&#123;        FriendLink type1 = friendLinkService.getFriendLinkByBlogaddress(friendLink.getBlogaddress());        <span class="hljs-keyword">if</span>(type1 != <span class="hljs-keyword">null</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"不能添加相同网址"</span>);            <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/friendlinks/input"</span>;        &#125;        <span class="hljs-keyword">if</span>(result.hasErrors())&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/friendlinks-input"</span>;        &#125;        friendLink.setCreateTime(<span class="hljs-keyword">new</span> Date());        <span class="hljs-keyword">int</span> f = friendLinkService.saveFriendLink(friendLink);        <span class="hljs-keyword">if</span>(f == <span class="hljs-number">0</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"新增失败"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"新增成功"</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/friendlinks"</span>;    &#125;    <span class="hljs-comment">//跳转友链修改界面</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"friendlinks/&#123;id&#125;/input"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editInput</span><span class="hljs-params">(@PathVariable Long id,Model model)</span></span>&#123;        <span class="hljs-comment">//修改时，自动给界面赋值需要修改的友链字段，方便用户修改</span>        model.addAttribute(<span class="hljs-string">"friendlink"</span>,friendLinkService.getFriendLink(id));        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/friendlinks-input"</span>;    &#125;    <span class="hljs-comment">//友链修改</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/friendlinks/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editPost</span><span class="hljs-params">(FriendLink friendLink,RedirectAttributes attributes)</span></span>&#123;        <span class="hljs-keyword">int</span> t = friendLinkService.updateFriendLink(friendLink);        <span class="hljs-keyword">if</span>(t == <span class="hljs-number">0</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"编辑成功"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"编辑失败"</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/friendlinks"</span>;    &#125;    <span class="hljs-comment">//友链删除</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/friendlinks/&#123;id&#125;/delete"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">(@PathVariable Long id,RedirectAttributes attributes)</span></span>&#123;        friendLinkService.deleteFriendLink(id);        attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"删除成功"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/friendlinks"</span>;    &#125;&#125;</code></pre><h2 id="9-相册管理"><a href="#9-相册管理" class="headerlink" title="9. 相册管理"></a>9. 相册管理</h2><p><strong>CRUD功能</strong></p><h3 id="Dao接口"><a href="#Dao接口" class="headerlink" title="Dao接口"></a>Dao接口</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.dao;<span class="hljs-keyword">import</span> com.star.entity.Picture;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Mapper</span><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PictureDao</span> </span>&#123;    <span class="hljs-comment">//查询照片</span>    <span class="hljs-function">List&lt;Picture&gt; <span class="hljs-title">listPicture</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//添加图片</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">savePicture</span><span class="hljs-params">(Picture picture)</span></span>;    <span class="hljs-comment">//根据id查询图片</span>    <span class="hljs-function">Picture <span class="hljs-title">getPicture</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">//编辑修改相册</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updatePicture</span><span class="hljs-params">(Picture picture)</span></span>;    <span class="hljs-comment">//删除照片</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deletePicture</span><span class="hljs-params">(Long id)</span></span>;&#125;</code></pre><h3 id="xml文件-1"><a href="#xml文件-1" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.star.dao.PictureDao"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 查询所有照片 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"listPicture"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.Picture"</span>&gt;</span>        select * from myblog.t_picture order by t_picture.id desc    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 添加照片 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"savePicture"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.Picture"</span>&gt;</span>        insert into myblog.t_picture (picturename,picturetime,pictureaddress,picturedescription)        values (#&#123;picturename&#125;,#&#123;picturetime&#125;,#&#123;pictureaddress&#125;,#&#123;picturedescription&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 根据id查询照片 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getPicture"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.Picture"</span>&gt;</span>        select * from myblog.t_picture p where p.id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 编辑修改相册 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updatePicture"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.Picture"</span>&gt;</span>        update myblog.t_picture        set picturename = #&#123;picturename&#125;, picturetime = #&#123;picturetime&#125;, pictureaddress = #&#123;pictureaddress&#125;, picturedescription = #&#123;picturedescription&#125;        where id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 删除照片 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deletePicture"</span>&gt;</span>        delete from myblog.t_picture where id = #&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h3 id="Service及Impl-1"><a href="#Service及Impl-1" class="headerlink" title="Service及Impl"></a>Service及Impl</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service;<span class="hljs-keyword">import</span> com.star.entity.Picture;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PictureService</span> </span>&#123;    <span class="hljs-comment">//查询照片</span>    <span class="hljs-function">List&lt;Picture&gt; <span class="hljs-title">listPicture</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">//添加图片</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">savePicture</span><span class="hljs-params">(Picture picture)</span></span>;    <span class="hljs-comment">//根据id查询图片</span>    <span class="hljs-function">Picture <span class="hljs-title">getPicture</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">//编辑修改相册</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updatePicture</span><span class="hljs-params">(Picture picture)</span></span>;    <span class="hljs-comment">//删除照片</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deletePicture</span><span class="hljs-params">(Long id)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service.impl;<span class="hljs-keyword">import</span> com.star.dao.PictureDao;<span class="hljs-keyword">import</span> com.star.entity.Picture;<span class="hljs-keyword">import</span> com.star.service.PictureService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PictureServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PictureService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> PictureDao pictureDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Picture&gt; <span class="hljs-title">listPicture</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pictureDao.listPicture();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">savePicture</span><span class="hljs-params">(Picture picture)</span> </span>&#123;        <span class="hljs-keyword">return</span> pictureDao.savePicture(picture);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Picture <span class="hljs-title">getPicture</span><span class="hljs-params">(Long id)</span> </span>&#123;        <span class="hljs-keyword">return</span> pictureDao.getPicture(id);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updatePicture</span><span class="hljs-params">(Picture picture)</span> </span>&#123;        <span class="hljs-keyword">return</span> pictureDao.updatePicture(picture);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deletePicture</span><span class="hljs-params">(Long id)</span> </span>&#123;        pictureDao.deletePicture(id);    &#125;&#125;</code></pre><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<span class="hljs-keyword">import</span> com.star.entity.Picture;<span class="hljs-keyword">import</span> com.star.service.PictureService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.validation.BindingResult;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/admin"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PictureController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> PictureService pictureService;    <span class="hljs-comment">//查询照片列表</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/pictures"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">pictures</span><span class="hljs-params">(Model model, @RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span>Integer pageNum)</span>&#123;        PageHelper.startPage(pageNum,<span class="hljs-number">10</span>);        List&lt;Picture&gt; pictureList = pictureService.listPicture();        PageInfo&lt;Picture&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(pictureList);        model.addAttribute(<span class="hljs-string">"pageInfo"</span>,pageInfo);        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/pictures"</span>;    &#125;    <span class="hljs-comment">//跳转到新增页面</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/pictures/input"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">input</span><span class="hljs-params">(Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"picture"</span>,<span class="hljs-keyword">new</span> Picture());        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/pictures-input"</span>;    &#125;    <span class="hljs-comment">//照片新增</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/pictures"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">post</span><span class="hljs-params">(Picture picture, BindingResult result, RedirectAttributes attributes)</span></span>&#123;        <span class="hljs-keyword">if</span>(result.hasErrors())&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/pictures-input"</span>;        &#125;        <span class="hljs-keyword">int</span> p = pictureService.savePicture(picture);        <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"新增失败"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"新增成功"</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/pictures"</span>;    &#125;    <span class="hljs-comment">//跳转到编辑页面</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/pictures/&#123;id&#125;/input"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editInput</span><span class="hljs-params">(@PathVariable Long id,Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"picture"</span>,pictureService.getPicture(id));        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/pictures-input"</span>;    &#125;    <span class="hljs-comment">//照片编辑</span>    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/pictures/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">editPost</span><span class="hljs-params">(Picture picture,RedirectAttributes attributes)</span></span>&#123;        <span class="hljs-keyword">int</span> p = pictureService.updatePicture(picture);        <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>)&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"编辑失败"</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"编辑成功"</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/pictures"</span>;    &#125;    <span class="hljs-comment">//删除照片</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/pictures/&#123;id&#125;/delete"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">delete</span><span class="hljs-params">(@PathVariable Long id,RedirectAttributes attributes)</span></span>&#123;        pictureService.deletePicture(id);        attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"删除成功"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin/pictures"</span>;    &#125;&#125;</code></pre><h2 id="10-博客首页显示"><a href="#10-博客首页显示" class="headerlink" title="10. 博客首页显示"></a>10. 博客首页显示</h2><h3 id="功能分析："><a href="#功能分析：" class="headerlink" title="功能分析："></a>功能分析：</h3><ul><li>查询最新文章列表</li><li>查询最新推荐文章</li><li>搜索功能(根据关键字搜索功能)</li><li>统计博客信息<ul><li>博客总数</li><li>访问总数</li><li>评论总数</li><li>留言总数</li></ul></li></ul><h3 id="功能实现思路"><a href="#功能实现思路" class="headerlink" title="功能实现思路"></a>功能实现思路</h3><ul><li>查询最新文章列表：定义一个实体类来查询文章列表信息，并定义相应接口实现查询</li><li>查询最新推荐文章：定义一个实体类来查询推荐文章信息，定义相应接口实现查询</li><li>搜索博客：显示的还是列表博客，因此用文章列表信息的实体类，定义一个接口实现搜索</li><li>统计博客：定义接口关联SQL来实现统计博客信息</li></ul><h3 id="定义实体类：1-最新博客实体类-2-最新推荐实体类"><a href="#定义实体类：1-最新博客实体类-2-最新推荐实体类" class="headerlink" title="定义实体类：1. 最新博客实体类 2. 最新推荐实体类"></a>定义实体类：1. 最新博客实体类 2. 最新推荐实体类</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 首页博客信息实体类</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FirstPageBlog</span> </span>&#123;    <span class="hljs-comment">//博客信息</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> String firstPicture;    <span class="hljs-keyword">private</span> Integer views;    <span class="hljs-keyword">private</span> Integer commentCount;    <span class="hljs-keyword">private</span> Date updateTime;    <span class="hljs-keyword">private</span> String description;    <span class="hljs-comment">//分类名称</span>    <span class="hljs-keyword">private</span> String typeName;    <span class="hljs-comment">//用户名</span>    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-comment">//用户头像</span>    <span class="hljs-keyword">private</span> String avatar;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 推荐博客数据实体类</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecommendBlog</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> String firstPicture;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> recommend;&#125;</code></pre><h3 id="持久层接口"><a href="#持久层接口" class="headerlink" title="持久层接口"></a>持久层接口</h3><pre><code class="hljs java"><span class="hljs-comment">//查询首页最新博客列表信息</span><span class="hljs-function">List&lt;FirstPageBlog&gt; <span class="hljs-title">getFirstPageBlog</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//查询首页最新推荐信息</span><span class="hljs-function">List&lt;RecommendBlog&gt; <span class="hljs-title">getAllRecommendBlog</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//搜索博客列表</span><span class="hljs-function">List&lt;FirstPageBlog&gt; <span class="hljs-title">getSearchBlog</span><span class="hljs-params">(String query)</span></span>;<span class="hljs-comment">//统计博客总数</span><span class="hljs-function">Integer <span class="hljs-title">getBlogTotal</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//统计访问总数</span><span class="hljs-function">Integer <span class="hljs-title">getBlogViewTotal</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//统计评论总数</span><span class="hljs-function">Integer <span class="hljs-title">getBlogCommentTotal</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//统计留言总数</span><span class="hljs-function">Integer <span class="hljs-title">getBlogMessageTotal</span><span class="hljs-params">()</span></span>;</code></pre><h3 id="xml文件-2"><a href="#xml文件-2" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--查询首页最新博客列表信息--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"firstPageBlog"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.star.queryvo.FirstPageBlog"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"title"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"firstPicture"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"first_picture"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"views"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"views"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"commentCount"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"comment_count"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"createTime"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"create_time"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"updateTime"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"update_time"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"description"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"typeName"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"nickname"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"nickname"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"avatar"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"avatar"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getFirstPageBlog"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"firstPageBlog"</span>&gt;</span>    select b.id,b.title,b.first_picture, b.views, b.comment_count,b.create_time,b.update_time,b.description,    t.name ,    u.nickname, u.avatar    from myblog.t_blog b, myblog.t_type t,myblog.t_user u    where b.type_id = t.id and  u.id = b.user_id order by b.create_time desc<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--查询推荐文章--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getAllRecommendBlog"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.queryvo.RecommendBlog"</span>&gt;</span>    select * from myblog.t_blog where t_blog.recommend = true order by t_blog.create_time desc limit 4;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--搜索文章--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getSearchBlog"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"firstPageBlog"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"pattern"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"'%' + query + '%'"</span> /&gt;</span>    select b.id,b.title,b.first_picture, b.views,b.comment_count,b.update_time,b.description,    t.name ,    u.nickname, u.avatar    from myblog.t_blog b, myblog.t_type t,myblog.t_user u    where b.type_id = t.id and  u.id = b.user_id and (b.title like #&#123;pattern&#125; or b.content like  #&#123;pattern&#125;)    order by b.update_time desc<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--统计博客信息--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getBlogTotal"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Integer"</span>&gt;</span>    select count(*) from myblog.t_blog<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getBlogViewTotal"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Integer"</span>&gt;</span>    select coalesce (sum(views),0) from myblog.t_blog<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getBlogCommentTotal"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Integer"</span>&gt;</span>    select count(*) from myblog.t_comment<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getBlogMessageTotal"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Integer"</span>&gt;</span>    select count(*) from myblog.t_message<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p><strong>注意：SQL语句有一个需要注意的地方</strong></p><ul><li>搜索文章使用的是模糊查询</li><li>本来使用的统计访问总数的SQL语句是 <code>select sum(views) from myblog.t_blog</code></li><li>发现当sum求和返回为null的时候，会报空指针异常</li><li>所以改用 <code>coalesce(sum(views),0)</code>,当sum求和为null的时候赋为0</li></ul><h3 id="Service及Impl-2"><a href="#Service及Impl-2" class="headerlink" title="Service及Impl"></a>Service及Impl</h3><pre><code class="hljs java"><span class="hljs-comment">//查询首页最新博客列表信息</span><span class="hljs-function">List&lt;FirstPageBlog&gt; <span class="hljs-title">getAllFirstPageBlog</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//查询首页最新推荐信息</span><span class="hljs-function">List&lt;RecommendBlog&gt; <span class="hljs-title">getRecommendedBlog</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//搜索博客列表</span><span class="hljs-function">List&lt;FirstPageBlog&gt; <span class="hljs-title">getSearchBlog</span><span class="hljs-params">(String query)</span></span>;<span class="hljs-comment">//统计博客总数</span><span class="hljs-function">Integer <span class="hljs-title">getBlogTotal</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//统计访问总数</span><span class="hljs-function">Integer <span class="hljs-title">getBlogViewTotal</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//统计评论总数</span><span class="hljs-function">Integer <span class="hljs-title">getBlogCommentTotal</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//统计留言总数</span><span class="hljs-function">Integer <span class="hljs-title">getBlogMessageTotal</span><span class="hljs-params">()</span></span>;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//查询首页最新博客列表信息</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;FirstPageBlog&gt; <span class="hljs-title">getAllFirstPageBlog</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> blogDao.getFirstPageBlog();&#125;<span class="hljs-comment">//查询首页最新推荐信息</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;RecommendBlog&gt; <span class="hljs-title">getRecommendedBlog</span><span class="hljs-params">()</span> </span>&#123;    List&lt;RecommendBlog&gt; allRecommendBlog = blogDao.getAllRecommendBlog();    <span class="hljs-keyword">return</span> allRecommendBlog;&#125;<span class="hljs-comment">//搜索博客列表</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;FirstPageBlog&gt; <span class="hljs-title">getSearchBlog</span><span class="hljs-params">(String query)</span> </span>&#123;    <span class="hljs-keyword">return</span> blogDao.getSearchBlog(query);&#125;<span class="hljs-comment">//统计博客总数</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getBlogTotal</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> blogDao.getBlogTotal();&#125;<span class="hljs-comment">//统计访问总数</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getBlogViewTotal</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> blogDao.getBlogViewTotal();&#125;<span class="hljs-comment">//统计评论总数</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getBlogCommentTotal</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> blogDao.getBlogCommentTotal();&#125;<span class="hljs-comment">//统计留言总数</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getBlogMessageTotal</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> blogDao.getBlogMessageTotal();&#125;</code></pre><h3 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<span class="hljs-keyword">import</span> com.star.entity.DetailBlog;<span class="hljs-keyword">import</span> com.star.entity.FirstPageBlog;<span class="hljs-keyword">import</span> com.star.entity.RecommendBlog;<span class="hljs-keyword">import</span> com.star.service.BlogService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.support.RedirectAttributes;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 首页控制器</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BlogService blogService;    <span class="hljs-comment">//分页查询博客列表</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model, @RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span>Integer pageNum,</span><span class="hljs-function">                        RedirectAttributes attributes)</span>&#123;        PageHelper.startPage(pageNum,<span class="hljs-number">10</span>);        List&lt;FirstPageBlog&gt; firstPageBlogs = blogService.getFirstPageBlog();        List&lt;RecommendBlog&gt; recommendBlogs = blogService.getAllRecommendBlog();        PageInfo&lt;FirstPageBlog&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(firstPageBlogs);        model.addAttribute(<span class="hljs-string">"pageInfo"</span>,pageInfo);        model.addAttribute(<span class="hljs-string">"recommendedBlogs"</span>,recommendBlogs);        <span class="hljs-keyword">return</span> <span class="hljs-string">"index"</span>;    &#125;    <span class="hljs-comment">//搜索博客</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"search"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">search</span><span class="hljs-params">(Model model,</span></span><span class="hljs-function"><span class="hljs-params">                         @RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span>Integer pageNum,</span><span class="hljs-function">                         @RequestParam String query)</span>&#123;        PageHelper.startPage(pageNum,<span class="hljs-number">1000</span>);        List&lt;FirstPageBlog&gt; firstPageBlogs = blogService.getFirstPageBlog();        PageInfo&lt;FirstPageBlog&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(firstPageBlogs);        model.addAttribute(<span class="hljs-string">"pageInfo"</span>,pageInfo);        model.addAttribute(<span class="hljs-string">"query"</span>,query);        <span class="hljs-keyword">return</span> <span class="hljs-string">"search"</span>;    &#125;    <span class="hljs-comment">//博客信息统计</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"footer/blogmessage"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">blogMessage</span><span class="hljs-params">(Model model)</span></span>&#123;        <span class="hljs-keyword">int</span> blogTotal = blogService.getBlogTotal();        <span class="hljs-keyword">int</span> blogViewTotal = blogService.getBlogViewTotal();        <span class="hljs-keyword">int</span> blogCommentTotal = blogService.getBlogCommentTotal();        <span class="hljs-keyword">int</span> blogMessageTotal = blogService.getBlogMessageTotal();        model.addAttribute(<span class="hljs-string">"blogTotal"</span>,blogTotal);        model.addAttribute(<span class="hljs-string">"blogViewTotal"</span>,blogViewTotal);        model.addAttribute(<span class="hljs-string">"blogCommentTotal"</span>,blogCommentTotal);        model.addAttribute(<span class="hljs-string">"blogMessageTotal"</span>,blogMessageTotal);        <span class="hljs-keyword">return</span> <span class="hljs-string">"index :: blogMessage"</span>;    &#125;    <span class="hljs-comment">//跳转博客详细界面</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/blog/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">blog</span><span class="hljs-params">(@PathVariable Long id,Model model)</span></span>&#123;        DetailBlog detailBlog = blogService.getDetailedBlog(id);        model.addAttribute(<span class="hljs-string">"blog"</span>,detailBlog);        <span class="hljs-keyword">return</span> <span class="hljs-string">"blog"</span>;    &#125;&#125;</code></pre><h2 id="11-博客详情页面显示"><a href="#11-博客详情页面显示" class="headerlink" title="11. 博客详情页面显示"></a>11. 博客详情页面显示</h2><h3 id="功能分析：-1"><a href="#功能分析：-1" class="headerlink" title="功能分析："></a>功能分析：</h3><ul><li>文章内容<ul><li>跳转博客详情界面，返回文章详情和评论内容</li></ul></li><li>评论内容</li></ul><h3 id="博客详情实体类，需要有博客信息和类型信息"><a href="#博客详情实体类，需要有博客信息和类型信息" class="headerlink" title="博客详情实体类，需要有博客信息和类型信息"></a>博客详情实体类，需要有博客信息和类型信息</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DetailBlog</span> </span>&#123;    <span class="hljs-comment">//博客信息</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String firstPicture;    <span class="hljs-keyword">private</span> String flag;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> String content;    <span class="hljs-keyword">private</span> Integer views;    <span class="hljs-keyword">private</span> Integer commentCount;    <span class="hljs-keyword">private</span> Date updateTime;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> commentabled;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> shareStatement;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> appreciation;    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-keyword">private</span> String avatar;    <span class="hljs-comment">//分类名称</span>    <span class="hljs-keyword">private</span> String typeName;&#125;</code></pre><h3 id="添加MarkDown编辑器工具类"><a href="#添加MarkDown编辑器工具类" class="headerlink" title="添加MarkDown编辑器工具类"></a>添加MarkDown编辑器工具类</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commonmark<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commonmark-ext-heading-anchor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atlassian.commonmark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commonmark-ext-gfm-tables<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.util;<span class="hljs-keyword">import</span> org.commonmark.Extension;<span class="hljs-keyword">import</span> org.commonmark.ext.gfm.tables.TableBlock;<span class="hljs-keyword">import</span> org.commonmark.ext.gfm.tables.TablesExtension;<span class="hljs-keyword">import</span> org.commonmark.ext.heading.anchor.HeadingAnchorExtension;<span class="hljs-keyword">import</span> org.commonmark.node.Link;<span class="hljs-keyword">import</span> org.commonmark.node.Node;<span class="hljs-keyword">import</span> org.commonmark.parser.Parser;<span class="hljs-keyword">import</span> org.commonmark.renderer.html.AttributeProvider;<span class="hljs-keyword">import</span> org.commonmark.renderer.html.AttributeProviderContext;<span class="hljs-keyword">import</span> org.commonmark.renderer.html.AttributeProviderFactory;<span class="hljs-keyword">import</span> org.commonmark.renderer.html.HtmlRenderer;<span class="hljs-keyword">import</span> java.util.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MarkdownUtils</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">markdownToHtml</span><span class="hljs-params">(String markdown)</span> </span>&#123;        Parser parser = Parser.builder().build();        Node document = parser.parse(markdown);        HtmlRenderer renderer = HtmlRenderer.builder().build();        <span class="hljs-keyword">return</span> renderer.render(document);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 增加扩展[标题锚点，表格生成]</span><span class="hljs-comment">     * Markdown转换成HTML</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> markdown</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">markdownToHtmlExtensions</span><span class="hljs-params">(String markdown)</span> </span>&#123;        <span class="hljs-comment">//h标题生成id</span>        Set&lt;Extension&gt; headingAnchorExtensions = Collections.singleton(HeadingAnchorExtension.create());        <span class="hljs-comment">//转换table的HTML</span>        List&lt;Extension&gt; tableExtension = Arrays.asList(TablesExtension.create());        Parser parser = Parser.builder()                .extensions(tableExtension)                .build();        Node document = parser.parse(markdown);        HtmlRenderer renderer = HtmlRenderer.builder()                .extensions(headingAnchorExtensions)                .extensions(tableExtension)                .attributeProviderFactory(<span class="hljs-keyword">new</span> AttributeProviderFactory() &#123;                    <span class="hljs-function"><span class="hljs-keyword">public</span> AttributeProvider <span class="hljs-title">create</span><span class="hljs-params">(AttributeProviderContext context)</span> </span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomAttributeProvider();                    &#125;                &#125;)                .build();        <span class="hljs-keyword">return</span> renderer.render(document);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 处理标签的属性</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomAttributeProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AttributeProvider</span> </span>&#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAttributes</span><span class="hljs-params">(Node node, String tagName, Map&lt;String, String&gt; attributes)</span> </span>&#123;            <span class="hljs-comment">//改变a标签的target属性为_blank</span>            <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> Link) &#123;                attributes.put(<span class="hljs-string">"target"</span>, <span class="hljs-string">"_blank"</span>);            &#125;            <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> TableBlock) &#123;                attributes.put(<span class="hljs-string">"class"</span>, <span class="hljs-string">"ui celled table"</span>);            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="持久层接口：详情显示"><a href="#持久层接口：详情显示" class="headerlink" title="持久层接口：详情显示"></a>持久层接口：详情显示</h3><pre><code class="hljs java"><span class="hljs-comment">//查询博客详情</span><span class="hljs-function">DetailedBlog <span class="hljs-title">getDetailedBlog</span><span class="hljs-params">(Long id)</span></span>;<span class="hljs-comment">//文章访问更新</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateViews</span><span class="hljs-params">(Long id)</span></span>;<span class="hljs-comment">//根据博客id查询出评论数量</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getCommentCountById</span><span class="hljs-params">(Long id)</span></span>;</code></pre><h3 id="xml文件-3"><a href="#xml文件-3" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"detailedBlog"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.star.queryvo.DetailedBlog"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"bid"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"firstPicture"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"first_picture"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"flag"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"flag"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"title"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"content"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"content"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"typeName"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"views"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"views"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"commentCount"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"comment_count"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"updateTime"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"update_time"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"commentabled"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"commentabled"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"shareStatement"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"share_statement"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"appreciation"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"appreciation"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"nickname"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"nickname"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"avatar"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"avatar"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-comment">&lt;!--博客详情查询--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getDetailedBlog"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"detailedBlog"</span>&gt;</span>    select b.id  bid,b.first_picture,b.flag,b.title,b.content,b.views,b.comment_count,b.update_time,b.commentabled,b.share_statement,b.appreciation,    u.nickname,u.avatar,t.name    from myblog.t_blog b,myblog.t_user u, myblog.t_type t    where b.user_id = u.id and b.type_id = t.id and b.id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--文章访问自增--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateViews"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.Blog"</span>&gt;</span>    update myblog.t_blog b set b.views = b.views+1 where b.id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><span class="hljs-comment">&lt;!--查询出文章评论数量并更新--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getCommentCountById"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.Blog"</span>&gt;</span>    update myblog.t_blog b set b.comment_count = (    select count(*) from myblog.t_comment c where c.blog_id = #&#123;id&#125; and b.id = #&#123;id&#125;    ) WHERE b.id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></code></pre><h3 id="持久层接口：添加博客"><a href="#持久层接口：添加博客" class="headerlink" title="持久层接口：添加博客"></a>持久层接口：添加博客</h3><p>添加博客，访问数量自增，评论数更新</p><pre><code class="hljs java"><span class="hljs-comment">//查询博客详情</span><span class="hljs-function">DetailedBlog <span class="hljs-title">getDetailedBlog</span><span class="hljs-params">(Long id)</span></span>;</code></pre><h3 id="ServiceImpl新增实现类"><a href="#ServiceImpl新增实现类" class="headerlink" title="ServiceImpl新增实现类"></a>ServiceImpl新增实现类</h3><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> DetailedBlog <span class="hljs-title">getDetailedBlog</span><span class="hljs-params">(Long id)</span> </span>&#123;    DetailedBlog detailedBlog = blogDao.getDetailedBlog(id);    <span class="hljs-keyword">if</span> (detailedBlog == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotFoundException(<span class="hljs-string">"该博客不存在"</span>);    &#125;    String content = detailedBlog.getContent();    detailedBlog.setContent(MarkdownUtils.markdownToHtmlExtensions(content));    <span class="hljs-comment">//文章访问数量自增</span>    blogDao.updateViews(id);    <span class="hljs-comment">//文章评论数量更新</span>    blogDao.getCommentCountById(id);    <span class="hljs-keyword">return</span> detailedBlog;&#125;</code></pre><h3 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h3><pre><code class="hljs java"><span class="hljs-comment">//跳转博客详情页面</span><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/blog/&#123;id&#125;"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">blog</span><span class="hljs-params">(@PathVariable Long id, Model model)</span> </span>&#123;    DetailedBlog detailedBlog = blogService.getDetailedBlog(id);    model.addAttribute(<span class="hljs-string">"blog"</span>, detailedBlog);    <span class="hljs-keyword">return</span> <span class="hljs-string">"blog"</span>;&#125;</code></pre><h2 id="12-其他页面显示"><a href="#12-其他页面显示" class="headerlink" title="12. 其他页面显示"></a>12. 其他页面显示</h2><h3 id="功能分析：-2"><a href="#功能分析：-2" class="headerlink" title="功能分析："></a>功能分析：</h3><ul><li>查询出所有分类</li><li>查询出该分类下的文章数目</li></ul><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><pre><code class="hljs java"><span class="hljs-comment">//查询所有分类TypeDao</span><span class="hljs-function">List&lt;Type&gt; <span class="hljs-title">getAllTypeAndBlog</span><span class="hljs-params">()</span></span>;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//根据TypeId查询博客列表，显示在分类页面BlogDao</span><span class="hljs-function">List&lt;FirstPageBlog&gt; <span class="hljs-title">getByTypeId</span><span class="hljs-params">(Long typeId)</span></span>;</code></pre><h3 id="xml文件-4"><a href="#xml文件-4" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"type"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.star.entity.Type"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tid"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"blogs"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"com.star.entity.Blog"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"bid"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"title"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"typeId"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"type_id"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-comment">&lt;!--查询分类--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getAllTypeAndBlog"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"type"</span>&gt;</span>    select t.id tid, t.name, b.id bid, b.title,b.type_id    from myblog.t_type t,myblog.t_blog b    where t.id = b.type_id<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据TypeId查询博客列表，显示在分类页面--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getByTypeId"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"firstPageBlog"</span>&gt;</span>    select b.id,b.title,b.first_picture, b.views, b.comment_count, b.update_time, b.description,t.name ,u.nickname, u.avatar    from myblog.t_blog b, myblog.t_type t,myblog.t_user u    where b.type_id = t.id and u.id = b.user_id and b.type_id = #&#123;typeId&#125; order by b.update_time desc<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Type&gt; <span class="hljs-title">getAllTypeAndBlog</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">return</span> typeDao.getAllTypeAndBlog();&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">//分类页面查询</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;FirstPageBlog&gt; <span class="hljs-title">getByTypeId</span><span class="hljs-params">(Long typeId)</span> </span>&#123;    <span class="hljs-keyword">return</span> blogDao.getByTypeId(typeId);&#125;</code></pre><h3 id="Controller-3"><a href="#Controller-3" class="headerlink" title="Controller"></a>Controller</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<span class="hljs-keyword">import</span> com.star.entity.Type;<span class="hljs-keyword">import</span> com.star.queryvo.FirstPageBlog;<span class="hljs-keyword">import</span> com.star.service.BlogService;<span class="hljs-keyword">import</span> com.star.service.TypeService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 分类页面控制器</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: Created in 10:03 2020/6/24</span><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: ONESTAR</span><span class="hljs-comment"> * <span class="hljs-doctag">@QQ</span>群: 530311074</span><span class="hljs-comment"> * <span class="hljs-doctag">@URL</span>: https://onestar.newstar.net.cn/</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TypeShowController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> TypeService typeService;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BlogService blogService;    <span class="hljs-comment">//    分页查询分类</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/types/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">types</span><span class="hljs-params">(@RequestParam(defaultValue = <span class="hljs-string">"1"</span>,value = <span class="hljs-string">"pageNum"</span>)</span> Integer pageNum, @PathVariable Long id, Model model) </span>&#123;        List&lt;Type&gt; types = typeService.getAllTypeAndBlog();        <span class="hljs-comment">//id为-1表示从首页导航栏点击进入分类页面</span>        <span class="hljs-keyword">if</span> (id == -<span class="hljs-number">1</span>) &#123;            id = types.get(<span class="hljs-number">0</span>).getId();        &#125;        model.addAttribute(<span class="hljs-string">"types"</span>, types);        List&lt;FirstPageBlog&gt; blogs = blogService.getByTypeId(id);        PageHelper.startPage(pageNum, <span class="hljs-number">10000</span>);        PageInfo&lt;FirstPageBlog&gt; pageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;&gt;(blogs);        model.addAttribute(<span class="hljs-string">"pageInfo"</span>, pageInfo);        model.addAttribute(<span class="hljs-string">"activeTypeId"</span>, id);        <span class="hljs-keyword">return</span> <span class="hljs-string">"types"</span>;    &#125;&#125;</code></pre><h3 id="其他页面Controller层直接配置即可"><a href="#其他页面Controller层直接配置即可" class="headerlink" title="其他页面Controller层直接配置即可"></a>其他页面Controller层直接配置即可</h3><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.star.queryvo.BlogQuery;<span class="hljs-keyword">import</span> com.star.service.BlogService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 时间轴页面显示控制器</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArchiveShowController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BlogService blogService;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/archives"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">archive</span><span class="hljs-params">(Model model)</span></span>&#123;        List&lt;BlogQuery&gt; blogs = blogService.getAllBlog();        model.addAttribute(<span class="hljs-string">"blogs"</span>, blogs);        <span class="hljs-keyword">return</span> <span class="hljs-string">"archives"</span>;    &#125;&#125;</code></pre><h3 id="音乐盒"><a href="#音乐盒" class="headerlink" title="音乐盒"></a>音乐盒</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 音乐盒页面显示控制器</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MusicShowController</span> </span>&#123;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/music"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">about</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"music"</span>;    &#125;&#125;</code></pre><h4 id="友人帐"><a href="#友人帐" class="headerlink" title="友人帐"></a>友人帐</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.star.service.FriendLinkService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 友链显示控制器</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: Created in 21:12 2020/6/27</span><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: ONESTAR</span><span class="hljs-comment"> * <span class="hljs-doctag">@QQ</span>群: 530311074</span><span class="hljs-comment"> * <span class="hljs-doctag">@URL</span>: https://onestar.newstar.net.cn/</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FriendsShowController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> FriendLinkService friendLinkService;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/friends"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">friends</span><span class="hljs-params">(Model model)</span> </span>&#123;        model.addAttribute(<span class="hljs-string">"friendlinks"</span>,friendLinkService.listFriendLink());        <span class="hljs-keyword">return</span> <span class="hljs-string">"friends"</span>;    &#125;&#125;</code></pre><h3 id="照片墙"><a href="#照片墙" class="headerlink" title="照片墙"></a>照片墙</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.star.service.PictureService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PictureShowController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> PictureService pictureService;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/picture"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">pictures</span><span class="hljs-params">(Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"pictures"</span>,pictureService.listPicture());        <span class="hljs-keyword">return</span> <span class="hljs-string">"picture"</span>;    &#125;&#125;</code></pre><h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AboutShowController</span> </span>&#123;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/about"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">about</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"about"</span>;    &#125;&#125;</code></pre><h2 id="13-注册界面"><a href="#13-注册界面" class="headerlink" title="13. 注册界面"></a>13. 注册界面</h2><h3 id="功能分析：-3"><a href="#功能分析：-3" class="headerlink" title="功能分析："></a>功能分析：</h3><ul><li>需要有一个register页面来注册用户，而不是单纯的在本机数据库上添加用户</li><li>用户对应User类，存入数据库的密码应该是MD5加密以后的密码</li></ul><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><ul><li>我们需要将前台用户输入的密码传输给后端，后端拿到密码后运行MD5加密</li><li>然后将加密后的密码存入数据库，每次用户登陆时，将用户输入的密码加密，与数据库中的密码比较</li></ul><h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">* 返回插入是否成功 0/1</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> user  用户对线</span><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">insert</span><span class="hljs-params">(User user)</span></span>;</code></pre><h3 id="xml文件-5"><a href="#xml文件-5" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"insert"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.User"</span>&gt;</span>    insert into myblog.t_user(avatar, create_time, email, nickname, password, type, update_time, username)    values (#&#123;avatar&#125;,#&#123;createTime&#125;,#&#123;email&#125;,#&#123;nickname&#125;,#&#123;password&#125;,#&#123;type&#125;,#&#123;updateTime&#125;,#&#123;username&#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></code></pre><h3 id="业务层-1"><a href="#业务层-1" class="headerlink" title="业务层"></a>业务层</h3><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">insert</span><span class="hljs-params">(User user)</span></span>;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(User user)</span> </span>&#123;    user.setCreateTime(<span class="hljs-keyword">new</span> Date());    user.setUpdateTime(<span class="hljs-keyword">new</span> Date());    String realPassword = MD5Utils.code(user.getPassword());    user.setPassword(realPassword);    <span class="hljs-keyword">return</span> userDao.insert(user);&#125;</code></pre><h3 id="Controller-4"><a href="#Controller-4" class="headerlink" title="Controller"></a>Controller</h3><pre><code class="hljs java"><span class="hljs-comment">//跳转到注册界面</span><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/registerPage"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">registerPage</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/register"</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据user对象，注册用户</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user  user由前端传入部分，业务层设置时间</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/register"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">register</span><span class="hljs-params">(User user)</span></span>&#123;    <span class="hljs-keyword">int</span> r = userService.insert(user);    <span class="hljs-comment">//System.out.println(user.toString());</span>    <span class="hljs-keyword">if</span>(r == <span class="hljs-number">0</span>)&#123;       <span class="hljs-keyword">return</span> <span class="hljs-string">"error"</span>;    &#125;<span class="hljs-keyword">else</span>&#123;       <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin"</span>;    &#125;&#125;</code></pre><h3 id="前端代码：register-html"><a href="#前端代码：register-html" class="headerlink" title="前端代码：register.html"></a>前端代码：register.html</h3><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/layui/css/layui.css&#125;"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> /&gt;</span><span class="hljs-comment">&lt;!-- 你的HTML代码  th:action="@&#123;/admin/register&#125;" th:object="$&#123;user&#125;" method="post"--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>博客管理登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"../static/images/favicon.ico"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/images/me.jpg&#125;"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"icon"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"image/x-ico"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"../../static/css/me.css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/css/me.css&#125;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/layui/css/layui.css&#125;"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"m-container-small m-padded-tb-massive"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"max-width: 30em !important;"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ur container"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui middle aligned center aligned grid"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"column"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui teal image header"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"content"</span>&gt;</span>                        管理后台注册                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/admin/register"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> &gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-item"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-label"</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input-block"</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">required</span>  <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">"required"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"off"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input"</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-item"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-label"</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input-block"</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">required</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">"required"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入密码"</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"off"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input"</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-item"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-label"</span>&gt;</span>昵称<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input-block"</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"nickname"</span> <span class="hljs-attr">required</span>  <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">"required"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入用户名"</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"off"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input"</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-item"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-label"</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input-block"</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">required</span>  <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">"required"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入邮箱"</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"off"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input"</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-item"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-label"</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input-block"</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"avatar"</span> <span class="hljs-attr">required</span>  <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">"required"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入头像地址"</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"off"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input"</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-item"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-label"</span>&gt;</span>类型<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input-block"</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"type"</span> <span class="hljs-attr">required</span>  <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">"required"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入类型"</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"off"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input"</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-form-item"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-input-block"</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-btn"</span> <span class="hljs-attr">lay-submit</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">"formDemo"</span>&gt;</span>立即提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"layui-btn layui-btn-primary"</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/layui/layui.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-comment">//Demo</span></span><span class="actionscript">    layui.use(<span class="hljs-string">'form'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="actionscript">        <span class="hljs-keyword">var</span> form = layui.form;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(form);</span><span class="actionscript">        <span class="hljs-comment">//监听提交</span></span><span class="actionscript">        form.on(<span class="hljs-string">'submit(formDemo)'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(data)</span></span>&#123;</span><span class="javascript">            <span class="hljs-keyword">var</span> message =  <span class="hljs-built_in">JSON</span>.stringify(data.field);</span><span class="actionscript">            <span class="hljs-keyword">var</span> $;</span><span class="javascript">            $.ajax(&#123;</span><span class="actionscript">                url:<span class="hljs-string">"/admin/register"</span>,</span><span class="javascript">                <span class="hljs-keyword">async</span>: <span class="hljs-literal">false</span>,</span><span class="actionscript">                type:<span class="hljs-string">"POST"</span>,</span><span class="actionscript">                contentType: <span class="hljs-string">"application/json"</span>,</span>                data: message,<span class="actionscript">                <span class="hljs-comment">// success: function(data)&#123;</span></span><span class="actionscript">                <span class="hljs-comment">//     console.log(123);</span></span><span class="actionscript">                <span class="hljs-comment">// &#125;</span></span>            &#125;)<span class="actionscript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span>        &#125;);    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="14-邮箱注册"><a href="#14-邮箱注册" class="headerlink" title="14. 邮箱注册"></a>14. 邮箱注册</h2><h3 id="功能分析：-4"><a href="#功能分析：-4" class="headerlink" title="功能分析："></a>功能分析：</h3><ul><li>使用qq邮箱登陆，开启qq登陆的用户设置-账户-POP3服务-开启</li><li>得到一串字符串，放入application.yml中</li><li>引入相应的jar包，然后写出邮件传输的业务层代码</li><li>写出用户账户实体类，业务层，xml文件</li><li>实体类通过邮箱注册，status为0，代表未激活，status为1，代表已激活</li><li>用户需要通过点击链接激活</li><li>在LoginController中添加一层判断，取两个表中的并集作为账户</li></ul><h3 id="maven文件"><a href="#maven文件" class="headerlink" title="maven文件"></a>maven文件</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--邮件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="邮件发送业务层"><a href="#邮件发送业务层" class="headerlink" title="邮件发送业务层"></a>邮件发送业务层</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IMailService</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 发送文本邮件</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to    收件人</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject   主题</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content   内容</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sendSimpleMail</span><span class="hljs-params">(String to,String subject,String content)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 发送HTML邮件</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to    收件人</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject   主题</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content   内容</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sentHtmlMail</span><span class="hljs-params">(String to,String subject,String content)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 发送带附件的邮件</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to    收件人</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject   主题</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content   内容</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath  附件</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendAttachmentsMail</span><span class="hljs-params">(String to,String subject,String content,String filePath)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service.impl;<span class="hljs-keyword">import</span> com.star.service.IMailService;<span class="hljs-keyword">import</span> org.slf4j.Logger;<span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<span class="hljs-keyword">import</span> org.springframework.core.io.FileSystemResource;<span class="hljs-keyword">import</span> org.springframework.mail.SimpleMailMessage;<span class="hljs-keyword">import</span> org.springframework.mail.javamail.JavaMailSender;<span class="hljs-keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> javax.mail.MessagingException;<span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IMailServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IMailService</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="hljs-keyword">this</span>.getClass());    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> JavaMailSender mailSender;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置文件中我的qq邮箱</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;spring.mail.from&#125;"</span>)    <span class="hljs-keyword">private</span> String from;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 简单邮件</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to    收件人</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject   主题</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content   内容</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendSimpleMail</span><span class="hljs-params">(String to, String subject, String content)</span> </span>&#123;        <span class="hljs-comment">//SimpleMailMessage对象</span>        SimpleMailMessage message = <span class="hljs-keyword">new</span> SimpleMailMessage();        <span class="hljs-comment">//邮件发送人</span>        message.setFrom(from);        <span class="hljs-comment">//邮件接收人</span>        message.setTo(to);        <span class="hljs-comment">//邮件主题</span>        message.setSubject(subject);        <span class="hljs-comment">//邮件内容</span>        message.setText(content);        <span class="hljs-comment">//发送邮件</span>        mailSender.send(message);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * HTML邮件</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to    收件人</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject   主题</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content   内容</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sentHtmlMail</span><span class="hljs-params">(String to, String subject, String content)</span> </span>&#123;        MimeMessage message = mailSender.createMimeMessage();        MimeMessageHelper messageHelper;        <span class="hljs-keyword">try</span>&#123;            messageHelper = <span class="hljs-keyword">new</span> MimeMessageHelper(message,<span class="hljs-keyword">true</span>);            <span class="hljs-comment">//邮件发送人</span>            messageHelper.setFrom(from);            <span class="hljs-comment">//邮件接收人</span>            messageHelper.setTo(to);            <span class="hljs-comment">//邮件主题</span>            message.setSubject(subject);            <span class="hljs-comment">//邮件内容，html格式</span>            messageHelper.setText(content, <span class="hljs-keyword">true</span>);            <span class="hljs-comment">//发送</span>            mailSender.send(message);            <span class="hljs-comment">//日志信息</span>            logger.info(<span class="hljs-string">"邮件已经发送。"</span>);        &#125; <span class="hljs-keyword">catch</span> (MessagingException e) &#123;            logger.error(<span class="hljs-string">"发送邮件时发生异常！"</span>, e);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 带附件的邮件</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> to    收件人</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject   主题</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content   内容</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath  附件</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendAttachmentsMail</span><span class="hljs-params">(String to, String subject, String content, String filePath)</span> </span>&#123;        MimeMessage message = mailSender.createMimeMessage();        <span class="hljs-keyword">try</span> &#123;            MimeMessageHelper helper = <span class="hljs-keyword">new</span> MimeMessageHelper(message, <span class="hljs-keyword">true</span>);            helper.setFrom(from);            helper.setTo(to);            helper.setSubject(subject);            helper.setText(content, <span class="hljs-keyword">true</span>);            FileSystemResource file = <span class="hljs-keyword">new</span> FileSystemResource(<span class="hljs-keyword">new</span> File(filePath));            String fileName = filePath.substring(filePath.lastIndexOf(File.separator));            helper.addAttachment(fileName, file);            mailSender.send(message);            <span class="hljs-comment">//日志信息</span>            logger.info(<span class="hljs-string">"邮件已经发送。"</span>);        &#125; <span class="hljs-keyword">catch</span> (MessagingException e) &#123;            logger.error(<span class="hljs-string">"发送邮件时发生异常！"</span>, e);        &#125;    &#125;&#125;</code></pre><h3 id="用户实体类"><a href="#用户实体类" class="headerlink" title="用户实体类"></a>用户实体类</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.entity;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMail</span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String useremail;    <span class="hljs-keyword">private</span> Integer status;    <span class="hljs-keyword">private</span> String code;    <span class="hljs-keyword">private</span> String avatar;&#125;</code></pre><h3 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.dao;<span class="hljs-keyword">import</span> com.star.entity.UserMail;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<span class="hljs-meta">@Mapper</span><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMailDao</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(UserMail userMail)</span></span>;    <span class="hljs-function">UserMail <span class="hljs-title">checkCode</span><span class="hljs-params">(String code)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUserStatus</span><span class="hljs-params">(UserMail userMail)</span></span>;    <span class="hljs-function">UserMail <span class="hljs-title">loginUserMail</span><span class="hljs-params">(UserMail userMail)</span></span>;&#125;</code></pre><h3 id="业务层-2"><a href="#业务层-2" class="headerlink" title="业务层"></a>业务层</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service;<span class="hljs-keyword">import</span> com.star.entity.UserMail;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMailService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(UserMail userMail)</span></span>;    <span class="hljs-function">UserMail <span class="hljs-title">checkCode</span><span class="hljs-params">(String code)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUserStatus</span><span class="hljs-params">(UserMail userMail)</span></span>;    <span class="hljs-function">UserMail <span class="hljs-title">loginUserMail</span><span class="hljs-params">(UserMail userMail)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service.impl;<span class="hljs-keyword">import</span> com.star.dao.UserMailDao;<span class="hljs-keyword">import</span> com.star.entity.UserMail;<span class="hljs-keyword">import</span> com.star.service.IMailService;<span class="hljs-keyword">import</span> com.star.service.UserMailService;<span class="hljs-keyword">import</span> com.star.util.MD5Utils;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMailServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMailService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMailDao userMailDao;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> IMailService iMailService;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 用户注册，同时发送一封激活邮件</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userMail</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(UserMail userMail)</span> </span>&#123;        userMailDao.register(userMail);        <span class="hljs-comment">//获取激活码</span>        String code = userMail.getCode();        System.out.println(<span class="hljs-string">"code: "</span>+code);        <span class="hljs-comment">//主题</span>        String subject = <span class="hljs-string">"来自博客的激活邮件"</span>;        <span class="hljs-comment">//正文</span>        String context = <span class="hljs-string">"&lt;a href=\"/mail/checkCode?code="</span>+code+<span class="hljs-string">"\"&gt;激活请点击:"</span>+code+<span class="hljs-string">"&lt;/a&gt;"</span>;        <span class="hljs-comment">//发送</span>        iMailService.sentHtmlMail(userMail.getUseremail(),subject,context);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据激活码code进行查询用户，之后修改状态</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserMail <span class="hljs-title">checkCode</span><span class="hljs-params">(String code)</span> </span>&#123;        <span class="hljs-keyword">return</span> userMailDao.checkCode(code);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 激活账户，修改状态</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userMail</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUserStatus</span><span class="hljs-params">(UserMail userMail)</span> </span>&#123;        userMailDao.updateUserStatus(userMail);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 登陆</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userMail</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserMail <span class="hljs-title">loginUserMail</span><span class="hljs-params">(UserMail userMail)</span> </span>&#123;        UserMail userMail1 = userMailDao.loginUserMail(userMail);        <span class="hljs-keyword">if</span>(userMail1 != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> userMail1;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><h3 id="xml文件-6"><a href="#xml文件-6" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.star.dao.UserMailDao"</span> &gt;</span>    <span class="hljs-comment">&lt;!--注册用户--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"register"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.UserMail"</span> &gt;</span>    insert into myblog.t_usermail ( username, password,useremail,status,code)    values (#&#123;username,jdbcType=VARCHAR&#125;, #&#123;password,jdbcType=VARCHAR&#125;, #&#123;useremail,jdbcType=VARCHAR&#125;,      #&#123;status,jdbcType=INTEGER&#125;,#&#123;code,jdbcType=VARCHAR&#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-comment">&lt;!--根据激活码code查询用户--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"checkCode"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"String"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.UserMail"</span>&gt;</span>    select * from myblog.t_usermail where code = #&#123;code&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!--激活账户，修改用户状态--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateUserStatus"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.star.entity.UserMail"</span>&gt;</span>    update myblog.t_usermail set status=1,code=null where id=#&#123;id&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-comment">&lt;!--登录,根据 status=1 进行查询--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loginUserMail"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.star.entity.UserMail"</span> &gt;</span>    select * from myblog.t_usermail where username=#&#123;username&#125; and password=#&#123;password&#125; and status=1  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h3 id="LoginController文件修改"><a href="#LoginController文件修改" class="headerlink" title="LoginController文件修改"></a>LoginController文件修改</h3><p><strong>需要在以前判断 <code>t_user</code>表的基础上，再判断 <code>t_usermail</code>，取两个表符合条件的并集</strong></p><p>添加以下代码</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 登录校验</span><span class="hljs-comment"> * <span class="hljs-doctag">@Param</span>: username:用户名</span><span class="hljs-comment"> * <span class="hljs-doctag">@Param</span>: password:密码</span><span class="hljs-comment"> * <span class="hljs-doctag">@Param</span>: session:session域</span><span class="hljs-comment"> * <span class="hljs-doctag">@Param</span>: attributes:返回页面消息</span><span class="hljs-comment"> * <span class="hljs-doctag">@Return</span>: 登录成功跳转登录成功页面，登录失败返回登录页面</span><span class="hljs-comment"> */</span><span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/login"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(@RequestParam String username,</span></span><span class="hljs-function"><span class="hljs-params">                    @RequestParam String password,</span></span><span class="hljs-function"><span class="hljs-params">                    HttpSession session,</span></span><span class="hljs-function"><span class="hljs-params">                    RedirectAttributes attributes)</span></span>&#123;    <span class="hljs-comment">//System.out.println("------------username"+username);</span>    <span class="hljs-comment">//System.out.println("------------password"+password);</span>    User user = userService.checkUser(username,password);    UserMail userMail = userService.checkUserMail(username,password);    UserMail RealUserMail = userMailService.loginUserMail(userMail);    <span class="hljs-keyword">if</span>(user!=<span class="hljs-keyword">null</span>)&#123;        session.setAttribute(<span class="hljs-string">"user"</span>,user);        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/index"</span>;    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(RealUserMail!=<span class="hljs-keyword">null</span>)&#123;        session.setAttribute(<span class="hljs-string">"user"</span>,<span class="hljs-keyword">new</span> User());        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/index"</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        attributes.addFlashAttribute(<span class="hljs-string">"message"</span>,<span class="hljs-string">"用户名或密码错误"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin"</span>;    &#125;</code></pre><h3 id="邮箱用户登陆Controller"><a href="#邮箱用户登陆Controller" class="headerlink" title="邮箱用户登陆Controller"></a>邮箱用户登陆Controller</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.controller;<span class="hljs-keyword">import</span> com.star.entity.UserMail;<span class="hljs-keyword">import</span> com.star.service.UserMailService;<span class="hljs-keyword">import</span> com.star.util.MD5Utils;<span class="hljs-keyword">import</span> com.star.util.UUIDUtils;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/mail"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMailController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMailService userMailService;    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/returnIndex"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"test/index"</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 注册</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/registerUserMail"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">registerMail</span><span class="hljs-params">(UserMail userMail)</span></span>&#123;        String password = userMail.getPassword();        String RealPassword = MD5Utils.code(password);        userMail.setPassword(RealPassword);        userMail.setStatus(<span class="hljs-number">0</span>);        String code = UUIDUtils.getUUID() + UUIDUtils.getUUID();        userMail.setCode(code);        userMailService.register(userMail);        <span class="hljs-keyword">return</span> <span class="hljs-string">"test/success"</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 检验邮箱中的code激活账户</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/checkCode"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">checkCode</span><span class="hljs-params">(String code)</span></span>&#123;        UserMail userMail = userMailService.checkCode(code);        <span class="hljs-comment">//System.out.println(userMail);</span>        <span class="hljs-keyword">if</span>(userMail != <span class="hljs-keyword">null</span>)&#123;            userMail.setStatus(<span class="hljs-number">1</span>);            userMail.setCode(<span class="hljs-string">""</span>);            userMailService.updateUserStatus(userMail);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/login"</span>;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 跳转到登陆页面</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/loginPage"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">MailLoginPage</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/login"</span>;    &#125;&#125;</code></pre><h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><ul><li><p>index.html</p></li><li><pre><code class="html"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@{/layui/css/layui.css}"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span>    <span class="comment">&lt;!-- 你的HTML代码  th:action="@{/admin/register}" th:object="${user}" method="post"--&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>博客管理邮箱注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../static/images/favicon.ico"</span> <span class="attr">th:href</span>=<span class="string">"@{/images/me.jpg}"</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/x-ico"</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css"</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../../static/css/me.css"</span> <span class="attr">th:href</span>=<span class="string">"@{/css/me.css}"</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@{/layui/css/layui.css}"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="comment">&lt;!--&lt;form action="/mail/registerUserMail" method="post"&gt;--&gt;</span><span class="comment">&lt;!--    用户名：&lt;input type="text" id="username" name="username"/&gt;&lt;br&gt;--&gt;</span><span class="comment">&lt;!--    密码：&lt;input type="password" id="password" name="password"/&gt;&lt;br&gt;--&gt;</span><span class="comment">&lt;!--    邮箱：&lt;input type="email" id="email" name="useremail"&gt;&lt;br&gt;--&gt;</span><span class="comment">&lt;!--    &lt;input type="submit" value="注册"&gt;--&gt;</span><span class="comment">&lt;!--&lt;/form&gt;--&gt;</span><span class="comment">&lt;!--&lt;a href="/templates/test/login.html"&gt;登录&lt;/a&gt;--&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-container-small m-padded-tb-massive"</span> <span class="attr">style</span>=<span class="string">"max-width: 30em !important;"</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ur container"</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui middle aligned center aligned grid"</span>&gt;</span>            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ui teal image header"</span>&gt;</span>                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>                        管理后台邮箱注册                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span>                <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"layui-form"</span> <span class="attr">action</span>=<span class="string">"/mail/registerUserMail"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span>                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span>                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span>                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-block"</span>&gt;</span>                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span>  <span class="attr">lay-verify</span>=<span class="string">"required"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span>&gt;</span>                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span>                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span>                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-block"</span>&gt;</span>                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span> <span class="attr">lay-verify</span>=<span class="string">"required"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span>&gt;</span>                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span>                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span>                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-block"</span>&gt;</span>                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"useremail"</span> <span class="attr">required</span>  <span class="attr">lay-verify</span>=<span class="string">"required"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span>&gt;</span>                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span>                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-block"</span>&gt;</span>                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"layui-btn"</span> <span class="attr">lay-submit</span> <span class="attr">lay-filter</span>=<span class="string">"formDemo"</span>&gt;</span>立即提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span>                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">class</span>=<span class="string">"layui-btn layui-btn-primary"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span>                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre></li></ul><pre><code>            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre>    <script src="https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js"></script>  <script src="https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js"></script>  <script th:src="@{/layui/layui.js}"></script>  <script>      //Demo      layui.use('form', function(){          var form = layui.form;          console.log(form);          //监听提交          form.on('submit(formDemo)', function(data){              var message =  JSON.stringify(data.field);              var $;              $.ajax({                  url:"/mail/registerUserMail",                  async: false,                  type:"POST",                  contentType: "application/json",                  data: message,                  // success: function(data){                  //     console.log(123);                  // }              })              return false;          });      });  </script>      <pre><code class="hljs xml">```html<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>注册成功，请激活账户<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"../static/images/favicon.ico"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/images/me.jpg&#125;"</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"icon"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"image/x-ico"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"../static/css/me.css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/css/me.css&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"m-container-small m-padded-tb-massive"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui error message m-padded-tb-huge"</span> &gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui contianer"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>已经发送邮件到您的邮箱，请点击邮件中的链接进行激活<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"m-margin-top-max"</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/&#125;"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui teal button m-mobile-wide"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"home icon"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>返回首页<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-comment">&lt;!--底部栏--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"waypoint"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui inverted vertical segment m-padded-tb-massive m-opacity"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui center aligned container"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui inverted divided stackable grid"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"three wide column"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui inverted link list"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"../static/images/oneStarWechat.jpg"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/images/oneStarWechat.jpg&#125;"</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">"ui rounded image"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">""</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 110px"</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"four wide column"</span> &gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui inverted header m-text-thin m-text-spaced "</span> &gt;</span>最新博客<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"newblog-container"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui inverted link list"</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">"newblogList"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/blog/&#123;id&#125;(id=$&#123;blog.id&#125;)&#125;"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item m-text-thin"</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">"blog : $&#123;newblogs&#125;"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;blog.title&#125;"</span>&gt;</span>最新博文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"four wide column"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui inverted header m-text-thin m-text-spaced "</span>&gt;</span>联系我<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ui inverted link list"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item m-text-thin"</span>&gt;</span>Email：7142220@qq.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item m-text-thin"</span>&gt;</span>QQ：7142220<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"five wide column"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"inverted header m-text-thin m-text-spaced"</span>&gt;</span>我的客栈已经营<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"htmer_time"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item m-text-thin"</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    $(<span class="hljs-string">'#newblog-container'</span>).load(<span class="hljs-comment">/*[[@&#123;/footer/newblog&#125;]]*/</span><span class="hljs-string">"/footer/newblog"</span>);</span><span class="actionscript">    <span class="hljs-comment">// 运行时间统计</span></span><span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">secondToDate</span><span class="hljs-params">(second)</span> </span>&#123;</span>        if (!second) &#123;<span class="actionscript">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span>        &#125;<span class="javascript">        <span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span>        if (second &gt;= 365 * 24 * 3600) &#123;<span class="javascript">            time[<span class="hljs-number">0</span>] = <span class="hljs-built_in">parseInt</span>(second / (<span class="hljs-number">365</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>));</span>            second %= 365 * 24 * 3600;        &#125;        if (second &gt;= 24 * 3600) &#123;<span class="javascript">            time[<span class="hljs-number">1</span>] = <span class="hljs-built_in">parseInt</span>(second / (<span class="hljs-number">24</span> * <span class="hljs-number">3600</span>));</span>            second %= 24 * 3600;        &#125;        if (second &gt;= 3600) &#123;<span class="javascript">            time[<span class="hljs-number">2</span>] = <span class="hljs-built_in">parseInt</span>(second / <span class="hljs-number">3600</span>);</span>            second %= 3600;        &#125;        if (second &gt;= 60) &#123;<span class="javascript">            time[<span class="hljs-number">3</span>] = <span class="hljs-built_in">parseInt</span>(second / <span class="hljs-number">60</span>);</span>            second %= 60;        &#125;        if (second &gt; 0) &#123;            time[4] = second;        &#125;<span class="actionscript">        <span class="hljs-keyword">return</span> time;</span>    &#125;<span class="actionscript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTime</span><span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">        <span class="hljs-comment">/*此处为网站的创建时间*/</span></span><span class="javascript">        <span class="hljs-keyword">var</span> create_time = <span class="hljs-built_in">Math</span>.round(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-built_in">Date</span>.UTC(<span class="hljs-number">2020</span>, <span class="hljs-number">01</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>, <span class="hljs-number">15</span>)).getTime() / <span class="hljs-number">1000</span>);</span><span class="javascript">        <span class="hljs-keyword">var</span> timestamp = <span class="hljs-built_in">Math</span>.round((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() + <span class="hljs-number">8</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>) / <span class="hljs-number">1000</span>);</span>        currentTime = secondToDate((timestamp - create_time));<span class="actionscript">        currentTimeHtml = currentTime[<span class="hljs-number">0</span>] + <span class="hljs-string">'年'</span> + currentTime[<span class="hljs-number">1</span>] + <span class="hljs-string">'天'</span></span><span class="actionscript">            + currentTime[<span class="hljs-number">2</span>] + <span class="hljs-string">'时'</span> + currentTime[<span class="hljs-number">3</span>] + <span class="hljs-string">'分'</span> + currentTime[<span class="hljs-number">4</span>]</span><span class="actionscript">            + <span class="hljs-string">'秒'</span>;</span><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"htmer_time"</span>).innerHTML = currentTimeHtml;</span>    &#125;    setInterval(setTime, 1000);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><ul><li>上面是welcome.html</li></ul><h2 id="15-手机验证码登陆"><a href="#15-手机验证码登陆" class="headerlink" title="15. 手机验证码登陆"></a>15. 手机验证码登陆</h2><h3 id="功能分析：-5"><a href="#功能分析：-5" class="headerlink" title="功能分析："></a>功能分析：</h3><ul><li>使用手机验证码登陆，直接跳转到管理界面，但是不存储到数据库，只能维持这一次的登陆</li><li>考虑到验证码的过期，可以使用redis来存储 <code>手机号码-验证码</code>的键值对</li><li>使用阿里云的功能来开通短信的收发</li></ul><h3 id="功能技术栈："><a href="#功能技术栈：" class="headerlink" title="功能技术栈："></a>功能技术栈：</h3><ul><li>Redis</li><li>阿里云</li></ul><h3 id="首先测试短信的正常收发，使用PostMan"><a href="#首先测试短信的正常收发，使用PostMan" class="headerlink" title="首先测试短信的正常收发，使用PostMan"></a>首先测试短信的正常收发，使用PostMan</h3><ul><li>短信收发，根据阿里云官方API改编</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.util;<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<span class="hljs-keyword">import</span> com.aliyuncs.CommonRequest;<span class="hljs-keyword">import</span> com.aliyuncs.CommonResponse;<span class="hljs-keyword">import</span> com.aliyuncs.DefaultAcsClient;<span class="hljs-keyword">import</span> com.aliyuncs.IAcsClient;<span class="hljs-keyword">import</span> com.aliyuncs.exceptions.ClientException;<span class="hljs-keyword">import</span> com.aliyuncs.exceptions.ServerException;<span class="hljs-keyword">import</span> com.aliyuncs.http.MethodType;<span class="hljs-keyword">import</span> com.aliyuncs.profile.DefaultProfile;<span class="hljs-keyword">import</span> com.star.service.RedisService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-keyword">import</span> java.util.Random;<span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SendNoteUtil</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> RedisService redisService;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;redis.key.prefix.authCode&#125;"</span>)    <span class="hljs-keyword">private</span> String REDIS_KEY_PREFIX_AUTH_CODE;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;redis.key.expire.authCode&#125;"</span>)    <span class="hljs-keyword">private</span> Long AUTH_CODE_EXPIRE_SECONDS;    <span class="hljs-comment">//验证平台信息 开发者无需任何更改</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String dysmsapi = <span class="hljs-string">"dysmsapi.aliyuncs.com"</span>;    DefaultProfile profile = DefaultProfile.getProfile(<span class="hljs-string">"cn-hangzhou"</span>, <span class="hljs-string">"*******************"</span>, <span class="hljs-string">"**************************"</span>);    IAcsClient client = <span class="hljs-keyword">new</span> DefaultAcsClient(profile);    <span class="hljs-comment">//这一步的两个参数,一个是要发送验证码的手机号 一个是模板Code用来区分登录注册</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sendNoteMessgae</span><span class="hljs-params">(String PhoneNumbers)</span></span>&#123;        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();        Random random = <span class="hljs-keyword">new</span> Random();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)&#123;            <span class="hljs-keyword">int</span> x = random.nextInt(<span class="hljs-number">10</span>);            <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)&#123;                i--;                <span class="hljs-keyword">continue</span>;            &#125;            sb.append(x);        &#125;        CommonRequest request = <span class="hljs-keyword">new</span> CommonRequest();        <span class="hljs-comment">//request.setSysProtocol(ProtocolType.HTTPS);</span>        request.setSysMethod(MethodType.POST);        request.putQueryParameter(<span class="hljs-string">"RegionId"</span>, <span class="hljs-string">"cn-hangzhou"</span>);        request.setSysDomain(dysmsapi);        request.setSysVersion(<span class="hljs-string">"2017-05-25"</span>);        request.setSysAction(<span class="hljs-string">"SendSms"</span>);        request.putQueryParameter(<span class="hljs-string">"PhoneNumbers"</span>, PhoneNumbers);<span class="hljs-comment">//接受验证码的手机号</span>        request.putQueryParameter(<span class="hljs-string">"SignName"</span>, <span class="hljs-string">"Halo博客"</span>);<span class="hljs-comment">//签名</span>        <span class="hljs-comment">//模板代码,我暂时用的参数,你可以直接写成模板码,模板码参考第八步</span>        request.putQueryParameter(<span class="hljs-string">"TemplateCode"</span>, <span class="hljs-string">"SMS_205811339"</span>);        <span class="hljs-comment">//用户定义的验证码内容</span>        request.putQueryParameter(<span class="hljs-string">"TemplateParam"</span>,<span class="hljs-string">"&#123;code:"</span>+sb.toString()+<span class="hljs-string">"&#125;"</span>);        <span class="hljs-comment">//验证码绑定手机号并存储到redis</span>        redisService.set(REDIS_KEY_PREFIX_AUTH_CODE + PhoneNumbers, sb.toString());        redisService.expire(REDIS_KEY_PREFIX_AUTH_CODE + PhoneNumbers,AUTH_CODE_EXPIRE_SECONDS);        <span class="hljs-keyword">try</span> &#123;            CommonResponse response = client.getCommonResponse(request);            String returnStr = response.getData();            System.out.println(returnStr);            JSONObject jsonObject = JSONObject.parseObject(returnStr);            <span class="hljs-comment">//返回的信息</span>            <span class="hljs-keyword">return</span> jsonObject.getString(<span class="hljs-string">"Message"</span>);        &#125; <span class="hljs-keyword">catch</span> (ServerException e) &#123;            <span class="hljs-keyword">return</span> e.getErrMsg();        &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;            <span class="hljs-keyword">return</span> e.getErrMsg();        &#125;    &#125;;&#125;</code></pre><h3 id="Redis和Mail的yml配置文件"><a href="#Redis和Mail的yml配置文件" class="headerlink" title="Redis和Mail的yml配置文件"></a>Redis和Mail的yml配置文件</h3><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">thymeleaf:</span>    <span class="hljs-attr">mode:</span> <span class="hljs-string">HTML</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">pro</span>  <span class="hljs-attr">messages:</span>    <span class="hljs-attr">basename:</span> <span class="hljs-string">i18n/messages</span>  <span class="hljs-attr">redis:</span>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>    <span class="hljs-attr">password:</span>    <span class="hljs-attr">jedis:</span>      <span class="hljs-attr">pool:</span>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1ms</span>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span>    <span class="hljs-attr">timeout:</span> <span class="hljs-string">3000ms</span>  <span class="hljs-attr">mail:</span>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.qq.com</span> <span class="hljs-comment">#发送邮件服务器</span>    <span class="hljs-attr">username:</span> <span class="hljs-number">7142220</span><span class="hljs-string">@qq.com</span> <span class="hljs-comment">#发送邮件的邮箱地址</span>    <span class="hljs-attr">password:</span>  <span class="hljs-string">atnrxkbmzzmnbijg</span> <span class="hljs-comment">#客户端授权码，不是邮箱密码，这个在qq邮箱设置里面自动生成的</span>    <span class="hljs-attr">properties.mail.smtp.port:</span> <span class="hljs-number">465</span> <span class="hljs-comment">#端口号465或587</span>    <span class="hljs-attr">from:</span> <span class="hljs-number">7142220</span><span class="hljs-string">@qq.com</span> <span class="hljs-comment"># 发送邮件的地址，和上面username一致</span>    <span class="hljs-attr">properties.mail.smtp.starttls.enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">properties.mail.smtp.starttls.required:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">properties.mail.smtp.ssl.enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">default-encoding:</span> <span class="hljs-string">utf-8</span><span class="hljs-attr">comment.avatar:</span> <span class="hljs-string">/images/avatar.png</span><span class="hljs-attr">message.avatar:</span> <span class="hljs-string">/images/avatar.png</span><span class="hljs-comment">#自定义redis key</span><span class="hljs-attr">redis:</span>  <span class="hljs-attr">key:</span>    <span class="hljs-attr">prefix:</span>      <span class="hljs-attr">authCode:</span> <span class="hljs-string">protal:authCode</span>    <span class="hljs-attr">expire:</span>      <span class="hljs-attr">authCode:</span> <span class="hljs-number">300</span></code></pre><h3 id="Redis业务层，工具类集成"><a href="#Redis业务层，工具类集成" class="headerlink" title="Redis业务层，工具类集成"></a>Redis业务层，工具类集成</h3><p><strong>整合RedisTemplate</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RedisService</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 存储数据</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, String value)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取数据</span><span class="hljs-comment">     */</span>    <span class="hljs-function">String <span class="hljs-title">get</span><span class="hljs-params">(String key)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 设置超期时间</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">expire</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> expire)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除数据</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(String key)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 自增操作</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 自增步长</span><span class="hljs-comment">     */</span>    <span class="hljs-function">Long <span class="hljs-title">increment</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.star.service.impl;<span class="hljs-keyword">import</span> com.star.service.RedisService;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RedisService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, String value)</span> </span>&#123;        stringRedisTemplate.opsForValue().set(key,value);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;        <span class="hljs-keyword">return</span> stringRedisTemplate.opsForValue().get(key);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">expire</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> expire)</span> </span>&#123;        <span class="hljs-keyword">return</span> stringRedisTemplate.expire(key,expire, TimeUnit.SECONDS);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(String key)</span> </span>&#123;        stringRedisTemplate.delete(key);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">increment</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span> </span>&#123;        <span class="hljs-keyword">return</span> stringRedisTemplate.opsForValue().increment(key,delta);    &#125;&#125;</code></pre><h3 id="在LoginController中添加代码"><a href="#在LoginController中添加代码" class="headerlink" title="在LoginController中添加代码"></a>在LoginController中添加代码</h3><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> SendNoteUtil sendNoteUtil;<span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> RedisService redisService;<span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;redis.key.prefix.authCode&#125;"</span>)<span class="hljs-keyword">private</span> String REDIS_KEY_PREFIX_AUTH_CODE;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 跳转界面</span><span class="hljs-comment"> */</span><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/api/note"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">loginPage1</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"redis/login"</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取验证码</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> phone</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/api/note/sendNote/&#123;phone&#125;"</span>,method = RequestMethod.GET)<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendNote</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"phone"</span>)</span> String phone, HttpServletResponse response)</span>&#123;    System.out.println(phone);    <span class="hljs-keyword">try</span> &#123;        response.getWriter().write(sendNoteUtil.sendNoteMessgae(phone));    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;        e.printStackTrace();    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> phone</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> authCode</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/api/note/login/&#123;phone&#125;/&#123;authCode&#125;"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"phone"</span>)</span> String phone, @<span class="hljs-title">PathVariable</span><span class="hljs-params">(<span class="hljs-string">"authCode"</span>)</span> String authCode)</span>&#123;    System.out.println(<span class="hljs-string">"phonenumber--------------"</span>+phone);    MyX.phone1 = phone;    MyX.authCode1 = authCode;    <span class="hljs-comment">//验证验证码</span>    <span class="hljs-keyword">if</span>(!verifyAuthCode(authCode,phone))&#123;        <span class="hljs-comment">//System.out.println("1222222222222222");</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"redirect:/admin"</span>;    &#125;    <span class="hljs-comment">//System.out.println("123465789");</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">"admin/index"</span>;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 对输入的验证码进行校验</span><span class="hljs-comment"> * 和Redis中的键值对进行比对即可</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> authCode</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> telephone</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verifyAuthCode</span><span class="hljs-params">(String authCode, String telephone)</span></span>&#123;    <span class="hljs-keyword">if</span>(StringUtils.isEmpty(authCode))&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    String realAuthCode = redisService.get(REDIS_KEY_PREFIX_AUTH_CODE + telephone);    <span class="hljs-comment">//System.out.println("real-------------"+realAuthCode);</span>    <span class="hljs-keyword">return</span> authCode.equals(realAuthCode);&#125;</code></pre><ul><li>可以在后端进行测试正常的短信发送，登陆服务，这里给出的是集成前端的完整代码 </li></ul><h3 id="前端集成"><a href="#前端集成" class="headerlink" title="前端集成"></a>前端集成</h3><ul><li><p>前端这里遇到了很多坑，首先，ajax异步请求在传递前端参数的时候，后端Controller层代码可以正常运行，但是无法跳转到指定的界面</p></li><li><p>前端后端全都不报错，原因是因为ajax只是局部刷新，所以不能在后台接口进行页面的跳转</p></li><li><p>所以我们只能在前端进行跳转  <code>window.location.href=&quot;http://localhost:8080/admin/blogs&quot;;</code></p></li><li><p>但是在本项目中，有拦截权限验证，我们无法通过前端直接跳转到管理界面，会显示没有权限</p></li><li><p>那么我们该如何做？在这里博主给出一种方法</p><ul><li><p>定义一个全局类Myx，这里有公共变量供所有类使用</p></li><li><p>在后端接收到前端的参数，在redis中完成验证，发现参数都对应正确后，直接把对应的值赋给Myx中的变量</p></li><li><p>对拦截器类中判断的条件做出更改，本来判断条件为用户为空，现在改成用户为空并且两个参数都为空(如果不为空说明通过了Redis的验证)</p></li><li><pre><code class="java"><span class="keyword">package</span> com.star.util;<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyX</span> </span>{    <span class="keyword">public</span> <span class="keyword">static</span> String phone1;    <span class="keyword">public</span> <span class="keyword">static</span> String authCode1;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPhone1</span><span class="params">()</span> </span>{        <span class="keyword">return</span> phone1;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPhone1</span><span class="params">(String phone1)</span> </span>{        MyX.phone1 = phone1;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAuthCode1</span><span class="params">()</span> </span>{        <span class="keyword">return</span> authCode1;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAuthCode1</span><span class="params">(String authCode1)</span> </span>{        MyX.authCode1 = authCode1;    }}&lt;!--￼<span class="number">93</span>--&gt;</code></pre></li><li><p>这样就跳转到了后端管理</p></li></ul></li><li><p>前端代码：</p></li><li><pre><code class="html"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>手机号登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"../static/images/favicon.ico"</span> <span class="attr">th:href</span>=<span class="string">"@{/images/me.jpg}"</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/x-ico"</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.css"</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../../static/css/me.css"</span> <span class="attr">th:href</span>=<span class="string">"@{/css/me.css}"</span>&gt;</span>    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@{/layui/css/layui.css}"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-container-small m-padded-tb-massive"</span> <span class="attr">style</span>=<span class="string">"max-width: 30em !important;"</span>&gt;</span>    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ur container"</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui middle aligned center aligned grid"</span>&gt;</span>            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ui teal image header"</span>&gt;</span>                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>                        管理后台手机验证码登录                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span>                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"phone"</span> <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span>&gt;</span>                <span class="tag">&lt;<span class="name">br</span>&gt;</span>                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"authCode"</span> <span class="attr">id</span>=<span class="string">"authCode"</span><span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span>&gt;</span>                <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取验证码"</span> <span class="attr">name</span>=<span class="string">"yzm"</span> <span class="attr">class</span>=<span class="string">"layui-btn layui-btn-radius layui-btn-warm"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">id</span>=<span class="string">"yzm"</span>&gt;</span>                    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">name</span>=<span class="string">"nzm"</span> <span class="attr">class</span>=<span class="string">"layui-btn layui-btn-radius layui-btn-normal"</span> <span class="attr">id</span>=<span class="string">"nzm"</span>&gt;</span>            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/semantic-ui/2.2.4/semantic.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></code></pre></li></ul>  <script>      $(document).ready(function(){          var ordertime=20   //设置再次发送验证码等待时间          var timeleft=ordertime          var btn=$("#yzm")          var stn=$("#nzm")          var phone=$("#phone")          var authCode=$("#authCode")          var reg = /^1[0-9]{10}$/;  //电话号码的正则匹配式          phone.keyup(function(){              if (reg.test(phone.val())){                  btn.removeAttr("disabled")  //当号码符合规则后发送验证码按钮可点击              }              else{                  btn.attr("disabled",true)              }          })          //计时函数          function timeCount(){              timeleft-=1              if (timeleft>0){                  btn.val(timeleft+" 秒后重发");                  setTimeout(timeCount,1000)              }              else {                  btn.val("重新发送");                  timeleft=ordertime   //重置等待时间                  btn.removeAttr("disabled");              }          }          //事件处理函数          btn.on("click",function(){              $(this).attr("disabled",true); //防止多次点击              $.ajax({                  type: "GET", //用POST方式传输                  url: '/admin/api/note/sendNote/'+phone.val(), //目标地址                  error: function () { alert("验证码发送失败，请联系管理员")}, //请求错误时的处理函数                  success: function (){ alert("已发送验证码到您的手机")}, //请求成功时执行的函数              });              timeCount(this);          })          stn.on("click",function(){              $(this).attr("disabled",true); //防止多次点击              $.ajax({                  type: "GET", //用POST方式传输                  url: '/admin/api/note/login/'+phone.val()+'/'+authCode.val(), //目标地址                  error: function () { alert("登陆失败")                  }, //请求错误时的处理函数                  success: function (){ alert("登陆成功")                      //window.location.href="../../admin/index.html";                      window.location.href="http://localhost:8080/admin/blogs";                  }, //请求成功时执行的函数              });              timeCount(this);          })      })  </script>      ```<h2 id="16-服务器部署项目"><a href="#16-服务器部署项目" class="headerlink" title="16. 服务器部署项目"></a>16. 服务器部署项目</h2><ul><li>打开FinalShell连接云服务器</li><li>后台运行jar包  <code>nohup java -jar *****.jar &amp;</code></li><li>运行jar包所需要环境： <code>redis , mysql , Java 8</code></li><li>Nginx反向代理开启后便可访问域名</li><li><code>[Fhawke的博客](http://81.70.168.126:8080/)</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAP理论</title>
    <link href="/2020/12/27/CAP%E7%90%86%E8%AE%BA/"/>
    <url>/2020/12/27/CAP%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><h2 id="CAP原理介绍"><a href="#CAP原理介绍" class="headerlink" title="CAP原理介绍"></a>CAP原理介绍</h2><ul><li>C:Consistency <ul><li>一致性，即访问所有节点得到的数据都应该是一致的，这里的一致性是指<strong>强一致性</strong>(数据更新完，访问任何节点看到的数据完全一致)，这里和弱一致性和最终一致性有区别</li></ul></li><li>A:Availability<ul><li>可用性，所有的节点都保持高可用性，也就是说，任务没有发生故障的服务必须在有限的时间内返回合理的结果集</li></ul></li><li>P:Partiton tolerance<ul><li>分区容忍性，这里的分区指网络意义上的分区，如果出现节点之间无法通信的情况，要保证系统可以正常服务</li></ul></li></ul><p><strong>CAP理论</strong>,一个数据分布式系统不可能同时满足C,A,P三个条件，大多数开源的分布式系统都会实现P，也就是分区容忍性，之后在C和A之间做抉择。</p><p>CAP原理实际上是一个对分布式数据存储系统的一个定论，我们对于CAP的讨论的实际场景，更多的是针对那些有数据存储，数据复制场景，也就是所谓的NoSQL数据库</p><h2 id="CAP原理简单实例"><a href="#CAP原理简单实例" class="headerlink" title="CAP原理简单实例"></a>CAP原理简单实例</h2><ul><li><p>现在假设有两个节点,a1,a2</p></li><li><p>有一个数据number = 1,之后向a1提交更新，将数据number 设置为2</p></li><li><p>然后，a1把数据更新推送给a2，让a2也更新number</p></li></ul><h3 id="保证C和P"><a href="#保证C和P" class="headerlink" title="保证C和P"></a>保证C和P</h3><ul><li><p>保证数据一致性，a1将数据复制给a2，那么a1和a2需要进行通信，我们保证了P，也就是分区容忍性，这时a2不一定能及时收到a1的数据复制消息，当有请求向a2访问number数据时，为了保证数据的强一致性，a2只能阻塞，等待数据同步完成后返回，这时，<strong>无法保证高可用(A)</strong></p></li><li><p>所以，保证C和P时，<strong>无法保证A</strong></p><h3 id="保证A和P"><a href="#保证A和P" class="headerlink" title="保证A和P"></a>保证A和P</h3></li><li><p>为了保证高可用，a1和a2都必须在有限时间内返回，由于网络的不可靠，可能a2还没有收到a1发来的数据更新消息，就返回给客户端数据，这时候返回给客户端的可能是旧的数据，和a1不一致，因此违反了C，<strong>无法保证一致性(C)</strong></p></li><li><p>所以，保证A和P时，<strong>无法保证C</strong></p><h3 id="保证A和C"><a href="#保证A和C" class="headerlink" title="保证A和C"></a>保证A和C</h3></li><li><p>如果要保证一致性和高可用，那么网络状况必须良好，a1发送给a2的数据更新，a2必须马上能收到，但在实际情况下，网络通常是不可靠的，可能存在丢包等现象，所以如果要满足即时更新，必须将a1和a2放到一个区内才可以，这样就放弃了P，整个系统也不再是一个分布式系统了</p></li><li><p>所以，保证A和C，<strong>无法保证P</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>分布式学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CAP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx反向代理</title>
    <link href="/2020/12/14/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2020/12/14/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="nginx方向代理隐藏域名"><a href="#nginx方向代理隐藏域名" class="headerlink" title="nginx方向代理隐藏域名"></a>nginx方向代理隐藏域名</h1><p><code>vim /etc/nginx/conf.d/onestar.conf</code>,  创建 <code>onestar.conf</code> 文件，添加如下内容</p><pre><code class="hljs shell">upstream simc&#123;        server 81.70.168.126:8080;&#125;server &#123;    listen       80;//监听端口号，浏览器默认访问80端口    server_name  myblog.fhawke.ltd;//申请的二级域名    server_name_in_redirect off;    location / &#123;        proxy_pass  http://81.70.168.126:8080;        index  index.html index.htm;        proxy_set_header Host $host;        proxy_set_header X-Real-Ip $remote_addr;        proxy_set_header X-Forwarded-For $remote_addr;    &#125;&#125;</code></pre><p>添加 <code>upstream {server 81.70.168.126:8080}</code></p><p>可以隐藏端口号，在访问页面时无需访问端口号便可直接跳转</p>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title> Java基础</title>
    <link href="/2020/12/11/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/12/11/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>抽象类中可以构造方法</li><li>抽象类中可以存在普通属性，方法，静态属性和方法。</li><li>抽象类中可以存在抽象方法。</li><li><strong>如果一个类中有一个抽象方法，那么当前类一定是抽象类；抽象类中不一定有抽象方法。</strong></li><li>抽象类中的抽象方法，需要有子类实现，<strong>如果子类不实现，则子类也需要定义为抽象的。</strong></li><li><strong>抽象类不能被实例化，抽象类和抽象方法必须被abstract修饰</strong></li><li>抽象类中的抽象方法（其前有abstract修饰）不能用private、static、synchronized、native访问修饰符修饰。</li><li>抽象类方法默认访问权限都是default</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>在接口中只有方法的声明，没有方法体。</li><li><strong>在接口中只有常量，因为定义的变量，在编译的时候都会默认加上public static final</strong></li><li><strong>在接口中的方法，永远都被public来修饰</strong>.</li><li><strong>接口中没有构造方法，也不能实例化接口的对象</strong>。（所以接口不能继承类）</li><li>接口可以实现多继承</li><li><strong>接口中定义的方法都需要有实现类来实现，如果实现类不能实现接口中的所有方法则实现类定义为抽象类。</strong></li><li>接口可以继承接口，用extends</li><li>抽象类和方法都不能被实例化</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot组件学习</title>
    <link href="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringCloud学习"><a href="#SpringCloud学习" class="headerlink" title="SpringCloud学习"></a>SpringCloud学习</h2><h3 id="1-cloud-provider-payment8001"><a href="#1-cloud-provider-payment8001" class="headerlink" title="1. cloud-provider-payment8001"></a>1. cloud-provider-payment8001</h3><p>​    模块启动总结：</p><ol><li>建module</li><li>改POM</li><li>写YML</li><li>主启动</li><li>业务类</li></ol><h4 id="热部署Devtools"><a href="#热部署Devtools" class="headerlink" title="热部署Devtools"></a>热部署Devtools</h4><ol><li><p>加入xml语句到pom中</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></li><li><p>在父类总工程中加入插件到pom中</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">addResources</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addResources</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></li><li><p>开启自动编译的选项</p></li><li><p>更新值 ctrl + shift + alt + /</p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200916200151097.png" srcset="/img/loading.gif" alt="image-20200916200151097"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200916200315907.png" srcset="/img/loading.gif" alt="image-20200916200315907"></p></li><li><p>重启IDEA</p></li></ol><h3 id="2-cloud-consumer-order80"><a href="#2-cloud-consumer-order80" class="headerlink" title="2. cloud-consumer-order80"></a>2. cloud-consumer-order80</h3><p><strong>RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，由Spring提供的用于访问Rest服务的客户端模板工具集</strong></p><h4 id="RestTemplate配置类"><a href="#RestTemplate配置类" class="headerlink" title="RestTemplate配置类"></a><strong>RestTemplate配置类</strong></h4><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;&#125;</code></pre><h4 id="Controller业务代码，调用其他provider的dao和service层服务"><a href="#Controller业务代码，调用其他provider的dao和service层服务" class="headerlink" title="Controller业务代码，调用其他provider的dao和service层服务"></a>Controller业务代码，调用其他provider的dao和service层服务</h4><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PAYMENT_URL = <span class="hljs-string">"http://localhost:8001"</span>;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/consumer/payment/create"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">create</span><span class="hljs-params">(Payment payment)</span></span>&#123;        <span class="hljs-keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="hljs-string">"/payment/create"</span>,payment,CommonResult<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/consumer/payment/get/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">getPayment</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)</span>&#123;        <span class="hljs-keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="hljs-string">"payment/get/"</span>+id,CommonResult<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    &#125;&#125;</code></pre><h3 id="3-工程重构"><a href="#3-工程重构" class="headerlink" title="3. 工程重构"></a>3. 工程重构</h3><p><strong>将重复的代码提取出来</strong>，降低耦合</p><ul><li>观察问题：有重复部分，重构</li><li>新建工程</li><li>POM文件配置</li><li>将相同代码放入包中</li><li>maven命令clean,install</li><li>其他模块删除相同代码部分</li><li>其他模块改动POM文件</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="4-Eureka服务注册与发现"><a href="#4-Eureka服务注册与发现" class="headerlink" title="4. Eureka服务注册与发现"></a>4. Eureka服务注册与发现</h3><p><strong>服务治理</strong>：在传统的RPC远程调用框架中，管理每个服务与服务之间依赖关系复杂，管理比较复杂，所以需要服务治理，管理服务于服务之间的依赖关系，可以实现服务调用，负载均衡，容错等，实现服务发现与注册</p><p>​    各个微服务节点通过配置启动后，都会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中会存储所有可用服务节点的信息</p><p>​    <strong>EurekaClient通过注册中心进行访问</strong></p><p>​        是一个java客户端，用于简化交互，在应用启动后，会每隔一段时间（默认30秒）对EurekaServer发送心跳，如果在多个周期内EurekaServer没有接收到某节点的心跳，那么就会自动移除该节点（默认90秒）</p><h4 id="配置主启动类"><a href="#配置主启动类" class="headerlink" title="配置主启动类"></a>配置主启动类</h4><p>需要添加 <code>@EnableEurekaServer</code>注解，表示这是一个服务类</p><h5 id="yml文件具体配置"><a href="#yml文件具体配置" class="headerlink" title="yml文件具体配置"></a>yml文件具体配置</h5><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-comment">#集群指向其它eureka</span>      <span class="hljs-comment">#defaultZone: http://eureka7002.com:7002/eureka/</span>      <span class="hljs-comment">#单机就是7001自己</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>    <span class="hljs-comment">#server:</span>    <span class="hljs-comment">#关闭自我保护机制，保证不可用服务被及时踢除</span>    <span class="hljs-comment">#enable-self-preservation: false</span>    <span class="hljs-comment">#eviction-interval-timer-in-ms: 2000</span></code></pre><h6 id="接下来将服务提供者注册进入Eureka服务中心"><a href="#接下来将服务提供者注册进入Eureka服务中心" class="headerlink" title="接下来将服务提供者注册进入Eureka服务中心"></a>接下来将服务提供者注册进入Eureka服务中心</h6><p>首先，进入服务提供者8001工程，改动pom文件，引入eureka-client</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--eureka-client--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>在主启动类中加入注解</p><p><code>@EnableEurekaClient</code>表示这是一个服务提供者Client，注册进入Eureka服务中心</p><p>改动yml文件</p><pre><code class="hljs yml"><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment">#表示是否将自己注册进EurekaServer默认为true。</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-comment">#单机版</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span>      <span class="hljs-comment"># 集群版</span>      <span class="hljs-comment">#defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>  <span class="hljs-comment">#instance:</span>    <span class="hljs-comment">#instance-id: payment8001</span>    <span class="hljs-comment">#访问路径可以显示IP地址</span>    <span class="hljs-comment">#prefer-ip-address: true</span>    <span class="hljs-comment">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)</span>    <span class="hljs-comment">#lease-renewal-interval-in-seconds: 1</span>    <span class="hljs-comment">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务</span>    <span class="hljs-comment">#lease-expiration-duration-in-seconds: 2</span></code></pre><p>将消费者cloud-consumer-order80注册进入服务中心</p><p><strong>引入pom文件</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p><strong>改动yml</strong></p><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-order-service</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment">#表示是否将自己注册进EurekaServer默认为true。</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span>    <span class="hljs-attr">fetchRegistry:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-comment">#单机</span>      <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span>      <span class="hljs-comment"># 集群</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span></code></pre><p><strong>在主启动类加入注解</strong></p><p><code>@EnableEurekaClient</code> 注册进入Eureka服务中心</p><h4 id="Eureka集群原理"><a href="#Eureka集群原理" class="headerlink" title="Eureka集群原理"></a>Eureka集群原理</h4><p><strong>互相注册，相互守望</strong></p><h5 id="建立一个cloud-eureka-server7002"><a href="#建立一个cloud-eureka-server7002" class="headerlink" title="建立一个cloud-eureka-server7002"></a>建立一个cloud-eureka-server7002</h5><ul><li><p>​    修改映射配置文件 修改C:\Windows\System32\drivers\etc\host文件 添加映射</p><p><code>127.0.0.1     eureka7001.com127.0.0.1    eureka7002.com</code></p></li><li><p>​    关键在于写YML文件，以前是单机，现在需要相互注册，有改动</p></li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-comment">#集群指向其它eureka</span>      <span class="hljs-comment">#defaultZone: http://eureka7002.com:7002/eureka/</span>      <span class="hljs-comment">#单机就是7001自己</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/</span>    <span class="hljs-comment">#server:</span>    <span class="hljs-comment">#关闭自我保护机制，保证不可用服务被及时踢除</span>    <span class="hljs-comment">#enable-self-preservation: false</span>    <span class="hljs-comment">#eviction-interval-timer-in-ms: 2000</span></code></pre><h5 id="将consumer-8001也注册进入eureka集群"><a href="#将consumer-8001也注册进入eureka集群" class="headerlink" title="将consumer-8001也注册进入eureka集群"></a>将consumer-8001也注册进入eureka集群</h5><p><strong>修改yml文件即可</strong>    </p><pre><code class="hljs yml">  <span class="hljs-comment">#单机版</span>  <span class="hljs-comment">#defaultZone: http://localhost:7001/eureka</span>  <span class="hljs-comment"># 集群版</span>  <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span><span class="hljs-comment">#instance:</span></code></pre><h5 id="order80也类似，修改yml文件即可"><a href="#order80也类似，修改yml文件即可" class="headerlink" title="order80也类似，修改yml文件即可"></a>order80也类似，修改yml文件即可</h5><p>注意启动顺序必须得是 <strong>先7001,7002 再 8001 然后80</strong></p><h5 id="支付提供者8001集群环境构建"><a href="#支付提供者8001集群环境构建" class="headerlink" title="支付提供者8001集群环境构建"></a>支付提供者8001集群环境构建</h5><p>​    <strong>这里遇到一个巨坑，不能在idea中随意复制粘贴项目文件，如果copy也必须要在windows资源文件夹下进行操作，不然关系会乱！！！</strong></p><p>​    <strong>如果随意复制粘贴，项目会自动引用你复制的那个文件，会报错</strong></p><p>​    <strong>这里我也没有找到什么很好的解决办法，只能把项目重写了一遍，原因可能就是cv大法使得依赖关系错乱了</strong></p><p>​    这里可以使用idea并发同一个程序，只需要书写不同的方法即可</p><p>​    这里附上yml代码，用—配置</p><p>​    使用下面两行代码分别启动不同端口的server构成集群</p><pre><code class="hljs ini"><span class="hljs-attr">--spring.profiles.active</span>=eureka7001.com</code></pre><pre><code class="hljs ini"><span class="hljs-attr">--spring.profiles.active</span>=eureka7002.com</code></pre><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">7001</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">eureka7001.com</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-ha</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7001.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-comment">#集群指向其它eureka</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7002.com:7002/eureka/</span>      <span class="hljs-comment">#单机就是7001自己</span>      <span class="hljs-comment">#defaultZone: http://eureka7001.com:7001/eureka/</span>    <span class="hljs-comment">#server:</span>    <span class="hljs-comment">#关闭自我保护机制，保证不可用服务被及时踢除</span>    <span class="hljs-comment">#enable-self-preservation: false</span>    <span class="hljs-comment">#eviction-interval-timer-in-ms: 2000</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">7002</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">eureka7002.com</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-ha</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">eureka7002.com</span> <span class="hljs-comment">#eureka服务端的实例名称</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示不向注册中心注册自己。</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>     <span class="hljs-comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-comment">#集群指向其它eureka</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/</span></code></pre><p><strong>顺便一提：出现sql连接超时等情况，一般都是数据库连接出了问题：可以在后面加上</strong> <code>&amp;&amp;serverTimezone=GMT</code></p><p>如果出现了别的情况，比如 </p><pre><code class="hljs pgsql">Servlet.service() <span class="hljs-keyword">for</span> servlet [dispatcherServlet] <span class="hljs-keyword">in</span> context <span class="hljs-keyword">with</span> <span class="hljs-type">path</span> [] threw <span class="hljs-keyword">exception</span> [Request processing failed; nested <span class="hljs-keyword">exception</span> <span class="hljs-keyword">is</span> org.springframework.web.client.HttpClientErrorException$NotFound: <span class="hljs-number">404</span> : [&#123;"timestamp":"2020-09-18T12:32:02.893+0000","status":<span class="hljs-number">404</span>,"error":"Not Found","message":"No message available","path":"/payment/get/31"&#125;]] <span class="hljs-keyword">with</span> root cause</code></pre><p>那么大概率就是dao/service/controller没有加相应的注解，只需要添加上即可</p><p><strong>在这里有一个idea的并行运行方法</strong></p><p>​    首先，在Edit Configurations中打开<strong>并行运行</strong>选项</p><p>​    然后添加参数，在7001的Program argument中加 <code>--spring.profiles.active=eureka7001.com</code>     <strong>这里在同一个yml文件中添加了—隔开，上文有介绍</strong></p><p>​    在8001的VM options中加入 <code>-Dspring.config.location=classpath:/application2.yml</code>    <strong>这里是另外加了一个yml文件</strong></p><h5 id="改变（隐藏）主机地址"><a href="#改变（隐藏）主机地址" class="headerlink" title="改变（隐藏）主机地址"></a>改变（隐藏）主机地址</h5><p><strong>显示IP地址配置</strong></p><pre><code class="hljs yml"><span class="hljs-attr">instance:</span>  <span class="hljs-attr">instance-id:</span> <span class="hljs-string">payment8002</span><span class="hljs-comment">#隐藏主机地址</span>  <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><span class="hljs-comment">#显示ip地址</span></code></pre><h4 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h4><p>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息</p><p>修改PaymentMain8001的controller，将微服务暴露给对方</p><p>在controller层添加如下方法，有2层遍历</p><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/payment/discovery"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">discovery</span><span class="hljs-params">()</span></span>&#123;    List&lt;String&gt; services = discoveryClient.getServices();    <span class="hljs-keyword">for</span>(String element : services)    &#123;        System.out.println(<span class="hljs-string">"*****element: "</span>+element);    &#125;    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">"CLOUD-PAYMENT-SERVICE"</span>);    <span class="hljs-keyword">for</span>(ServiceInstance instance:instances)&#123;        System.out.println(instance.getServiceId()+<span class="hljs-string">"\t"</span>+instance.getHost()+<span class="hljs-string">"\t"</span>+instance.getPort()+<span class="hljs-string">"\t"</span>+instance.getUri());    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.discoveryClient;&#125;</code></pre><p>在主启动类添加如下注释</p><p><code>@EnableDiscoveryClient</code></p><h3 id="5-使用zookeeper作为注册中心"><a href="#5-使用zookeeper作为注册中心" class="headerlink" title="5. 使用zookeeper作为注册中心"></a>5. 使用zookeeper作为注册中心</h3><h4 id="zookeeper概念初步认识"><a href="#zookeeper概念初步认识" class="headerlink" title="zookeeper概念初步认识"></a>zookeeper概念初步认识</h4><p><strong>ZooKeeper 是一个开源的分布式协调服务</strong></p><p>ZooKeeper 是一个典型的分布式数据一致性解决方案，分布式应用程序可以基于 ZooKeeper 实现诸如<strong><em>数据发布/订阅</em></strong>、<strong>负载均衡</strong>、<strong>命名服务</strong>、<strong><em>分布式协调/通知</em></strong>、<strong>集群管理</strong>、<strong><em>Master 选举</em></strong>、<strong><em>分布式锁</em></strong>和<strong><em>分布式队列</em></strong>等功能。</p><p>ZooKeeper 的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p><p><img src="https://img-blog.csdn.net/20180911221613235?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYWhhbzExODY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" srcset="/img/loading.gif" alt="img"></p><p><strong>最好使用奇数台服务器构成zookeeper集群</strong></p><p>​    因为采取的算法规则是半数以上(不包含半数)以上的服务器存活，那么服务继续，也就是说3台服务器最多允许一台挂掉，4台服务器也只允许一台挂掉</p><ul><li><p><strong>ZooKeeper 本身就是一个*分布式程序*</strong>（只要半数以上节点存活，ZooKeeper 就能正常服务）。</p></li><li><p><strong>为了保证*高可用*，最好是以集群形态来部署 ZooKeeper，</strong>这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。</p></li><li><p><strong>ZooKeeper 将数据保存在*内存中*，</strong>这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 Znode 中存储的数据量较小的进一步原因）。</p></li><li><p><strong>ZooKeeper 是高性能的。</strong>在“读”多于“写”的应用程序中尤其地高性能，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）</p></li><li><p><strong>ZooKeeper 有临时节点的概念。</strong>当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。</p><p>而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 ZNode 被创建了，除非主动进行 ZNode 的移除操作，否则这个 ZNode 将一直保存在 Zookeeper 上。</p></li><li><p><strong>ZooKeeper 底层其实只提供了两个功能</strong>：①管理（存储、读取）用户程序提交的数据；②为用户程序提交数据节点监听服务。</p></li></ul><h4 id="支付服务进入zookeeper"><a href="#支付服务进入zookeeper" class="headerlink" title="支付服务进入zookeeper"></a>支付服务进入zookeeper</h4><ul><li><p>创工程</p></li><li><p>POM配置</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactIdw</span></span>        &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></li><li><p>改YML</p><pre><code class="hljs yml"><span class="hljs-comment">#8004表示注册到zookeeper服务器的支付服务提供者端口号</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8004</span><span class="hljs-comment">#服务别名----注册zookeeper到注册中心名称</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-provider-payment</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">zookeeper:</span>      <span class="hljs-attr">connect-string:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.119</span><span class="hljs-number">.128</span><span class="hljs-string">:2181</span>      <span class="hljs-comment">#connec-string: 是在虚拟机中启动的主机地址:zookeeper端口号</span></code></pre></li><li><p>基本启动类和controller配置</p></li><li><p>在Linux中通过docker启动zookeeper</p><p><code>root@ubuntu:/home/fhawke# docker exec -it 5c8484724b8b zkCli.sh</code></p><p>然后通过下图中命令进行测试</p></li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200922224810660.png" srcset="/img/loading.gif" alt="image-20200922224810660"></p><p><strong>在zookeeper中的服务节点是临时节点</strong>，在心跳检测中不会删除，超过时限后就删除服务</p><h4 id="添加订单服务注册consumer-80"><a href="#添加订单服务注册consumer-80" class="headerlink" title="添加订单服务注册consumer-80"></a>添加订单服务注册consumer-80</h4><p><strong>一样的步骤不再赘述</strong></p><p>application.yml文件</p><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-consumer-order</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-comment">#注册到zookeeper地址</span>    <span class="hljs-attr">zookeeper:</span>      <span class="hljs-attr">connect-string:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.119</span><span class="hljs-number">.128</span><span class="hljs-string">:2181</span></code></pre><p><strong>添加Config和Controller</strong></p><p>​    <strong>controller：</strong></p><p>PaymentInfo方法测试：通过这个方法，consumer调用provider的服务方法地址    <a href="http://cloud-provider-payment/payment/zk" target="_blank" rel="noopener">http://cloud-provider-payment/payment/zk</a>  ，通过restTemplate得到result返回，完成测试过程</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.controller;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> javax.annotation.Resource;<span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderZKController</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String INVOKE_URL = <span class="hljs-string">"http://cloud-provider-payment"</span>;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;    <span class="hljs-comment">//注册进入zookeeper</span>    <span class="hljs-comment">//能够调用8004</span>    <span class="hljs-meta">@GetMapping</span>(value=<span class="hljs-string">"/consumer/payment/zk"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">PaymentInfo</span><span class="hljs-params">()</span></span>&#123;        String result = restTemplate.getForObject(INVOKE_URL+<span class="hljs-string">"/payment/zk"</span>,String<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.config;        <span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;        <span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;        <span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;        <span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@LoadBalanced</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;&#125;</code></pre><h3 id="6-Consul"><a href="#6-Consul" class="headerlink" title="6. Consul"></a>6. Consul</h3><p><strong>Consul是一套开源的分布式服务发现和配置管理系统</strong></p><p>提供了微服务系统中的服务治理，配置中心，控制总线等功能，这些功能中的每一个都可以根据需要单独使用，Consul提供了一种完整的服务网格解决方案</p><p>​    它基于raft协议，较为简洁；支持健康检查，同时支持HTTP和DNS协议，支持跨数据中心的WAN集群</p><h4 id="通过docker安装Consul"><a href="#通过docker安装Consul" class="headerlink" title="通过docker安装Consul"></a>通过docker安装Consul</h4><ul><li><p>简单的docker search consul 和 docker pull consul 不必多说</p></li><li><p><code>docker run --name consul -d -p 8500:8500 -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8600:8600 consul agent -server -bootstrap-expect 1 -ui -bind=0.0.0.0 -client=0.0.0.0</code></p></li><li><p>然后ifconfig查看主机ip地址 访问查询到的地址(设为ip) 访问 <code>ip:8500</code></p></li><li><p>出现以下界面代表访问成功，安装完成</p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200923143019999.png" srcset="/img/loading.gif" alt="image-20200923143019999"></p></li><li><p>这里给出各参数代表意义</p></li></ul><pre><code class="hljs markdown">–net=host docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤-server consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求-advertise 将本机私有IP传递到consul-retry-join 指定要加入的consul节点地址，失败后会重试, 可多次指定不同的地址-client 指定consul绑定在哪个client地址上，这个地址可提供HTTP、DNS、RPC等服务，默认是&gt;127.0.0.1-bind 绑定服务器的ip地址；该地址用来在集群内部的通讯，集群内的所有节点到地址必须是可达的，&gt;默认是0.0.0.0allow_stale 设置为true则表明可从consul集群的任一server节点获取dns信息, false则表明每次请求都会&gt;经过consul的server leader-bootstrap-expect 数据中心中预期的服务器数。指定后，Consul将等待指定数量的服务器可用，然后&gt;启动群集。允许自动选举leader，但不能与传统-bootstrap标志一起使用, 需要在server模式下运行。-data-dir 数据存放的位置，用于持久化保存集群状态-node 群集中此节点的名称，这在群集中必须是唯一的，默认情况下是节点的主机名。-config-dir 指定配置文件，当这个目录下有 .json 结尾的文件就会被加载，详细可参考https://www.consul.io/docs/agent/options.html#configuration_files-enable-script-checks 检查服务是否处于活动状态，类似开启心跳-datacenter 数据中心名称-ui 开启ui界面-join 指定ip, 加入到已有的集群中</code></pre><p><strong>注意：</strong></p><p>在<strong>-bootstrap-expect</strong> 后面如果加1，代表单机，如果加2，代表集群</p><p><strong>主要是后面加-client 0.0.0.0，Consul将接受绑定到所有接口的选项</strong></p><h4 id="服务提供者注册进Consul"><a href="#服务提供者注册进Consul" class="headerlink" title="服务提供者注册进Consul"></a>服务提供者注册进Consul</h4><ul><li><p>建立module <strong>PaymentMain8006</strong> </p></li><li><p>POM和YML文件修改</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-providerconsul-payment8006<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--SpringCloud consul-server --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></li></ul><pre><code class="hljs yml"><span class="hljs-comment">###consul服务端口号</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8006</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">consul-provider-payment</span>  <span class="hljs-comment">####consul注册中心地址</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">consul:</span>      <span class="hljs-comment">#虚拟机ip地址</span>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.119</span><span class="hljs-number">.128</span>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-comment">#hostname: 127.0.0.1</span>        <span class="hljs-attr">service-name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span></code></pre><ul><li>然后建立Controller和主启动类进行测试，与8004相同</li><li>成功界面，看到consul-provider-payment(模块名)已经成功进入了consul</li><li><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200923144240460.png" srcset="/img/loading.gif" alt="image-20200923144240460"></li></ul><h4 id="服务消费者注册进Consul"><a href="#服务消费者注册进Consul" class="headerlink" title="服务消费者注册进Consul"></a>服务消费者注册进Consul</h4><ul><li>和zookeeper大同小异，这里给上文件</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumerconsul-order80<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--SpringCloud consul-server --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><pre><code class="hljs yml"><span class="hljs-comment">###consul服务端口号</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-consumer-order</span>  <span class="hljs-comment">####consul注册中心地址</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">consul:</span>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.119</span><span class="hljs-number">.128</span>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-comment">#hostname: 127.0.0.1</span>        <span class="hljs-attr">service-name:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span></code></pre><ul><li><p>Config使用RestTemplate</p></li><li><p>controller测试方法</p><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderConsulController</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String INVOKE_URL = <span class="hljs-string">"http://consul-provider-payment"</span>;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;    <span class="hljs-comment">//consul</span>    <span class="hljs-comment">//8006</span>    <span class="hljs-meta">@GetMapping</span>(value=<span class="hljs-string">"/consumer/payment/consul"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">PaymentInfo</span><span class="hljs-params">()</span></span>&#123;        String result = restTemplate.getForObject(INVOKE_URL+<span class="hljs-string">"/payment/consul"</span>,String<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre></li><li><p>验证目的：消费者既被注册进了consul，又可以输入 <code>http://localhost:81/consumer/payment/consul</code>来调用服务注册者</p></li></ul><h4 id="三个注册中心的异同-eureka，zookeeper，consul"><a href="#三个注册中心的异同-eureka，zookeeper，consul" class="headerlink" title="三个注册中心的异同(eureka，zookeeper，consul)"></a>三个注册中心的异同(eureka，zookeeper，consul)</h4><table><thead><tr><th>组件名</th><th>语言</th><th>CAP</th><th>服务健康检查</th><th>对外暴露接口</th><th>Spring Cloud集成</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>AP</td><td>可配支持</td><td>HTTP</td><td>已集成</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>支持</td><td>HTTP/DNS</td><td>已集成</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>支持</td><td>客户端</td><td>已集成</td></tr></tbody></table><p><strong>CAP</strong>：CAP原则又称CAP定理，指的是在一个分布式系统中，<a href="https://baike.baidu.com/item/一致性/9840083" target="_blank" rel="noopener">一致性</a>（Consistency）、<a href="https://baike.baidu.com/item/可用性/109628" target="_blank" rel="noopener">可用性</a>（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p><img src="https://bkimg.cdn.bcebos.com/pic/5bafa40f4bfbfbed9c15b19b72f0f736aec31f81?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg" srcset="/img/loading.gif" alt="img" style="zoom:200%;"><p><strong>AP架构</strong>：当网络分区出现后，为了保证可用性，第二个系统可以返回旧值，保证系统的可用性</p><p><strong>CP架构</strong>：当网络分区出现后，为了保证一致性，就必须拒绝请求，否则无法保证一致性</p><h3 id="7-Ribbon"><a href="#7-Ribbon" class="headerlink" title="7. Ribbon"></a>7. Ribbon</h3><p><strong>Ribbon负载均衡服务调用</strong></p><ul><li>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套 <strong>客户端负载均衡</strong>的工具 (Order80)</li><li>简单来说，Ribbon的主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong></li><li>Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等</li><li>简单来说，就是在配置文件中列出Load Banlancer后面所有的及其，Ribbon会自动的帮助你基于某种规则(<strong>简单轮询，随机连接</strong>)去连接这些机器，我们很容易使用Ribbon实现自定义的负载均衡算法</li><li>Ribbon实际上就是<strong>负载均衡+RestTemplate</strong>调用</li></ul><p><strong>负载均衡是什么？</strong></p><p>​    简单来说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA(<strong>高可用</strong>)，常用的负载均衡有软件Nginx,LVS,硬件 F5等</p><p><strong>Ribbon本地负载客户端 VS Nginx服务端负载均衡区别</strong></p><ul><li>Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求，即负载均衡是由服务端实现的</li></ul><p>​    <strong>（集中式LB）: 即在服务的消费方和提供方之间使用独立的LB设施，由该设施负责把访问请求通过某种策略转发至服务的提供方</strong></p><ul><li>Ribbon本地负载均衡，在调用微服务接口的时候，会在注册中心上获取注册信息服务列表之后缓存在JVM本地，从而在本地实现RPC远程服务调用技术 </li></ul><p>​    <strong>（进程内LB）：把LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址选择出一个合适的服务器</strong></p><p><font color="red">通俗来说，nginx会把所有人的请求postmapping发到nginx，nginx来对这些请求发到哪些服务器进行负载均衡 </font></p><p><font color="red">ribbon是A服务要调用B服务，B服务有三个提供者，A会把这三个提供者缓存到jvm里，进行一个远程调用</font></p><p><font color="red">一个是服务器端，一个是客户端</font></p><p><font color="red">nginx是外边对服务器的调用，ribbon是微服务之间的相互调用</font></p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="Ribbon负载均衡演示"><a href="#Ribbon负载均衡演示" class="headerlink" title="Ribbon负载均衡演示"></a>Ribbon负载均衡演示</h4><p><strong>Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例</strong></p><p><strong>所谓软负载均衡：就是消费者自己集成了Ribbon组件，对于负载均衡请求可以自己查询可用服务列表</strong></p><p>Ribbon工作分2步：</p><ul><li>第一步先选择EurekaServer，它优先选择在同一个区域内负载较少的server</li><li>第二部再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址，然后调用</li><li>其中Ribbon提供了多种策略：比如轮询，随机和根据响应时间加权</li></ul><p><strong>在最新的pom文件中，即使你没有引用Ribbon也可以使用，因为下面的eureka已经和Ribbon进行了整合</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200923160400076.png" srcset="/img/loading.gif" alt="image-20200923160400076"></p><p><strong>图中蓝色框就是Ribbon的引入，可见eureka已经整合了Ribbon</strong></p><h4 id="Ribbon默认自带的负载规则"><a href="#Ribbon默认自带的负载规则" class="headerlink" title="Ribbon默认自带的负载规则"></a>Ribbon默认自带的负载规则</h4><p><strong>IRule</strong>：根据特定算法中从服务列表中选取一个要访问的服务</p><p>默认自带：</p><ul><li>轮询</li><li>随机</li><li>先按照轮询策略获取服务，如果获取服务失败则在指定时间内重试，获取可用的服务</li><li>对轮询的扩展，响应速度越快的实例选择权重越大，越容易被选择</li><li>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量小的服务</li><li>先过滤掉故障实例，再选择并发较小的实例</li><li>ZoneAvoidanceRule 默认规则，复合判断server所在区域的性能和server的可用性选择服务器</li></ul><h4 id="如何替换负载规则"><a href="#如何替换负载规则" class="headerlink" title="如何替换负载规则"></a>如何替换负载规则</h4><ul><li><p>修改cloud-consumer-order80</p></li><li><p><font color="red">警告!</font> 修改负载规则的自定义配置类不能放在<strong>@ComponentScan</strong>所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被<strong>所有Ribbon客户端</strong>所共享，无法达到特殊化的目的 <strong>@SpringbootApplication同理</strong></p></li><li><p>在java下另建一个包myrule，建立类MySelfRule</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySelfRule</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">myRule</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();    <span class="hljs-comment">//定义为随机</span>    &#125;&#125;</code></pre></li><li><p>在主启动类中添加RibbonClient</p><p><code>@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MySelfRule.class)</code></p></li></ul><h4 id="Ribbon负载均衡算法"><a href="#Ribbon负载均衡算法" class="headerlink" title="Ribbon负载均衡算法"></a>Ribbon负载均衡算法</h4><ul><li>原理：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标 ，每次服务重启动后rest接口技术从1开始</li></ul><h4 id="手写负载算法"><a href="#手写负载算法" class="headerlink" title="手写负载算法"></a>手写负载算法</h4><p><strong>原理+JUC（CAS + 自旋锁复习）</strong></p><ul><li>首先注释掉消费者80config配置类中的@LoadBalanced</li><li>然后添加lb包，保证lb包能被扫描到，在MyLB类中添加@Component注解</li><li>定义LoadBalancer接口，让MyLB实现它</li><li>以下就是MyLB类对于轮询算法的实现</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LoadBalancer</span> </span>&#123;    <span class="hljs-comment">//原子类</span>    <span class="hljs-keyword">private</span> AtomicInteger atomicInteger = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAndIncrement</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">int</span> current;        <span class="hljs-keyword">int</span> next;        <span class="hljs-keyword">do</span>&#123;            current = <span class="hljs-keyword">this</span>.atomicInteger.get();            next = current &gt;= <span class="hljs-number">2147483647</span> ? <span class="hljs-number">0</span>:current+<span class="hljs-number">1</span>;            <span class="hljs-comment">//2147483647是整形的最大值</span>        &#125;<span class="hljs-keyword">while</span>(!<span class="hljs-keyword">this</span>.atomicInteger.compareAndSet(current,next));    <span class="hljs-comment">//自旋锁</span>        System.out.println(<span class="hljs-string">"******next:  "</span>+next);        <span class="hljs-keyword">return</span> next;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServiceInstance <span class="hljs-title">instances</span><span class="hljs-params">(List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;                    <span class="hljs-comment">//第几次访问 % 集群服务器总数量 = 实际调用服务器位置下标</span>        <span class="hljs-keyword">int</span> index = getAndIncrement() % serviceInstances.size();        <span class="hljs-keyword">return</span> serviceInstances.get(index);    &#125;&#125;</code></pre><ul><li>编写测试类进行测试(消费者80)</li></ul><pre><code class="hljs java"><span class="hljs-comment">//定义自己的轮询算法启动</span>   <span class="hljs-meta">@GetMapping</span>(value=<span class="hljs-string">"/consumer/payment/lb"</span>)   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPaymentLB</span><span class="hljs-params">()</span></span>&#123;       List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">"CLOUD-PAYMENT-SERVICE"</span>);       <span class="hljs-keyword">if</span>(instances == <span class="hljs-keyword">null</span>||instances.size() &lt;= <span class="hljs-number">0</span>)&#123;           <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;       &#125;<span class="hljs-keyword">else</span>&#123;           ServiceInstance serviceInstance = loadBalancer.instances(instances);           URI uri = serviceInstance.getUri();           <span class="hljs-keyword">return</span> restTemplate.getForObject(uri+<span class="hljs-string">"payment/lb"</span>,String<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;       &#125;   &#125;</code></pre><ul><li><p>在8001的Controller层加入测试方法</p><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(value=<span class="hljs-string">"/payment/lb"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPaymentLB</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> serverPort;    &#125;</code></pre></li></ul><p>实际上80测试类调用的就是8001的方法，也就是说消费者调用了服务提供者</p><h3 id="8-OpenFeign"><a href="#8-OpenFeign" class="headerlink" title="8. OpenFeign"></a>8. OpenFeign</h3><ul><li>Feign是一个声明式WebService客户端，使用Feign能让编写Web Service客户端更简单</li><li>他的使用方法是定义一个服务接口然后在上面添加注解，Feign也支持可拔插式的编码器和解码器，Feign可以与Eureka和Ribbon组合使用以支持负载均衡</li><li>Feign也整合了Ribbon，所以也具有轮询功能</li></ul><h4 id="OpenFeign使用步骤"><a href="#OpenFeign使用步骤" class="headerlink" title="OpenFeign使用步骤"></a>OpenFeign使用步骤</h4><ul><li>接口+注解    @FeignClient</li><li>项目创建         <ul><li>feign用在消费端  </li><li>@EnableFeignClients 使用并激活Feign</li></ul></li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--openfeign--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ul><li><p>Controller层调用Service层</p><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderFeignController</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> PaymentFeignService paymentFeignService;    <span class="hljs-meta">@GetMapping</span>(value=<span class="hljs-string">"/consumer/payment/get/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">getPaymentById</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)</span>&#123;        <span class="hljs-keyword">return</span> paymentFeignService.getPaymentById(id);    &#125;&#125;</code></pre></li><li><p>Service层通过<strong>@FeignClient</strong>注解查询服务提供者，然后根据GetMapping的参数<strong>调用服务提供者的方法</strong></p></li></ul><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@FeignClient</span>(value=<span class="hljs-string">"CLOUD-PAYMENT-SERVICE"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PaymentFeignService</span> </span>&#123;    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/payment/get/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">getPaymentById</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)</span>;&#125;</code></pre><ul><li><p>测试 <code>http://localhost:81/consumer/payment/get/31</code></p><p>发现是<strong>轮询</strong>，由此可见Feign实现了<strong>负载均衡</strong></p></li></ul><h4 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h4><pre><code class="hljs yml"><span class="hljs-comment">#设置feign客户端超时时间(OpenFeign默认支持ribbon)</span><span class="hljs-attr">ribbon:</span>  <span class="hljs-comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">5000</span>  <span class="hljs-comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">5000</span></code></pre><h4 id="OpenFeign日志增强"><a href="#OpenFeign日志增强" class="headerlink" title="OpenFeign日志增强"></a>OpenFeign日志增强</h4><pre><code class="hljs yml"><span class="hljs-attr">logging:</span>  <span class="hljs-attr">level:</span>    <span class="hljs-comment"># feign日志以什么级别监控哪个接口</span>    <span class="hljs-attr">com.atguigu.springcloud.service.PaymentFeignService:</span> <span class="hljs-string">debug</span></code></pre><p>在Config类中加一个配置类</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    Logger.<span class="hljs-function">Level <span class="hljs-title">feignLoggerLevel</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> Logger.Level.FULL;    &#125;&#125;</code></pre><h3 id="9-Hystrix断路器"><a href="#9-Hystrix断路器" class="headerlink" title="9. Hystrix断路器"></a>9. Hystrix断路器</h3><ul><li><strong>服务雪崩</strong>：服务雪崩效应是一种因“服务提供者的不可用”（原因）导致“服务调用者不可用”（结果），并将不可用逐渐放大的现象<ul><li>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和，比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用系统</li></ul></li></ul><ul><li><strong>Hystrix是一个用于处理分布式系统的延迟和容错的开源库</strong>，在分布式系统里，许多依赖不可避免的会调用失败，比如超时/异常 等等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性<ul><li>服务降级<ul><li>程序运行异常</li><li>超时</li><li>服务熔断出发服务降级</li><li>线程池/信号量打满也会导致服务降级</li></ul></li><li>服务熔断<ul><li>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</li></ul></li><li>接近实时的监控</li><li>服务限流<ul><li>秒杀高并发等操作，有序进行</li></ul></li></ul></li></ul><h4 id="Hystrix支付微服务搭建"><a href="#Hystrix支付微服务搭建" class="headerlink" title="Hystrix支付微服务搭建"></a>Hystrix支付微服务搭建</h4><ul><li>基本的建module然后搭配</li></ul><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--hystrix--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-provider-hystrix-payment</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>      <span class="hljs-comment">#defaultZone: http://eureka7001.com:7001/eureka</span></code></pre><ul><li>Controller层</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentController</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> PaymentService paymentService;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;server.port&#125;"</span>)    <span class="hljs-keyword">private</span> String serverPort;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"payment/hystrix/ok/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;        String result = paymentService.paymentInfo_OK(id);        log.info(<span class="hljs-string">"*****result"</span>+result);        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"payment/hystrix/timeout/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_Timeout</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;        String result = paymentService.paymentInfo_Timeout(id);        log.info(<span class="hljs-string">"*****result"</span>+result);        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><ul><li>调用Service层</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentService</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 正常访问</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(Integer id)</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池： "</span>+Thread.currentThread().getName()+<span class="hljs-string">"       paymentInfo_OK,id:   "</span>+id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"O(∩_∩)O"</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_Timeout</span><span class="hljs-params">(Integer id)</span></span>&#123;        <span class="hljs-keyword">int</span> timeNumber = <span class="hljs-number">3</span>;        <span class="hljs-keyword">try</span>&#123;            TimeUnit.SECONDS.sleep(timeNumber);        &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池： "</span>+Thread.currentThread().getName()+<span class="hljs-string">"       paymentInfo_Timeout,id:   "</span>+id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"O(∩_∩)O"</span> + <span class="hljs-string">"耗时："</span> +timeNumber;    &#125;&#125;</code></pre><h4 id="JMeter高并发压测后卡顿"><a href="#JMeter高并发压测后卡顿" class="headerlink" title="JMeter高并发压测后卡顿"></a>JMeter高并发压测后卡顿</h4><ul><li>开启Jmeter，来20000个请求同时访问paymentinfo_Timeout</li><li>这时访问页面出现卡顿，为什么ok路径也会被卡死呢，因为tomcat要分出很多压力去处理timeout路径，也就没有余力去处理ok，所以ok响应速度也会变慢</li></ul><h4 id="80消费者测试加入，进一步加大并发量"><a href="#80消费者测试加入，进一步加大并发量" class="headerlink" title="80消费者测试加入，进一步加大并发量"></a>80消费者测试加入，进一步加大并发量</h4><ul><li>建立消费者80</li><li>改动POM和YML文件</li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka/</span><span class="hljs-comment">#feign:</span><span class="hljs-comment">#  hystrix:</span><span class="hljs-comment">#    enabled: true</span><span class="hljs-attr">ribbon:</span>  <span class="hljs-comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下,两端连接所用的时间</span>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">5000</span>  <span class="hljs-comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">5000</span></code></pre><ul><li>Service层调用<strong>cloud-provider-hystrix-payment</strong>的service方法</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@FeignClient</span>(value = <span class="hljs-string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PaymentHystrixService</span> </span>&#123;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"payment/hystrix/ok/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"payment/hystrix/timeout/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_Timeout</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>;&#125;</code></pre><ul><li>controller层调用service层方法</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderHystrixController</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> PaymentHystrixService paymentHystrixService;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/consumer/payment/hystrix/ok/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;        String result = paymentHystrixService.paymentInfo_OK(id);        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_Timeout</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;        String result = paymentHystrixService.paymentInfo_Timeout(id);        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><ul><li>经过测试，卡顿进一步增加</li></ul><h4 id="降级容错解决的维度要求"><a href="#降级容错解决的维度要求" class="headerlink" title="降级容错解决的维度要求"></a>降级容错解决的维度要求</h4><ul><li>超时不再等待</li><li>出错要有最终处理措施</li><li>解决<ul><li>对方服务（8001）超时了，调用者（80）不能一直卡死等待，必须要有服务降级</li><li>对方服务（8001）down机了，调用者（80）不能一直卡死等待，必须有服务降级</li><li>对方服务（8001）ok，调用者（80）自己出故障或有自我要求（自己的等待时间小于服务提供者），自己处理降级</li></ul></li></ul><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><ul><li><p>降级配置 ： @HystrixCommand</p></li><li><p>8001自身配置</p><ul><li><p><strong>设置自身调用超时时间的峰值</strong>，峰值内可以正常运行</p></li><li><p>超过了需要有方法处理，作服务降级fallback</p></li><li><p>一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法</p></li><li><pre><code>@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,commandProperties = {            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;3000&quot;)    })<pre><code class="hljs markdown"><span class="hljs-bullet">  - </span>主启动类激活：添加新注解<span class="hljs-strong">**@EnableCircuitBreaker**</span><span class="hljs-bullet">- </span>80fallback<span class="hljs-bullet">  - </span><span class="hljs-code">```</span>yml<span class="hljs-code">    feign:</span><span class="hljs-code">      hystrix:</span><span class="hljs-code">        enabled: true</span></code></pre></code></pre></li></ul></li><li><p>主启动类添加 ： <code>@EnableHystrix</code></p></li><li><p>在controller层直接加方法进行测试，修改超时参数测试</p></li></ul><pre><code class="hljs java">    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/consumer/payment/hystrix/timeout/&#123;id&#125;"</span>)    <span class="hljs-meta">@HystrixCommand</span>(fallbackMethod = <span class="hljs-string">"paymentInfo_TimeoutHandler"</span>,commandProperties = &#123;            <span class="hljs-meta">@HystrixProperty</span>(name=<span class="hljs-string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value=<span class="hljs-string">"1500"</span>)    &#125;)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_Timeout</span><span class="hljs-params">(Integer id)</span></span>&#123;        <span class="hljs-keyword">int</span> timeNumber = <span class="hljs-number">3</span>;        <span class="hljs-comment">//int age = 10 / 0;</span>        <span class="hljs-keyword">try</span>&#123;            TimeUnit.SECONDS.sleep(timeNumber);        &#125;<span class="hljs-keyword">catch</span> (InterruptedException e)&#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池： "</span>+Thread.currentThread().getName()+<span class="hljs-string">"       paymentInfo_Timeout,id:   "</span>+id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"O(∩_∩)O"</span> + <span class="hljs-string">"耗时："</span> +timeNumber;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_TimeoutHandler</span><span class="hljs-params">(Integer id)</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"线程池： "</span>+Thread.currentThread().getName()+<span class="hljs-string">"      我是消费者80，请稍后再试,id:   "</span>+id + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"/(ㄒoㄒ)/~~"</span>;    &#125;&#125;</code></pre><ul><li><p>目前问题：每个业务对应一个兜底处理方法，代码膨胀</p><ul><li><p>每个方法配置一个—–膨胀</p><ul><li><p>@DefaultProperties(defaultFallback = “  “)</p><ul><li><p>全局配置：<code>@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</code></p></li><li><p>注释掉配置：</p><pre><code class="hljs awk"><span class="hljs-regexp">//</span>@HystrixCommand(fallbackMethod = <span class="hljs-string">"paymentTimeOutFallbackMethod"</span>,commandProperties = &#123;<span class="hljs-regexp">//</span>            @HystrixProperty(name=<span class="hljs-string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value=<span class="hljs-string">"1500"</span>)<span class="hljs-regexp">//</span>    &#125;)</code></pre></li></ul></li></ul><pre><code class="hljs java"><span class="hljs-comment">//下面是全局fallback方法</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">payment_Global_FallbackMethod</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"Global异常处理信息，请稍后再试,(●'◡'●)"</span>;&#125;</code></pre></li><li><p>和业务逻辑混在一起—–混乱</p><ul><li><p>首先明确，controller层里面的方法调用的是Service层里的接口方法</p></li><li><p>那么我们对Service接口内的所有方法增加一个处理（添加统一的服务降级类）</p></li><li><p>那么解决方法就是：根据Service层的接口，重新定义一个类<strong>PaymentFallbackService</strong>实现该接口，统一为接口里面的方法进行异常处理</p></li><li><pre><code class="yml"><span class="attr">feign:</span>  <span class="attr">hystrix:</span>    <span class="attr">enabled:</span> <span class="literal">true</span><span class="string"><pre><code class="hljs java">- **PaymentFallbackService**类：- ```java  <span class="hljs-meta">@Component</span>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentFallbackService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PaymentHystrixService</span></span>&#123;        <span class="hljs-meta">@Override</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_OK</span><span class="hljs-params">(Integer id)</span> </span>&#123;          <span class="hljs-keyword">return</span> <span class="hljs-string">"-----PaymentFallbackService fall back,O(∩_∩)O"</span>;      &#125;        <span class="hljs-meta">@Override</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo_Timeout</span><span class="hljs-params">(Integer id)</span> </span>&#123;          <span class="hljs-keyword">return</span> <span class="hljs-string">"-----PaymentFallbackService  paymentInfo_Timeout fall back,O(∩_∩)O"</span>;      &#125;  &#125;</code></pre></span></code></pre></li><li><p>Service注解改动</p></li><li><pre><code class="java"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span>,fallback = PaymentFallbackService<span class="class">.<span class="keyword">class</span>)</span><span class="class"><pre><code class="hljs kotlin">    - 测试：打开<span class="hljs-number">7001</span>，<span class="hljs-number">8001</span>，<span class="hljs-number">80</span>    - 首先 `http:<span class="hljs-comment">//localhost:81/consumer/payment/hystrix/ok/31`访问正常</span>    - 然后关闭<span class="hljs-number">8001</span>，因为<span class="hljs-number">80</span>调用的是<span class="hljs-number">8001</span>的方法，也就是消费者调用服务器，模拟服务器宕机    - `-----PaymentFallbackService fall back,O(∩_∩)O`出现自己自定义的字符，说明服务降级处理生效，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器    - 如此一来，业务逻辑也就和全局处理分开#### 服务熔断- 熔断机制是对应雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。- 当检测到该微服务调用响应正常后，恢复调用链路- 在Spring Cloud框架里，熔断机制是通过Hystrix实现，Hystrix会监控微服务间的调用情况，当失败的调用到达一定的阈值，缺省是<span class="hljs-number">5</span>秒内<span class="hljs-number">20</span>次调用失败，就会启动熔断机制。熔断机制的注解是<span class="hljs-meta">@HystrixCommand</span>- 测试：  - 首先在service中添加代码，<span class="hljs-meta">@HystrixCommand</span>开启熔断，fallbackMethod指定熔断方法名称  ```java  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 服务熔断</span><span class="hljs-comment">   */</span>  <span class="hljs-meta">@HystrixCommand(fallbackMethod = <span class="hljs-meta-string">"paymentCircuitBreaker_fallback"</span>,commandProperties = &#123;</span><span class="hljs-meta">          @HystrixProperty(name = <span class="hljs-meta-string">"circuitBreaker.enabled"</span>,value = <span class="hljs-meta-string">"true"</span>)</span>,<span class="hljs-comment">// 是否开启断路器</span>          <span class="hljs-meta">@HystrixProperty(name = <span class="hljs-meta-string">"circuitBreaker.requestVolumeThreshold"</span>,value = <span class="hljs-meta-string">"10"</span>)</span>,<span class="hljs-comment">// 请求次数</span>          <span class="hljs-meta">@HystrixProperty(name = <span class="hljs-meta-string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value = <span class="hljs-meta-string">"10000"</span>)</span>, <span class="hljs-comment">// 时间窗口期</span>          <span class="hljs-meta">@HystrixProperty(name = <span class="hljs-meta-string">"circuitBreaker.errorThresholdPercentage"</span>,value = <span class="hljs-meta-string">"60"</span>)</span>,<span class="hljs-comment">// 失败率达到多少后跳闸</span>  &#125;)  <span class="hljs-keyword">public</span> String paymentCircuitBreaker(<span class="hljs-meta">@PathVariable(<span class="hljs-meta-string">"id"</span>)</span> Integer id)  &#123;      <span class="hljs-keyword">if</span>(id &lt; <span class="hljs-number">0</span>)      &#123;          <span class="hljs-keyword">throw</span> new RuntimeException(<span class="hljs-string">"******id 不能负数"</span>);      &#125;      String serialNumber = IdUtil.simpleUUID();        <span class="hljs-keyword">return</span> Thread.currentThread().getName()+<span class="hljs-string">"\t"</span>+<span class="hljs-string">"调用成功，流水号: "</span> + serialNumber;  &#125;  <span class="hljs-keyword">public</span> String paymentCircuitBreaker_fallback(<span class="hljs-meta">@PathVariable(<span class="hljs-meta-string">"id"</span>)</span> Integer id)  &#123;      <span class="hljs-keyword">return</span> <span class="hljs-string">"id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: "</span> +id;  &#125;</code></pre></span></code></pre></li></ul></li><li><p>然后在controller中添加代码，调用service中的方法</p></li></ul><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> *  服务熔断</span><span class="hljs-comment"> */</span><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/payment/circuit/&#123;id&#125;"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentCircuitBreaker</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span><span class="hljs-function"></span>&#123;    String result = paymentService.paymentCircuitBreaker(id);    log.info(<span class="hljs-string">"****result: "</span>+result);    <span class="hljs-keyword">return</span> result;&#125;</code></pre></li><li><p><strong>重点</strong>：多次错误，慢慢正确，发现刚开始不满足条件，就算是正确的访问地址也会调用降级方法，这时表示熔断服务已经开启，需要达到一定的正确率才会恢复服务</p></li></ul><h5 id="熔断原理总结："><a href="#熔断原理总结：" class="headerlink" title="熔断原理总结："></a>熔断原理总结：</h5><p><strong>熔断类型：</strong></p><ul><li>熔断打开：请求不再调用服务，内部设置时钟一般为MTTR（平均故障处理时间），当打开时长到所设时钟便进入半熔断状态</li><li>熔断关闭：熔断关闭不会对服务进行熔断</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</li></ul><p>服务熔断工作：</p><ul><li>再有请求调用时，将不会调用主逻辑，而是直接调用降级fallback，通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果</li><li>原来的主逻辑恢复：hystrix实现了自动恢复功能<ul><li>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新开始计时</li></ul></li></ul><h4 id="Hystrix图形化Dashboard搭建"><a href="#Hystrix图形化Dashboard搭建" class="headerlink" title="Hystrix图形化Dashboard搭建"></a>Hystrix图形化Dashboard搭建</h4><ul><li>建立module，改动YML和POM文件</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-consumer-hystrix-dashboard9001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span></code></pre><ul><li>主启动类添加注解</li></ul><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableHystrixDashboard</span></code></pre><ul><li>所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ul><li><p>开启9001，访问 <a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a></p></li><li><p>8001修改启动类</p></li></ul><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> *此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span><span class="hljs-comment"> *ServletRegistrationBean因为springboot的默认路径不是"/hystrix.stream"，</span><span class="hljs-comment"> *只要在自己的项目里配置上下面的servlet就可以了</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">getServlet</span><span class="hljs-params">()</span> </span>&#123;    HystrixMetricsStreamServlet streamServlet = <span class="hljs-keyword">new</span> HystrixMetricsStreamServlet();    ServletRegistrationBean registrationBean = <span class="hljs-keyword">new</span> ServletRegistrationBean(streamServlet);    registrationBean.setLoadOnStartup(<span class="hljs-number">1</span>);    registrationBean.addUrlMappings(<span class="hljs-string">"/hystrix.stream"</span>);    registrationBean.setName(<span class="hljs-string">"HystrixMetricsStreamServlet"</span>);    <span class="hljs-keyword">return</span> registrationBean;&#125;</code></pre><ul><li>开始测试<ul><li><a href="http://localhost:9001/hystrix" target="_blank" rel="noopener">http://localhost:9001/hystrix</a> 监控  <a href="http://localhost:8001/hystrix.stream" target="_blank" rel="noopener">http://localhost:8001/hystrix.stream</a></li><li>访问 <a href="http://localhost:8001/payment/circuit/31" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/31</a> 和 <a href="http://localhost:8001/payment/circuit/-31" target="_blank" rel="noopener">http://localhost:8001/payment/circuit/-31</a></li><li>观察曲线和 <strong>Circuit: OPEN/CLOSE</strong></li></ul></li></ul><h3 id="10-GateWay"><a href="#10-GateWay" class="headerlink" title="10. GateWay"></a>10. GateWay</h3><ul><li>Gateway是在Spring生态系统上构建的API网关服务，基于Spring5，Springboot2和Project Reactor等技术</li><li>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如：熔断，限流，重试等</li><li>SpringCloud Gateway是基于<strong>WebFlux</strong>框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架 <strong>Netty</strong></li></ul><p><strong>三大核心概念</strong></p><ul><li>Route(路由)<ul><li>路由是构建网关的基本模块，他由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</li></ul></li><li>Predicate(断言)<ul><li>参考java8中的java.util.function.Predicate</li><li>开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</li></ul></li><li>Filter(过滤)<ul><li>指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改</li></ul></li></ul><p>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。</p><p>predicate就是<strong>匹配条件</strong>；</p><p>而filter，可以理解为一个无所不能的<strong>拦截器</strong>。有这两个元素加上目标URI，就可以实现一个具体的路由</p><p>匹配方式就是<strong>断言</strong>，实现这个匹配方式就叫filter，对外表现出来就是路由的功能</p><p><strong>Gateway工作流程：</strong></p><ul><li>客户端向 Spring Cloud GateWay 发出请求，然后再Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler</li><li>Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回</li><li>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前(“pre”) 或 之后(“post”)执行业务逻辑</li><li>Filter在 “pre” 类型的过滤器可以做参数检验，权限校验，流量监控，日志输出，协议转换等</li><li>Filter在 “post”类型的过滤器中可以做响应内容，响应头的修改，日志的输出，流量监控等有着非常重要的作用</li></ul><p><strong>核心逻辑：路由转发+执行过滤器链</strong></p><h4 id="Gateway9527搭建"><a href="#Gateway9527搭建" class="headerlink" title="Gateway9527搭建"></a>Gateway9527搭建</h4><ul><li>建立module，修改pom和yml文件</li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">9528</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-gateway</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">gateway:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">locator:</span>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>      <span class="hljs-attr">routes:</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>          <span class="hljs-comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span>          <span class="hljs-attr">predicates:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/get/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>          <span class="hljs-comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span>          <span class="hljs-attr">predicates:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span>            <span class="hljs-comment">#- After=2020-02-21T15:51:37.485+08:00[Asia/Shanghai]</span>            <span class="hljs-comment">#- Cookie=username,zzyy</span>            <span class="hljs-comment">#- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">cloud-gateway-service</span>  <span class="hljs-attr">client:</span> <span class="hljs-comment">#服务提供者provider注册进eureka服务列表内</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://eureka7001.com:7001/eureka</span></code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-gateway-gateway9527<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--gateway--&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-gateway --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka-client--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--一般基础配置类--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><ul><li>然后打开7001，8001，9527，测试发现本来需要访问 <code>http://localhost:8001/payment/get/31</code> 才能查询得到，现在通过访问</li></ul><p><code>http://localhost:9528/payment/get/31</code>也可以得到，可以知道通过<strong>添加网关</strong>隐藏了端口号</p><ul><li>创建Config包下的类，使用编码的方式实现转发</li><li>配置一个id为route-name的路由规则</li><li>当访问地址http:localhost:9528/guonei时会自动转发到地址: <code>http://news.baidu.com/guonei</code></li></ul><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GateWayConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title">customRouteLocator</span><span class="hljs-params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();        routes.route(<span class="hljs-string">"path_route_atguigu"</span>,                r -&gt; r.path(<span class="hljs-string">"/guonei"</span>)                        .uri(<span class="hljs-string">"http://news.baidu.com/guonei"</span>)).build();        <span class="hljs-keyword">return</span> routes.build();    &#125;&#125;</code></pre><h4 id="GateWay配置动态路由"><a href="#GateWay配置动态路由" class="headerlink" title="GateWay配置动态路由"></a>GateWay配置动态路由</h4><ul><li>默认情况下GateWay会根据注册中心注册的服务列表，以注册中心上的微服务名为路径创建<strong>动态路由进行转发，从而实现动态路由的功能</strong></li><li>yml文件改动即可</li></ul><pre><code class="hljs yml"><span class="hljs-attr">gateway:</span>  <span class="hljs-attr">discovery:</span>    <span class="hljs-attr">locator:</span>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>  <span class="hljs-attr">routes:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>      <span class="hljs-comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span>      <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span>      <span class="hljs-attr">predicates:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/get/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment_routh2</span> <span class="hljs-comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span>      <span class="hljs-comment">#uri: http://localhost:8001          #匹配后提供服务的路由地址</span>      <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cloud-payment-service</span> <span class="hljs-comment">#匹配后提供服务的路由地址</span>      <span class="hljs-attr">predicates:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/lb/**</span>         <span class="hljs-comment"># 断言，路径相匹配的进行路由</span>        <span class="hljs-comment">#- After=2020-02-21T15:51:37.485+08:00[Asia/Shanghai]</span>        <span class="hljs-comment">#- Cookie=username,zzyy</span>        <span class="hljs-comment">#- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式</span></code></pre><h4 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h4><ul><li>在yml上加入各种参数即可，类似于cookie,between,after,before,head</li></ul><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><ul><li>生命周期<ul><li>pre</li><li>post</li></ul></li><li>种类<ul><li>GatewayFilter</li><li>GlobalFilter</li></ul></li><li>配置filter类，自定义filter</li><li>实现2个主要接口 <strong>GlobalFilter, Ordered</strong> </li></ul><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLogGateWayFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;        log.info(<span class="hljs-string">"******come in MyLogGateWayFilter:  "</span>+<span class="hljs-keyword">new</span> Date());        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="hljs-string">"uname"</span>);        <span class="hljs-keyword">if</span>(uname == <span class="hljs-keyword">null</span>)        &#123;            log.info(<span class="hljs-string">"****username == NULL ,illeagl user"</span>);            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();        &#125;        <span class="hljs-keyword">return</span> chain.filter(exchange);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;&#125;</code></pre><h3 id="11-Config"><a href="#11-Config" class="headerlink" title="11. Config"></a>11. Config</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ul><li>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中的，动态的配置管理设施是必不可少</li><li>SpringCloud提供了ConfigServer来解决这个问题，我们每个微服务都自己带有一个application.yml，上百个配置文件的管理</li><li>SpringCloud Config为微服务架构中的微服务提供集中式的外部配置支持，配置服务器为<strong>各个不同的微服务应用</strong>的所有环境提供了一个<strong>中心化的外部配置</strong></li><li>SpringCloud分为 <strong>服务端和客户端两部分</strong><ul><li>服务端也称分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息，配置服务器默认采取git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</li></ul></li></ul><h4 id="建立工程-cloud-config-center-3344"><a href="#建立工程-cloud-config-center-3344" class="headerlink" title="建立工程 cloud-config-center-3344"></a>建立工程 <strong>cloud-config-center-3344</strong></h4><ul><li>改动pom,yml文件</li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">3344</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span>  <span class="hljs-string">cloud-config-center</span> <span class="hljs-comment">#注册进Eureka服务器的微服务名</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">config:</span>      <span class="hljs-attr">server:</span>        <span class="hljs-attr">git:</span>          <span class="hljs-attr">uri:</span> <span class="hljs-string">https://github.com/fhawke/springcloud-config.git</span> <span class="hljs-comment">#GitHub上面的git仓库名字</span>          <span class="hljs-comment">####搜索目录</span>          <span class="hljs-attr">search-paths:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">springcloud-config</span>          <span class="hljs-attr">username:</span> <span class="hljs-number">7142220</span><span class="hljs-string">@qq.com</span>          <span class="hljs-attr">password:</span> <span class="hljs-string">20010521lsH</span>      <span class="hljs-comment">####读取分支</span>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><span class="hljs-comment">#rabbitmq相关配置</span><span class="hljs-comment">#rabbitmq:</span><span class="hljs-comment">#  host: localhost</span><span class="hljs-comment">#  port: 5672</span><span class="hljs-comment">#  username: guest</span><span class="hljs-comment">#  password: guest</span><span class="hljs-comment">#服务注册到eureka地址</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><span class="hljs-comment">##rabbitmq相关配置,暴露bus刷新配置的端点</span><span class="hljs-comment">#management:</span><span class="hljs-comment">#  endpoints: #暴露bus刷新配置的端点</span><span class="hljs-comment">#    web:</span><span class="hljs-comment">#      exposure:</span><span class="hljs-comment">#        include: 'bus-refresh'</span></code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-config-center-3344<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-bus-amqp --&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-bus-amqp --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-config-server --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>然后访问 <code>http://config-3344.com:3344/master/config-dev.yml</code>就可以得到github目录下master分支的config-dev.yml文件</p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201003212223708.png" srcset="/img/loading.gif" alt="image-20201003212223708"></p><h4 id="Config客户端-client"><a href="#Config客户端-client" class="headerlink" title="Config客户端 client"></a>Config客户端 client</h4><ul><li>建立项目，改动pom，yml文件，这里yml文件是 <strong>bootstrap.yml</strong></li><li><strong>bootstrap.yml</strong>是系统级的，优先级更高<ul><li>SpringCloud会创建一个 “ Bootstrap Context “，作为Spring应用的”Application Context”的父上下文，初始化的时候，Bootstrap Context负责从外部源加载配置属性并解析配置，这两个上下文共享一个从外部获取的 “Environment”</li><li><code>Bootstrap Context</code> 属性有高优先级，默认情况下，他们不会被本地配置覆盖</li></ul></li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">3355</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-comment">#Config客户端配置</span>    <span class="hljs-attr">config:</span>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#分支名称</span>      <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-comment">#配置文件名称</span>      <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:3344</span> <span class="hljs-comment">#配置中心地址k</span>      <span class="hljs-attr">username:</span> <span class="hljs-number">7142220</span><span class="hljs-string">@qq.com</span>      <span class="hljs-attr">password:</span> <span class="hljs-string">20010521lsH</span>  <span class="hljs-comment">#rabbitmq相关配置 15672是Web管理界面的端口；5672是MQ访问的端口</span><span class="hljs-comment">#  rabbitmq:</span><span class="hljs-comment">#    host: localhost</span><span class="hljs-comment">#    port: 5672</span><span class="hljs-comment">#    username: guest</span><span class="hljs-comment">#    password: guest</span><span class="hljs-comment">#服务注册到eureka地址</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span><span class="hljs-comment"># 暴露监控端点</span><span class="hljs-attr">management:</span>  <span class="hljs-attr">endpoints:</span>    <span class="hljs-attr">web:</span>      <span class="hljs-attr">exposure:</span>        <span class="hljs-attr">include:</span> <span class="hljs-string">"*"</span></code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-config-client-3355<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--添加消息总线RabbitMQ支持--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-config --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><ul><li>Controller类作测试</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigClientController</span> </span>&#123;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;config.info&#125;"</span>)    <span class="hljs-keyword">private</span> String configInfo;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/configInfo"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getConfigInfo</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> configInfo;    &#125;&#125;</code></pre><ul><li>测试通过，可以通过3344访问到github页面</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201003220333271.png" srcset="/img/loading.gif" alt="image-20201003220333271"></p><h4 id="分布式配置的动态刷新问题"><a href="#分布式配置的动态刷新问题" class="headerlink" title="分布式配置的动态刷新问题"></a>分布式配置的动态刷新问题</h4><ul><li><pre><code>加入@RefreshScope注解，开启刷新<pre><code class="hljs dts">- yml文件添加```yml<span class="hljs-meta"># 暴露监控端点</span><span class="hljs-symbol">management:</span><span class="hljs-symbol">  endpoints:</span><span class="hljs-symbol">    web:</span><span class="hljs-symbol">      exposure:</span><span class="hljs-symbol">        include:</span> <span class="hljs-string">"*"</span></code></pre></code></pre></li><li><p>每次从github上修改后都需要发送post请求,同样麻烦，如何处理？</p></li><li><p><strong>下节BUS消息队列</strong></p></li></ul><h3 id="12-Bus消息队列"><a href="#12-Bus消息队列" class="headerlink" title="12. Bus消息队列"></a>12. Bus消息队列</h3><p><strong>Spring Cloud Bus 配合Spring Cloud Config 使用可以实现配置的动态刷新</strong></p><p>Spring Cloud Bus 能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改，事件推送等，也可以当作微服务间的通信通道</p><h3 id="13-Stream"><a href="#13-Stream" class="headerlink" title="13. Stream"></a>13. Stream</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>新技术作用：不关注具体MQ细节，我们只需要用一种适配绑定的方式，自动的给我们在各种MQ中切换</p><p><strong>屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</strong></p><p><strong>Spring Cloud Stream 是一个构建消息驱动的框架</strong></p><p><strong>rabbitmq启动命令</strong></p><p><code>docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management</code></p><h4 id="创建消息驱动生产者8801"><a href="#创建消息驱动生产者8801" class="headerlink" title="创建消息驱动生产者8801"></a>创建消息驱动生产者8801</h4><ul><li>pom，yml文件</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-provider8801<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--基础配置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8801</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-stream-provider</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">stream:</span>      <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在此处配置要绑定的rabbitmq的服务信息；</span>        <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于于binding整合</span>          <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span> <span class="hljs-comment"># 消息组件类型</span>          <span class="hljs-attr">environment:</span> <span class="hljs-comment"># 设置rabbitmq的相关的环境配置</span>            <span class="hljs-attr">spring:</span>              <span class="hljs-attr">rabbitmq:</span>                <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.119</span><span class="hljs-number">.129</span>                <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>                <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>                <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span>      <span class="hljs-attr">bindings:</span> <span class="hljs-comment"># 服务的整合处理</span>        <span class="hljs-attr">output:</span> <span class="hljs-comment"># 这个名字是一个通道的名称</span>          <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span> <span class="hljs-comment"># 表示要使用的Exchange名称定义</span>          <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span> <span class="hljs-comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span>          <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span> <span class="hljs-comment"># 设置要绑定的消息服务的具体设置</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span> <span class="hljs-comment"># 客户端进行Eureka注册的配置</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 设置心跳的时间间隔（默认是30秒）</span>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 如果现在超过了5秒的间隔（默认是90秒）</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">send-8801.com</span>  <span class="hljs-comment"># 在信息列表时显示主机名称</span>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 访问的路径变为IP地址</span></code></pre><ul><li><p>service及其实现，此处不是调用dao，是调用消息组件的@input和@output，因此没有service接口，此处用来测试消息发送管道</p><ul><li><p>service</p></li><li><p>serviceimpl</p></li><li><p>controller</p></li></ul></li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.service.impl;<span class="hljs-keyword">import</span> com.atguigu.springcloud.service.IMessageProvider;<span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;<span class="hljs-keyword">import</span> org.springframework.cloud.stream.messaging.Source;<span class="hljs-keyword">import</span> org.springframework.messaging.MessageChannel;<span class="hljs-keyword">import</span> org.springframework.messaging.support.MessageBuilder;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> javax.annotation.Resource;<span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-meta">@EnableBinding</span>(Source<span class="hljs-class">.<span class="hljs-keyword">class</span>)        //定义消息的推送管道</span><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">MessageProviderImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IMessageProvider</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> MessageChannel output;  <span class="hljs-comment">//消息发送管道</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;        String serial = UUID.randomUUID().toString();        output.send(MessageBuilder.withPayload(serial).build());        System.out.println(<span class="hljs-string">"******serial: "</span>+serial);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IMessageProvider</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">send</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.service.impl;<span class="hljs-keyword">import</span> com.atguigu.springcloud.service.IMessageProvider;<span class="hljs-keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;<span class="hljs-keyword">import</span> org.springframework.cloud.stream.messaging.Source;<span class="hljs-keyword">import</span> org.springframework.messaging.MessageChannel;<span class="hljs-keyword">import</span> org.springframework.messaging.support.MessageBuilder;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> javax.annotation.Resource;<span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-meta">@EnableBinding</span>(Source<span class="hljs-class">.<span class="hljs-keyword">class</span>)        //定义消息的推送管道</span><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">MessageProviderImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IMessageProvider</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> MessageChannel output;  <span class="hljs-comment">//消息发送管道</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;        String serial = UUID.randomUUID().toString();        output.send(MessageBuilder.withPayload(serial).build());        System.out.println(<span class="hljs-string">"******serial: "</span>+serial);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><ul><li>启动7001，8801，rabbitmq，访问 <code>http://localhost:8801/sendMessage</code> 看到rabbitmq-management出现如下界面即可</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201006111928450.png" srcset="/img/loading.gif" alt="image-20201006111928450"></p><h4 id="消费者8802建立"><a href="#消费者8802建立" class="headerlink" title="消费者8802建立"></a>消费者8802建立</h4><ul><li>pom和yml文件</li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8802</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloud-stream-consumer</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">stream:</span>      <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在此处配置要绑定的rabbitmq的服务信息；</span>        <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于于binding整合</span>          <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span> <span class="hljs-comment"># 消息组件类型</span>          <span class="hljs-attr">environment:</span> <span class="hljs-comment"># 设置rabbitmq的相关的环境配置</span>            <span class="hljs-attr">spring:</span>              <span class="hljs-attr">rabbitmq:</span>                <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.119</span><span class="hljs-number">.129</span>                <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>                <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>                <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span>      <span class="hljs-attr">bindings:</span> <span class="hljs-comment"># 服务的整合处理</span>        <span class="hljs-attr">input:</span> <span class="hljs-comment"># 这个名字是一个通道的名称</span>          <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span> <span class="hljs-comment"># 表示要使用的Exchange名称定义</span>          <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span> <span class="hljs-comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span>          <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span> <span class="hljs-comment"># 设置要绑定的消息服务的具体设置</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span> <span class="hljs-comment"># 客户端进行Eureka注册的配置</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:7001/eureka</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 设置心跳的时间间隔（默认是30秒）</span>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 如果现在超过了5秒的间隔（默认是90秒）</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">receive-8802.com</span>  <span class="hljs-comment"># 在信息列表时显示主机名称</span>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 访问的路径变为IP地址</span></code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-consumer8802<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--基础配置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><ul><li>业务逻辑类只有controller，添加注解<code>@EnableBinding</code>进行绑定，参数为Sink.class </li><li>定义input方法，从message中拿消息 getPayload()，对应生产者的<code>MessageBuilder.withPayload(serial)</code>（把serial放进消息队列）</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@EnableBinding</span>(Sink<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">class</span> <span class="hljs-title">ReceiveMessageListenerController</span> </span>&#123;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;server.port&#125;"</span>)    <span class="hljs-keyword">private</span> String serverPort;    <span class="hljs-meta">@StreamListener</span>(Sink.INPUT)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">input</span><span class="hljs-params">(Message&lt;String&gt; message)</span></span>&#123;        System.out.println(<span class="hljs-string">"消费者1号,-----&gt;收到的消息:"</span>+message.getPayload()+<span class="hljs-string">"\t port:"</span>+serverPort);    &#125;&#125;</code></pre><ul><li>继续访问 <code>http://localhost:8801/sendMessage</code></li><li>看到以下结果即成功绑定，注意<strong>yml文件中主机地址是虚拟机地址</strong>（在我的电脑上是使用虚拟机docker）</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201006113648792.png" srcset="/img/loading.gif" alt="image-20201006113648792"></p><h4 id="再创建一个8803，会出现一系列问题"><a href="#再创建一个8803，会出现一系列问题" class="headerlink" title="再创建一个8803，会出现一系列问题"></a>再创建一个8803，会出现一系列问题</h4><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201006123643405.png" srcset="/img/loading.gif" alt="image-20201006123643405"></p><ul><li>有重复消费问题<ul><li>目前是8802/8803同时都收到了，存在重复问题</li><li><strong>如何解决：</strong>分组和持久化属性group</li><li>在Stream中，处于同一个组group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次</li><li><strong>不同组是可以全面消费的(重复消费)</strong></li><li><strong>同一组内会发生竞争关系，只有其中一个可以消费</strong></li></ul></li><li>消息持久化问题</li></ul><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><ul><li>原理：<ul><li>微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次。</li><li>不同的组是可以同时消费的，同一个组内存在竞争关系，只有其中一个可以被消费</li></ul></li><li>具体实现：<ul><li>只需要在yml文件中配置一个 <strong>group：</strong>，全部都加相同的组号就分到了相同的组</li></ul></li></ul><pre><code class="hljs yml"><span class="hljs-attr">cloud:</span>  <span class="hljs-attr">stream:</span>    <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在此处配置要绑定的rabbitmq的服务信息；</span>      <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于于binding整合</span>        <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span> <span class="hljs-comment"># 消息组件类型</span>        <span class="hljs-attr">environment:</span> <span class="hljs-comment"># 设置rabbitmq的相关的环境配置</span>          <span class="hljs-attr">spring:</span>            <span class="hljs-attr">rabbitmq:</span>              <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.119</span><span class="hljs-number">.129</span>              <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>              <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>              <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">bindings:</span> <span class="hljs-comment"># 服务的整合处理</span>      <span class="hljs-attr">input:</span> <span class="hljs-comment"># 这个名字是一个通道的名称</span>        <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span> <span class="hljs-comment"># 表示要使用的Exchange名称定义</span>        <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span> <span class="hljs-comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span>        <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span> <span class="hljs-comment"># 设置要绑定的消息服务的具体设置</span>        <span class="hljs-attr">group:</span> <span class="hljs-string">atguiguB</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">cloud:</span>  <span class="hljs-attr">stream:</span>    <span class="hljs-attr">binders:</span> <span class="hljs-comment"># 在此处配置要绑定的rabbitmq的服务信息；</span>      <span class="hljs-attr">defaultRabbit:</span> <span class="hljs-comment"># 表示定义的名称，用于于binding整合</span>        <span class="hljs-attr">type:</span> <span class="hljs-string">rabbit</span> <span class="hljs-comment"># 消息组件类型</span>        <span class="hljs-attr">environment:</span> <span class="hljs-comment"># 设置rabbitmq的相关的环境配置</span>          <span class="hljs-attr">spring:</span>            <span class="hljs-attr">rabbitmq:</span>              <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.119</span><span class="hljs-number">.129</span>              <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>              <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>              <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">bindings:</span> <span class="hljs-comment"># 服务的整合处理</span>      <span class="hljs-attr">input:</span> <span class="hljs-comment"># 这个名字是一个通道的名称</span>        <span class="hljs-attr">destination:</span> <span class="hljs-string">studyExchange</span> <span class="hljs-comment"># 表示要使用的Exchange名称定义</span>        <span class="hljs-attr">content-type:</span> <span class="hljs-string">application/json</span> <span class="hljs-comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span>        <span class="hljs-attr">binder:</span> <span class="hljs-string">defaultRabbit</span> <span class="hljs-comment"># 设置要绑定的消息服务的具体设置</span>        <span class="hljs-attr">group:</span> <span class="hljs-string">atguiguB</span></code></pre><h4 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h4><ul><li>只要加了<strong>group</strong>属性，就可以避免消息丢失<ul><li>当你删掉group关键字，停止服务，让生产者发送消息到Stream中，如果没有group，那么消息就会丢失，重新启动服务也无法接收到消息</li><li>只有配置了group关键字，即使微服务已经停止，在再次启动的时候也不会丢失，而是会正确接受</li></ul></li></ul><h3 id="14-Spring-Cloud-Sleuth"><a href="#14-Spring-Cloud-Sleuth" class="headerlink" title="14. Spring Cloud Sleuth"></a>14. Spring Cloud Sleuth</h3><h4 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h4><ul><li><strong>分布式请求链路跟踪</strong></li><li><strong>Spring Cloud Sleuth</strong>提供了一套完整的服务跟踪的解决方案<ul><li>在分布式系统中提供追踪解决方案并且兼容支持了zipkin</li><li>zipkin dashboard以图形化网页的方式体现了追踪的路线</li></ul></li><li>表示–请求链路，一条链路通过Trace ID唯一标识，Span标识发起的请求信息，各Span通过parent id关联起来</li><li>Trace：类似于树结构的Span集合，表示一条调用链路，存在唯一标识</li><li>Span：标识调用链路来源，通俗的理解Span就是一次请求信息</li></ul><h4 id="在docker中安装zipkin"><a href="#在docker中安装zipkin" class="headerlink" title="在docker中安装zipkin"></a>在docker中安装zipkin</h4><ul><li><code>docker search zipkin</code></li><li><code>docker pull openzipkin/zipkin</code></li><li><code>docker run -d -p 9411:9411 openzipkin/zipkin --restart=Always</code></li><li>启动后访问 <code>http://192.168.119.129:9411</code>,看到如下界面即代表成功</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201006195729892.png" srcset="/img/loading.gif" alt="image-20201006195729892"></p><ul><li>然后在8001，80文件中都加入controller测试方法</li></ul><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/payment/zipkin"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentZipkin</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"hi ,i'am paymentzipkin server fall back，welcome to atguigu，O(∩_∩)O哈哈~"</span>;&#125;</code></pre><ul><li>改动yml文件，加入配置</li></ul><pre><code class="hljs yml"><span class="hljs-attr">zipkin:</span>  <span class="hljs-attr">base-url:</span> <span class="hljs-string">http://192.168.119.129:9411</span><span class="hljs-attr">sleuth:</span>  <span class="hljs-attr">sampler:</span>  <span class="hljs-comment">#采样率值介于 0 到 1 之间，1 则表示全部采集</span>  <span class="hljs-attr">probability:</span> <span class="hljs-number">1</span></code></pre><ul><li><p>注意 <code>192.168.119.129</code>是虚拟机 <code>ifconfig</code>得到的地址</p></li><li><p>最后进行测试即可</p></li></ul><h3 id="15-SpringCloud-Alibaba"><a href="#15-SpringCloud-Alibaba" class="headerlink" title="15. SpringCloud Alibaba"></a>15. SpringCloud Alibaba</h3><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><ul><li>服务限流降级</li><li>服务注册与发现</li><li>分布式配置管理</li><li>消息驱动能力</li><li>阿里云对象存储</li><li>分布式任务调度</li></ul><h4 id="组件："><a href="#组件：" class="headerlink" title="组件："></a>组件：</h4><ul><li>Sentinel</li><li>Nacos</li><li>RocketMQ</li><li>Dubbo</li><li>Seata</li><li>Alibaba Cloud OSS</li><li>Alibaba Cloud SchedulerX</li></ul><h3 id="16-Nacos"><a href="#16-Nacos" class="headerlink" title="16. Nacos"></a>16. Nacos</h3><p><strong>服务注册和配置中心</strong>：</p><ul><li><p>Dynamic Naming and Configuration Service</p></li><li><p>一个更易于构建云原生应用的动态服务发现，配置管理和服务管理平台</p></li><li><p>Nacos就是注册中心 + 配置中心的组合</p></li><li><p>Nacos = Eureka + Config + Bus</p></li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007152511985.png" srcset="/img/loading.gif" alt="image-20201007152511985"></p><h4 id="注册payment9001服务提供者"><a href="#注册payment9001服务提供者" class="headerlink" title="注册payment9001服务提供者"></a>注册payment9001服务提供者</h4><ul><li>pom，yml文件</li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-payment-provider</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#配置Nacos地址</span><span class="hljs-attr">management:</span>  <span class="hljs-attr">endpoints:</span>    <span class="hljs-attr">web:</span>      <span class="hljs-attr">exposure:</span>        <span class="hljs-attr">include:</span> <span class="hljs-string">'*'</span></code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloudalibaba-provider-payment9001<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><ul><li>启动类注解</li></ul><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableDiscoveryClient</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentMain9001</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(PaymentMain9001<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">args</span>)</span>;    &#125;&#125;</code></pre><ul><li>controller类</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentController</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;server.port&#125;"</span>)    <span class="hljs-keyword">private</span> String serverPort;    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/payment/nacos/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPayment</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"nacos registry, serverPort: "</span>+ serverPort+<span class="hljs-string">"\t id"</span>+id;    &#125;&#125;</code></pre><ul><li>创建另一个提供者9011，但是这里可以使用<strong>copy</strong></li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007154635064.png" srcset="/img/loading.gif" alt="image-20201007154635064"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007154710137.png" srcset="/img/loading.gif" alt="image-20201007154710137"></p><ul><li>加入 <code>-DServer.port=9011</code>即可指定端口启动</li></ul><h4 id="服务消费者注册和负载"><a href="#服务消费者注册和负载" class="headerlink" title="服务消费者注册和负载"></a>服务消费者注册和负载</h4><p><strong>Nacos本身支持负载均衡</strong> : 原因是整合了ribbon，加@banlance注解就可以实现负载均衡</p><ul><li>建立83消费者</li><li>pom，yml，controller测试，config配置</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud2020<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloudalibaba-consumer-nacos-order83<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cloud-api-commons<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;project.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--日常通用jar包配置--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">83</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-order-consumer</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><span class="hljs-comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span><span class="hljs-attr">service-url:</span>  <span class="hljs-attr">nacos-user-service:</span> <span class="hljs-string">http://nacos-payment-provider</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@LoadBalanced</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderNacosController</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;service-url.nacos-user-service&#125;"</span>)    <span class="hljs-keyword">private</span> String serverURL;    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/consumer/payment/nacos/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">paymentInfo</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)</span>&#123;        <span class="hljs-keyword">return</span> restTemplate.getForObject(serverURL+<span class="hljs-string">"/payment/nacos/"</span>+id,String<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    &#125;&#125;</code></pre><ul><li><strong>nacos出现消费者，表示注册成功</strong></li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007160101513.png" srcset="/img/loading.gif" alt="image-20201007160101513"></p><ul><li>访问<code>http://localhost:83/consumer/payment/nacos/13</code>，测试负载均衡</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007160140195.png" srcset="/img/loading.gif" alt="image-20201007160140195">)<img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007160146479.png" srcset="/img/loading.gif" alt="image-20201007160146479"></p><ul><li>测试成功</li></ul><h4 id="Nacos服务注册中心对比提升"><a href="#Nacos服务注册中心对比提升" class="headerlink" title="Nacos服务注册中心对比提升"></a>Nacos服务注册中心对比提升</h4><p><strong>Nacos支持AP和CP，可以自主切换</strong></p><ul><li>a ：高可用性</li><li>c ：强一致性</li><li>p ：分区容错性</li></ul><h4 id="服务配置中心"><a href="#服务配置中心" class="headerlink" title="服务配置中心"></a>服务配置中心</h4><p><strong>替代Config</strong></p><ul><li>Nacos和Config一样，在项目初始化的时候，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动</li><li>Springboot中配置文件的加载是存在优先级顺序的，<font color="red">bootstrap 优先级高于 application</font></li><li>创建3377，改动yml文件</li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">3377</span><span class="hljs-comment">#此处可能存在端口被占用问题，请根据具体情况更改端口号</span><span class="hljs-comment">#bootstrap</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config-client</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span>      <span class="hljs-attr">config:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos作为配置中心地址</span>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment">#指定yaml格式的配置</span>        <span class="hljs-comment"># $&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><span class="hljs-comment"># nacos-config-client-dev.yaml</span><span class="hljs-comment"># nacos-config-client-test.yaml   ----&gt; config.info</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 表示开发环境</span>    <span class="hljs-comment">#active: test # 表示测试环境</span>    <span class="hljs-comment">#active: info</span>        <span class="hljs-comment">#application</span></code></pre><ul><li>这里要注意语法</li><li>在nacos网页上发布配置</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007190041969.png" srcset="/img/loading.gif" alt="image-20201007190041969"></p><ul><li><code>DataID</code>是以下格式</li></ul><p><code>${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}</code></p><p><code>nacos-config-client-dev.yaml</code></p><ul><li>测试：修改配置中的配置内容</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007190131225.png" srcset="/img/loading.gif" alt="image-20201007190131225"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007190143994.png" srcset="/img/loading.gif" alt="image-20201007190143994"></p><ul><li>通过访问 <code>http://localhost:8001/config/info</code>可以知道已经修改了，自动更改，不需要广播</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007190229414.png" srcset="/img/loading.gif" alt="image-20201007190229414"></p><p><strong>下面这张图明确显示了DataID的语法规则</strong></p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/Users\fhawk\AppData\Roaming\Typora\typora-user-images\image-20201007190332838.png" srcset="/img/loading.gif" alt="image-20201007190332838" style="zoom: 67%;"><h4 id="命名空间分组和DataID三者关系"><a href="#命名空间分组和DataID三者关系" class="headerlink" title="命名空间分组和DataID三者关系"></a>命名空间分组和DataID三者关系</h4><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/Users\fhawk\AppData\Roaming\Typora\typora-user-images\image-20201007190742440.png" srcset="/img/loading.gif" alt="image-20201007190742440" style="zoom:67%;"><p><strong>类似于Java里面的package名和类名</strong></p><p><strong>最外层的namespace是可以用于区分部署环境的，Group和DataID逻辑上区分两个目标对象</strong></p><ul><li>Nacos默认的命名空间是public，Namespace主要用来隔离</li><li>比如：现在有3个生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的</li><li>Group默认是DEFAULT_GROUP , GROUP可以把不同的微服务划分到同一个分组里面去</li><li>Service就是微服务，一个微服务可以包含多个Cluster（集群）</li><li>新建一个配置</li></ul><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/Users\fhawk\AppData\Roaming\Typora\typora-user-images\image-20201007192051574.png" srcset="/img/loading.gif" alt="image-20201007192051574" style="zoom: 67%;"><ul><li>指定环境<img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007191918526.png" srcset="/img/loading.gif" alt="image-20201007191918526"></li><li>进行测试 <code>http://localhost:8001/config/info</code></li><li>已经被更改 <img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007191958972.png" srcset="/img/loading.gif" alt="image-20201007191958972"></li><li>测试成功</li></ul><h4 id="Group分组方案"><a href="#Group分组方案" class="headerlink" title="Group分组方案"></a>Group分组方案</h4><ul><li><p>新建了2个分组 <img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007193337013.png" srcset="/img/loading.gif" alt="image-20201007193337013"></p></li><li><p>根据DATAID语法配置，注意group</p></li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007193406854.png" srcset="/img/loading.gif" alt="image-20201007193406854"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007193415116.png" srcset="/img/loading.gif" alt="image-20201007193415116">    </p><ul><li>访问 <code>http://localhost:8001/config/info</code>测试成功</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007193422860.png" srcset="/img/loading.gif" alt="image-20201007193422860"></p><h4 id="Namespace空间方案"><a href="#Namespace空间方案" class="headerlink" title="Namespace空间方案"></a>Namespace空间方案</h4><ul><li>定义命名空间，创建同一个命名空间下的不同组，并记录namespace</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007195953139.png" srcset="/img/loading.gif" alt="image-20201007195953139"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007200003758.png" srcset="/img/loading.gif" alt="image-20201007200003758"></p><ul><li><p>这样的配置下，访问 <code>http://localhost:8001/config/info</code>得到的就是<img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007200033598.png" srcset="/img/loading.gif" alt="image-20201007200033598"></p></li><li><p>也就是 <code>8e364a5f-e9e5-4319-b8b2-238afe28ed98</code>命名空间下，DEV组下的<code>nacos-config-client-dev.yaml</code></p></li></ul><h3 id="17-集群和持久化配置"><a href="#17-集群和持久化配置" class="headerlink" title="17. 集群和持久化配置"></a>17. 集群和持久化配置</h3><p>默认Nacos使用嵌入式数据库实现数据的存储。所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的，为了解决这个问题，Nacos使用了 <strong>集中式存储的方式来支持集群化部署，目前只支持MySQL的存储</strong></p><ul><li>这里进入/nacous/conf/ , 选定数据库执行nacos-mysql.sql语句，然后进入/nacous/conf/application.properties添加语句</li></ul><pre><code class="hljs mysql">### Count of DB: db.num&#x3D;1### Connect URL of DB: db.url.0&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;cache?characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true&amp;useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;UTC db.user&#x3D;root db.password&#x3D;123456</code></pre><ul><li>重启nacos服务，访问页面发现页面为全新页面，代表启动成功</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201007210437017.png" srcset="/img/loading.gif" alt="image-20201007210437017"></p><ul><li>在使用数据库持久化配置以后，任何在 <code>localhost:8844/nacous</code>页面作的修改都会保存到数据库中</li></ul><h4 id="Linux版本集群安装与部署"><a href="#Linux版本集群安装与部署" class="headerlink" title="Linux版本集群安装与部署"></a>Linux版本集群安装与部署</h4><ul><li>预计需要，一个Nginx + 3个nacos注册中心 </li></ul><p><strong>这次踩坑无数，等等一一记录，首先截图成功的界面</strong></p><ul><li>首先，3个nacos集群启动</li><li>命令执行过程，首先切换到<code>nacos/bin</code>目录，然后 <code>./startup.sh -p 3333/4444/5555</code>启动三个服务，由于本地内存不足只启动了2个</li><li>可以用 <code>ps -ef|grep nacos|grep -v grep|wc -l</code>来查询nacos进程数量</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201008173542679.png" srcset="/img/loading.gif" alt="image-20201008173542679"></p><ul><li>然后启动nginx，在root目录下执行以下命令 <code>nginx -c /etc/nginx/nginx.conf</code> 意思是以-c 后面的路径为配置文件启动niginx</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201008173608437.png" srcset="/img/loading.gif" alt="image-20201008173608437"></p><ul><li>首先验证nacos ,访问<code>http://192.168.119.129:3333/nacos</code>，进入以下界面代表nacos以集群方式启动成功</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201008173950522.png" srcset="/img/loading.gif" alt="image-20201008173950522"></p><ul><li>然后验证Nginx启动是否生效，访问 <code>http://192.168.119.129:1111/nacos</code> 如果出现以下界面则代表成功</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201008174034271.png" srcset="/img/loading.gif" alt="image-20201008174034271"></p><ul><li>那么接下来给出配置文件,第一个是nginix.conf(nginx),第二个是application.properties(nacos),第三个是startup.sh(nacos)</li></ul><pre><code class="hljs nginx"><span class="hljs-attribute">user</span> www-data;<span class="hljs-attribute">worker_processes</span> auto;<span class="hljs-attribute">pid</span> /run/nginx.pid;<span class="hljs-section">events</span> &#123;<span class="hljs-attribute">worker_connections</span> <span class="hljs-number">768</span>;<span class="hljs-comment"># multi_accept on;</span>&#125;<span class="hljs-section">http</span> &#123;<span class="hljs-comment">##</span><span class="hljs-comment"># Basic Settings</span><span class="hljs-comment">##</span><span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;<span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;<span class="hljs-attribute">types_hash_max_size</span> <span class="hljs-number">2048</span>;<span class="hljs-comment"># server_tokens off;</span><span class="hljs-comment"># server_names_hash_bucket_size 64;</span><span class="hljs-comment"># server_name_in_redirect off;</span><span class="hljs-attribute">include</span> /etc/nginx/mime.types;<span class="hljs-attribute">default_type</span> application/octet-stream;<span class="hljs-comment">##</span><span class="hljs-comment"># SSL Settings</span><span class="hljs-comment">##</span><span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>; <span class="hljs-comment"># Dropping SSLv3, ref: POODLE</span><span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<span class="hljs-comment">##</span><span class="hljs-comment"># Logging Settings</span><span class="hljs-comment">##</span><span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;<span class="hljs-attribute">error_log</span> /var/log/nginx/error.log;<span class="hljs-comment">##</span><span class="hljs-comment"># Gzip Settings</span><span class="hljs-comment">##</span><span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<span class="hljs-attribute">gzip_disable</span> <span class="hljs-string">"msie6"</span>;<span class="hljs-comment"># gzip_vary on;</span><span class="hljs-comment"># gzip_proxied any;</span><span class="hljs-comment"># gzip_comp_level 6;</span><span class="hljs-comment"># gzip_buffers 16 8k;</span><span class="hljs-comment"># gzip_http_version 1.1;</span><span class="hljs-comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><span class="hljs-comment">##</span><span class="hljs-comment"># Virtual Host Configs</span><span class="hljs-comment">##</span><span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<span class="hljs-attribute">include</span> /etc/nginx/sites-enabled/*;<span class="hljs-attribute">upstream</span> cluster&#123;            <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.119.129:3333</span>;            <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.119.129:4444</span>;            <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.119.129:5555</span>;&#125;<span class="hljs-section">server</span> &#123;        <span class="hljs-attribute">listen</span> <span class="hljs-number">1111</span>;        <span class="hljs-attribute">server_name</span> localhost;        <span class="hljs-attribute">location</span> / &#123;                <span class="hljs-attribute">proxy_pass</span> http://cluster;        &#125;    &#125;&#125;<span class="hljs-comment">#mail &#123;</span><span class="hljs-comment">## See sample authentication script at:</span><span class="hljs-comment">## http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span><span class="hljs-comment"># </span><span class="hljs-comment">## auth_http localhost/auth.php;</span><span class="hljs-comment">## pop3_capabilities "TOP" "USER";</span><span class="hljs-comment">## imap_capabilities "IMAP4rev1" "UIDPLUS";</span><span class="hljs-comment"># </span><span class="hljs-comment">#server &#123;</span><span class="hljs-comment">#listen     localhost:110;</span><span class="hljs-comment">#protocol   pop3;</span><span class="hljs-comment">#proxy      on;</span><span class="hljs-comment">#&#125;</span><span class="hljs-comment"># </span><span class="hljs-comment">#server &#123;</span><span class="hljs-comment">#listen     localhost:143;</span><span class="hljs-comment">#protocol   imap;</span><span class="hljs-comment">#proxy      on;</span><span class="hljs-comment">#&#125;</span><span class="hljs-comment">#&#125;</span></code></pre><pre><code class="hljs routeros"><span class="hljs-comment"># spring</span>server.<span class="hljs-attribute">contextPath</span>=/nacosserver.servlet.<span class="hljs-attribute">contextPath</span>=/nacosserver.<span class="hljs-attribute">port</span>=8848<span class="hljs-comment"># nacos.cmdb.dumpTaskInterval=3600</span><span class="hljs-comment"># nacos.cmdb.eventTaskInterval=10</span><span class="hljs-comment"># nacos.cmdb.labelTaskInterval=300</span><span class="hljs-comment"># nacos.cmdb.loadDataAtStart=false</span><span class="hljs-comment"># metrics for prometheus</span><span class="hljs-comment">#management.endpoints.web.exposure.include=*</span><span class="hljs-comment"># metrics for elastic search</span>management.metrics.export.elastic.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">false</span><span class="hljs-comment">#management.metrics.export.elastic.host=http://localhost:9200</span><span class="hljs-comment"># metrics for influx</span>management.metrics.export.influx.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">false</span><span class="hljs-comment">#management.metrics.export.influx.db=springboot</span><span class="hljs-comment">#management.metrics.export.influx.uri=http://localhost:8086</span><span class="hljs-comment">#management.metrics.export.influx.auto-create-db=true</span><span class="hljs-comment">#management.metrics.export.influx.consistency=one</span><span class="hljs-comment">#management.metrics.export.influx.compressed=true</span>server.tomcat.accesslog.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">true</span>server.tomcat.accesslog.<span class="hljs-attribute">pattern</span>=%h %l %u %t <span class="hljs-string">"%r"</span> %s %b %D %&#123;User-Agent&#125;i<span class="hljs-comment"># default current work dir</span>server.tomcat.basedir=<span class="hljs-comment">## spring security config</span><span class="hljs-comment">### turn off security</span><span class="hljs-comment">#spring.security.enabled=false</span><span class="hljs-comment">#management.security=false</span><span class="hljs-comment">#security.basic.enabled=false</span><span class="hljs-comment">#nacos.security.ignore.urls=/**</span>nacos.security.ignore.<span class="hljs-attribute">urls</span>=/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**<span class="hljs-comment"># nacos.naming.distro.taskDispatchPeriod=200</span><span class="hljs-comment"># nacos.naming.distro.batchSyncKeyCount=1000</span><span class="hljs-comment"># nacos.naming.distro.syncRetryDelay=5000</span><span class="hljs-comment"># nacos.naming.data.warmup=true</span><span class="hljs-comment"># nacos.naming.expireInstance=true</span>nacos.istio.mcp.server.<span class="hljs-attribute">enabled</span>=<span class="hljs-literal">false</span><span class="hljs-comment">######################################################</span> spring.datasource.<span class="hljs-attribute">platform</span>=mysql<span class="hljs-comment">### Count of DB:</span> db.<span class="hljs-attribute">num</span>=1<span class="hljs-comment">### Connect URL of DB:</span> db.url.<span class="hljs-attribute">0</span>=jdbc:mysql://localhost:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC db.<span class="hljs-attribute">user</span>=root db.<span class="hljs-attribute">password</span>=123456</code></pre><pre><code class="hljs routeros"><span class="hljs-comment">#!/bin/sh</span><span class="hljs-comment"># Copyright 1999-2018 Alibaba Group Holding Ltd.</span><span class="hljs-comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="hljs-comment"># you may not use this file except in compliance with the License.</span><span class="hljs-comment"># You may obtain a copy of the License at</span><span class="hljs-comment">#      http://www.apache.org/licenses/LICENSE-2.0</span><span class="hljs-comment">#</span><span class="hljs-comment"># Unless required by applicable law or agreed to in writing, software</span><span class="hljs-comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="hljs-comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="hljs-comment"># See the License for the specific language governing permissions and</span><span class="hljs-comment"># limitations under the License.</span><span class="hljs-attribute">cygwin</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">darwin</span>=<span class="hljs-literal">false</span><span class="hljs-attribute">os400</span>=<span class="hljs-literal">false</span>case <span class="hljs-string">"`uname`"</span> <span class="hljs-keyword">in</span>CYGWIN*) <span class="hljs-attribute">cygwin</span>=<span class="hljs-literal">true</span>;;Darwin*) <span class="hljs-attribute">darwin</span>=<span class="hljs-literal">true</span>;;OS400*) <span class="hljs-attribute">os400</span>=<span class="hljs-literal">true</span>;;esacerror_exit ()&#123;    echo <span class="hljs-string">"ERROR: <span class="hljs-variable">$1</span> !!"</span>    exit 1&#125;[ ! -e <span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>/bin/java"</span> ] &amp;&amp; <span class="hljs-attribute">JAVA_HOME</span>=<span class="hljs-variable">$HOME</span>/jdk/java[ ! -e <span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>/bin/java"</span> ] &amp;&amp; <span class="hljs-attribute">JAVA_HOME</span>=/usr/java[ ! -e <span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>/bin/java"</span> ] &amp;&amp; <span class="hljs-attribute">JAVA_HOME</span>=/opt/taobao/java[ ! -e <span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>/bin/java"</span> ] &amp;&amp; unset JAVA_HOME<span class="hljs-keyword">if</span> [ -z <span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>"</span> ]; then  <span class="hljs-keyword">if</span> <span class="hljs-variable">$darwin</span>; then    <span class="hljs-keyword">if</span> [ -x <span class="hljs-string">'/usr/libexec/java_home'</span> ] ; then      <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=`/usr/libexec/java_home`    elif [ -d <span class="hljs-string">"/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home"</span> ]; then      <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=<span class="hljs-string">"/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home"</span>    fi  <span class="hljs-keyword">else</span>    <span class="hljs-attribute">JAVA_PATH</span>=`dirname $(readlink -f $(which javac))`    <span class="hljs-keyword">if</span> [ <span class="hljs-string">"x<span class="hljs-variable">$JAVA_PATH</span>"</span> != <span class="hljs-string">"x"</span> ]; then      <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA_HOME</span>=`dirname <span class="hljs-variable">$JAVA_PATH</span> 2&gt;/dev/<span class="hljs-literal">null</span>`    fi  fi  <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>"</span> ]; then        error_exit <span class="hljs-string">"Please set the JAVA_HOME variable in your environment, We need java(x64)! jdk8 or later is better!"</span>  fifi<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">SERVER</span>=<span class="hljs-string">"nacos-server"</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">MODE</span>=<span class="hljs-string">"cluster"</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FUNCTION_MODE</span>=<span class="hljs-string">"all"</span><span class="hljs-keyword">while</span> getopts <span class="hljs-string">":m:f:s:p:"</span> opt<span class="hljs-keyword">do</span>    case <span class="hljs-variable">$opt</span> <span class="hljs-keyword">in</span>        m)            <span class="hljs-attribute">MODE</span>=<span class="hljs-variable">$OPTARG</span>;;        f)            <span class="hljs-attribute">FUNCTION_MODE</span>=<span class="hljs-variable">$OPTARG</span>;;        s)            <span class="hljs-attribute">SERVER</span>=<span class="hljs-variable">$OPTARG</span>;;p)    <span class="hljs-attribute">PORT</span>=<span class="hljs-variable">$OPTARG</span>;;        ?)        echo <span class="hljs-string">"Unknown parameter"</span>        exit 1;;    esacdone<span class="hljs-builtin-name">export</span> JAVA_HOME<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">JAVA</span>=<span class="hljs-string">"<span class="hljs-variable">$JAVA_HOME</span>/bin/java"</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">BASE_DIR</span>=`cd $(dirname <span class="hljs-variable">$0</span>)/<span class="hljs-built_in">..</span>; pwd`<span class="hljs-builtin-name">export</span> <span class="hljs-attribute">DEFAULT_SEARCH_LOCATIONS</span>=<span class="hljs-string">"classpath:/,classpath:/config/,file:./,file:./config/"</span><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CUSTOM_SEARCH_LOCATIONS</span>=<span class="hljs-variable">$&#123;DEFAULT_SEARCH_LOCATIONS&#125;</span>,file:$&#123;BASE_DIR&#125;/conf/<span class="hljs-comment">#===========================================================================================</span><span class="hljs-comment"># JVM Configuration</span><span class="hljs-comment">#===========================================================================================</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">"<span class="hljs-variable">$&#123;MODE&#125;</span>"</span> == <span class="hljs-string">"standalone"</span> ]]; then    <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Xms512m -Xmx512m -Xmn256m"</span>    <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.standalone=true"</span><span class="hljs-keyword">else</span>    <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span>    <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs/java_heapdump.hprof"</span>    <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -XX:-UseLargePages"</span>fi<span class="hljs-keyword">if</span> [[ <span class="hljs-string">"<span class="hljs-variable">$&#123;FUNCTION_MODE&#125;</span>"</span> == <span class="hljs-string">"config"</span> ]]; then    <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.functionMode=config"</span>elif [[ <span class="hljs-string">"<span class="hljs-variable">$&#123;FUNCTION_MODE&#125;</span>"</span> == <span class="hljs-string">"naming"</span> ]]; then    <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.functionMode=naming"</span>fi<span class="hljs-attribute">JAVA_MAJOR_VERSION</span>=$($JAVA -version 2&gt;&amp;1 | sed -E -n <span class="hljs-string">'s/.* version "([0-9]*).*$/\1/p'</span>)<span class="hljs-keyword">if</span> [[ <span class="hljs-string">"<span class="hljs-variable">$JAVA_MAJOR_VERSION</span>"</span> -ge <span class="hljs-string">"9"</span> ]] ; then  <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -cp .:<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/plugins/cmdb/*.jar:<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/plugins/mysql/*.jar"</span>  <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Xlog:gc*:file=<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs/nacos_gc.log:time,tags:filecount=10,filesize=102400"</span><span class="hljs-keyword">else</span>  <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Djava.ext.dirs=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre/lib/ext:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib/ext:<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/plugins/cmdb:<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/plugins/mysql"</span>  <span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Xloggc:<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M"</span>fi<span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.home=<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>"</span><span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Dloader.path=<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/plugins/health -jar <span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/target/<span class="hljs-variable">$&#123;SERVER&#125;</span>.jar"</span><span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> <span class="hljs-variable">$&#123;JAVA_OPT_EXT&#125;</span>"</span><span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> --spring.config.location=<span class="hljs-variable">$&#123;CUSTOM_SEARCH_LOCATIONS&#125;</span>"</span><span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> --logging.config=<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/conf/nacos-logback.xml"</span><span class="hljs-attribute">JAVA_OPT</span>=<span class="hljs-string">"<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> --server.max-http-header-size=524288"</span><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">"<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs"</span> ]; then  mkdir <span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logsfiecho <span class="hljs-string">"<span class="hljs-variable">$JAVA</span> <span class="hljs-variable">$&#123;JAVA_OPT&#125;</span>"</span><span class="hljs-keyword">if</span> [[ <span class="hljs-string">"<span class="hljs-variable">$&#123;MODE&#125;</span>"</span> == <span class="hljs-string">"standalone"</span> ]]; then    echo <span class="hljs-string">"nacos is starting with standalone"</span><span class="hljs-keyword">else</span>    echo <span class="hljs-string">"nacos is starting with cluster"</span>fi<span class="hljs-comment"># check the start.out log output file</span><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">"<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs/start.out"</span> ]; then  touch <span class="hljs-string">"<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs/start.out"</span>fi<span class="hljs-comment"># start</span>echo <span class="hljs-string">"<span class="hljs-variable">$JAVA</span> <span class="hljs-variable">$&#123;JAVA_OPT&#125;</span>"</span> &gt; <span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs/start.out 2&gt;&amp;1 &amp;nohup <span class="hljs-variable">$JAVA</span> -Dserver.<span class="hljs-attribute">port</span>=<span class="hljs-variable">$&#123;PORT&#125;</span> <span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> nacos.nacos &gt;&gt; <span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs/start.out 2&gt;&amp;1 &amp;echo <span class="hljs-string">"nacos is starting，you can check the <span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/logs/start.out"</span></code></pre><h3 id="18-Spring-Cloud-Sentinel"><a href="#18-Spring-Cloud-Sentinel" class="headerlink" title="18. Spring Cloud Sentinel"></a>18. Spring Cloud Sentinel</h3><p><strong>面向云原生微服务的流量控制，熔断降级组件</strong></p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">Sentinel官方</a></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009085201219.png" srcset="/img/loading.gif" alt="image-20201009085201219"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009085217698.png" srcset="/img/loading.gif" alt="image-20201009085217698"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009085226279.png" srcset="/img/loading.gif" alt="image-20201009085226279"></p><p><strong>sentinel下载与安装</strong></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009085809365.png" srcset="/img/loading.gif" alt="image-20201009085809365"></p><ul><li>直接下载dashboard到指定文件夹，然后cmd打开命令行，由于下载的是jar包，直接<code>java -jar sentinel-dashboard-1.7.1.jar</code> 就可以运行</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009085859925.png" srcset="/img/loading.gif" alt="image-20201009085859925"></p><ul><li>出现以下界面就代表启动成功，访问 <code>localhost:8080</code>,账户与密码均是 <code>sentinel</code></li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009090005047.png" srcset="/img/loading.gif" alt="image-20201009090005047"></p><ul><li>首先启动Nacos8848（standalone）</li><li>新建module <code>cloudalibaba-sentinel-service8401</code></li></ul><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8401</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">cloudalibaba-sentinel-service</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos服务注册中心地址</span>    <span class="hljs-attr">sentinel:</span>      <span class="hljs-attr">transport:</span>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span> <span class="hljs-comment">#配置Sentinel dashboard地址</span>        <span class="hljs-attr">port:</span> <span class="hljs-number">8719</span><span class="hljs-attr">management:</span>  <span class="hljs-attr">endpoints:</span>    <span class="hljs-attr">web:</span>      <span class="hljs-attr">exposure:</span>        <span class="hljs-attr">include:</span> <span class="hljs-string">'*'</span></code></pre><ul><li>主启动类增加注解，配置业务类</li></ul><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableDiscoveryClient</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlowLimitController</span> </span>&#123;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/testA"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testA</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"-------TestA"</span>;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/testB"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testB</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"-------TestB"</span>;    &#125;&#125;</code></pre><ul><li>启动nacos8848，启动sentinel8080，启动微服务8401，访问 <code>http://localhost:8401/testB</code><ul><li><strong>注意</strong> sentinel 是懒加载机制，如果不进行方法的访问，那么微服务并不会被检测到</li></ul></li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009092139061.png" srcset="/img/loading.gif" alt="image-20201009092139061"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009092146994.png" srcset="/img/loading.gif" alt="image-20201009092146994"></p><p><strong>微服务已经被注册进nacos和sentinel</strong></p><h4 id="sentinel监控配置："><a href="#sentinel监控配置：" class="headerlink" title="sentinel监控配置："></a>sentinel监控配置：</h4><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009092832809.png" srcset="/img/loading.gif" alt="image-20201009092832809"></p><ul><li><strong>QPS：</strong>每秒钟查询次数，当调用该api的QPS到达阈值的时候进行限流，可以开启<strong>高级选项</strong>来选择流控模式和流控效果，默认是直接-快速失败，返回以下界面</li><li><strong>线程数：</strong>当调用该api的线程数到达阈值的时候，进行限流</li><li>流控模式<ul><li>直接：api到达限流条件时，直接限流</li><li>关联：当关联的资源达到阈值时，就限流自己（B达到阈值，A限流） <strong>支付接口达到阈值，就限流订单接口</strong></li><li>链路：只记录指定链路上的数量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）【api级别的针对来源】</li></ul></li><li>流控效果<ul><li>快速失败：直接失败，抛异常</li><li>Warm up：根据codeFactot（冷加载因子，默认3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值</li><li></li></ul></li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009092952147.png" srcset="/img/loading.gif" alt="image-20201009092952147"></p><h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p><strong>使用postman并发，持续访问testB</strong><br><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009143817559.png" srcset="/img/loading.gif" alt="image-20201009143817559"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009143842570.png" srcset="/img/loading.gif" alt="image-20201009143842570"></p><p><strong>此时访问A出现</strong> <img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009143906234.png" srcset="/img/loading.gif" alt="image-20201009143906234"></p><p><strong>一直访问B，导致B到达阈值，因此和B关联的A受到限流处理</strong></p><h4 id="预热"><a href="#预热" class="headerlink" title="预热"></a>预热</h4><ul><li><strong>Warm up</strong>：根据codeFactot（冷加载因子，默认3）的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值</li><li>让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间</li><li>默认codeFactor（冷加载因子）为3，经过预热时长后才会达到阈值</li></ul><p><strong>设置</strong></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009144922576.png" srcset="/img/loading.gif" alt="image-20201009144922576"></p><h4 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h4><p>匀速排队，让请求以均匀的速度通过，阈值类型必须设成QPS，否则无效</p><p>设置含义：/testA每秒一次请求，超过的话就排队等待，等待的超时时间为20000ms</p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009145123539.png" srcset="/img/loading.gif" alt="image-20201009145123539"></p><p>应对场景：比如消息队列，前一秒有大量的请求，后一秒通道空闲，排队等待可以让一些请求在空闲的时间段进行处理，而不是简单的拒绝请求，对于时延不敏感的应用可以使用</p><h4 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h4><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009150439510.png" srcset="/img/loading.gif" alt="image-20201009150439510"></p><ul><li><p><strong>sentinel熔断降级</strong>会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其他的资源而导致级联错误</p></li><li><p>当资源被降级后，在接下来的降级时间窗口之内，对该资源的调用都自动熔断（默认行为是抛出DegradeException）</p></li></ul><p><strong>sentinel的断路器没有半开状态</strong></p><ul><li>半开的状态系统自动去检测是否请求有异常，没有异常就关闭断路器恢复使用，有异常就继续打开断路器不可用，也就是Hystrix的设计原理</li></ul><h4 id="热点key限流"><a href="#热点key限流" class="headerlink" title="热点key限流"></a>热点key限流</h4><p><strong>@SentinelResource和@HystrixCommand极其相似</strong></p><ul><li>下面是sentinel网页端的设置界面，在热点规则里面添加配置，资源名和 <code>@SentinelResource</code>注解中的value相同</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009154925406.png" srcset="/img/loading.gif" alt="image-20201009154925406"></p><ul><li>在controller中增加测试方法和配置</li></ul><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/testHotKey"</span>)<span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">"testHotKey"</span>,blockHandler = <span class="hljs-string">"deal_testHotKey"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testHotKey</span><span class="hljs-params">(@RequestParam(value = <span class="hljs-string">"p1"</span>,required = <span class="hljs-keyword">false</span>)</span>String p1,</span><span class="hljs-function">                         @<span class="hljs-title">RequestParam</span><span class="hljs-params">(value = <span class="hljs-string">"p2"</span>,required = <span class="hljs-keyword">false</span>)</span>String p2)</span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"------testHotKey"</span>;&#125;</code></pre><ul><li><p>上述代码中， <code>@SentinelResource(value = &quot;testHotKey&quot;,blockHandler = &quot;deal_testHotKey&quot;)</code>需要注意</p></li><li><p>参数 <code>value = &quot;testHotKey&quot;</code>表示指定了资源名， <code>blockHandler = &quot;deal_testHotKey&quot;</code>表示指定了兜底方法，</p></li><li><p>指定方法后，在下面添加一个方法，名字和 <code>blockHandler设置的value一样</code></p></li></ul><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deal_testHotKey</span><span class="hljs-params">(String p1, String p2, BlockException exception)</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">"------deal_testHotKey,/(ㄒoㄒ)/~~"</span>;&#125;</code></pre><ul><li>这样，限流后，超出设定时显示的页面就是自己定义的页面 <img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009155018141.png" srcset="/img/loading.gif" alt="image-20201009155018141"></li></ul><h5 id="参数例外项"><a href="#参数例外项" class="headerlink" title="参数例外项"></a>参数例外项</h5><ul><li>打开高级选项，可以额外设置参数，让某种参数限流阈值和其他参数不同</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009160919589.png" srcset="/img/loading.gif" alt="image-20201009160919589"></p><ul><li><p>访问<code>http://localhost:8401/testHotKey?p1=5</code>，不被限流，而 <code>p1=a</code>时，一秒一次以上的访问量就会限流</p></li><li><p>注意，java 的RuntimeException ，@SentinelResource的兜底方法不进行处理</p></li></ul><h4 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h4><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009164550019.png" srcset="/img/loading.gif" alt="image-20201009164550019"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009164609780.png" srcset="/img/loading.gif" alt="image-20201009164609780"></p><h4 id="SentinelResource"><a href="#SentinelResource" class="headerlink" title="@SentinelResource"></a>@SentinelResource</h4><ul><li>两种情况，一种按Resource访问，一种按URL访问</li></ul><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/byResource"</span>)<span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">"byResource"</span>,blockHandler = <span class="hljs-string">"handleException"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">byResource</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">200</span>,<span class="hljs-string">"按资源名称限流测试ok"</span>,<span class="hljs-keyword">new</span> Payment(<span class="hljs-number">2020L</span>,<span class="hljs-string">"serial001"</span>));&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">handleException</span><span class="hljs-params">(BlockException exception)</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">444</span>,exception.getClass().getCanonicalName()+<span class="hljs-string">"\t"</span>+<span class="hljs-string">"服务不可用"</span>);&#125;</code></pre><ul><li><strong>这种自己配置指定了兜底方法</strong></li></ul><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/rateLimit/byUrl"</span>)<span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">"byUrl"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">byUrl</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">200</span>,<span class="hljs-string">"按URL限流测试ok"</span>,<span class="hljs-keyword">new</span> Payment(<span class="hljs-number">2020L</span>,<span class="hljs-string">"serial002"</span>));&#125;</code></pre><ul><li><strong>这种使用Sentinel默认的兜底方法</strong></li></ul><p><strong>以上情况都有缺点</strong></p><ul><li>系统默认的，没有体现我们自己的业务要求</li><li>依照现有条件，我们自定义的处理方法又和业务代码耦合在一起，不直观</li><li>每个业务方法都添加一个兜底方法，代码膨胀加剧</li><li>全局统一的处理方法没有体现</li></ul><h4 id="自己配置，将兜底方法提取到一个类中进行调用"><a href="#自己配置，将兜底方法提取到一个类中进行调用" class="headerlink" title="自己配置，将兜底方法提取到一个类中进行调用"></a>自己配置，将兜底方法提取到一个类中进行调用</h4><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009171522470.png" srcset="/img/loading.gif" alt="image-20201009171522470"></p><p><strong>CustomBlockHandler</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomBlockHandler</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResult <span class="hljs-title">handlerException</span><span class="hljs-params">(BlockException exception)</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">4444</span>,<span class="hljs-string">"按客户自定义,global handler Exception------1"</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CommonResult <span class="hljs-title">handleException2</span><span class="hljs-params">(BlockException exception)</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">4444</span>,<span class="hljs-string">"按客户自定义,global handler Exception------2"</span>);    &#125;&#125;</code></pre><p><strong>controller业务类进行改动</strong></p><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/byResource"</span>)<span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">"byResource"</span>,        blockHandlerClass = CustomBlockHandler<span class="hljs-class">.<span class="hljs-keyword">class</span>,</span><span class="hljs-class">        <span class="hljs-title">blockHandler</span> </span>= <span class="hljs-string">"handlerException"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">byResource</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">200</span>,<span class="hljs-string">"按资源名称限流测试ok"</span>,<span class="hljs-keyword">new</span> Payment(<span class="hljs-number">2020L</span>,<span class="hljs-string">"serial001"</span>));&#125;<span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/rateLimit/CustomBlockHandler"</span>)    <span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">"CustomBlockHandler"</span>,            blockHandlerClass = CustomBlockHandler<span class="hljs-class">.<span class="hljs-keyword">class</span>,</span><span class="hljs-class">            <span class="hljs-title">blockHandler</span> </span>= <span class="hljs-string">"handleException2"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">CustomBlockHandler</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">200</span>,<span class="hljs-string">"按客户自定义"</span>,<span class="hljs-keyword">new</span> Payment(<span class="hljs-number">2020L</span>,<span class="hljs-string">"serial003"</span>));    &#125;</code></pre><ul><li>注意看注解 <code>blockHandlerClass = CustomBlockHandler.class</code> <code>blockHandler = &quot;handlerException&quot;</code></li><li>首先指定类名，然后指定方法，这样就可以指定别的包下的兜底方法，让代码耦合度降低</li></ul><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><ul><li>controller类，业务代码</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf</span>4j<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleBreakerController</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SERVICE_URL = <span class="hljs-string">"http://nacos-payment-provider"</span>;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/consumer/fallback/&#123;id&#125;"</span>)    <span class="hljs-meta">@SentinelResource</span>(value = <span class="hljs-string">"fallback"</span>,            fallback = <span class="hljs-string">"handlerFallback"</span>,            blockHandler = <span class="hljs-string">"blockHandler"</span>,            exceptionsToIgnore = &#123;IllegalArgumentException<span class="hljs-class">.<span class="hljs-keyword">class</span>&#125;)</span><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">CommonResult</span>&lt;<span class="hljs-title">Payment</span>&gt; <span class="hljs-title">fallback</span>(@<span class="hljs-title">PathVariable</span> <span class="hljs-title">Long</span> <span class="hljs-title">id</span>)</span>&#123;        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL+<span class="hljs-string">"/paymentSQL/"</span>+id,CommonResult<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">id</span>)</span>;        <span class="hljs-keyword">if</span>(id == <span class="hljs-number">4</span>)&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"IllegalArgumentException非法参数异常"</span>);        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result.getData()==<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">"NullPointerException,该ID没有对应记录，空指针异常"</span>);        &#125;        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">handlerFallback</span><span class="hljs-params">(@PathVariable  Long id,Throwable e)</span> </span>&#123;        Payment payment = <span class="hljs-keyword">new</span> Payment(id,<span class="hljs-string">"null"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult&lt;&gt;(<span class="hljs-number">444</span>,<span class="hljs-string">"兜底异常handlerFallback,exception内容  "</span>+e.getMessage(),payment);    &#125;    <span class="hljs-comment">//本例是blockHandler</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">blockHandler</span><span class="hljs-params">(@PathVariable  Long id, BlockException blockException)</span> </span>&#123;        Payment payment = <span class="hljs-keyword">new</span> Payment(id,<span class="hljs-string">"null"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult&lt;&gt;(<span class="hljs-number">445</span>,<span class="hljs-string">"blockHandler-sentinel限流,无此流水: blockException  "</span>+blockException.getMessage(),payment);    &#125;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> PaymentService paymentService;    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/consumer/paymentSQL/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">paymentSQL</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)</span>&#123;        <span class="hljs-keyword">return</span> paymentService.paymentSQL(id);    &#125;&#125;</code></pre><ul><li>config，调用restTemplate</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationContextConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@LoadBalanced</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;&#125;</code></pre><ul><li>service层，调用openfeign框架</li></ul><pre><code class="hljs java"><span class="hljs-meta">@FeignClient</span>(value = <span class="hljs-string">"nacos-payment-provider"</span>,fallback = PaymentFallbackService<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span><span class="hljs-class"><span class="hljs-title">public</span> <span class="hljs-title">interface</span> <span class="hljs-title">PaymentService</span> </span>&#123;    <span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/paymentSQL/&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">paymentSQL</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Long id)</span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentFallbackService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PaymentService</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">paymentSQL</span><span class="hljs-params">(Long id)</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult&lt;&gt;(<span class="hljs-number">44444</span>,<span class="hljs-string">"服务降级返回，-----PaymentFallbackService"</span>,<span class="hljs-keyword">new</span> Payment(id,<span class="hljs-string">"errorSerial"</span>));    &#125;&#125;</code></pre><ul><li>yml文件配置</li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">84</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-order-consumer</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span>    <span class="hljs-attr">sentinel:</span>      <span class="hljs-attr">transport:</span>        <span class="hljs-comment">#配置Sentinel dashboard地址</span>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span>        <span class="hljs-comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span>        <span class="hljs-attr">port:</span> <span class="hljs-number">8719</span><span class="hljs-comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span><span class="hljs-attr">service-url:</span>  <span class="hljs-attr">nacos-user-service:</span> <span class="hljs-string">http://nacos-payment-provider</span><span class="hljs-comment"># 激活Sentinel对Feign的支持</span><span class="hljs-attr">feign:</span>  <span class="hljs-attr">sentinel:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span></code></pre><ul><li>当<code>blockHandler</code> 和 <code>handlerFallback</code>同时出现时，如果出现降级将会调用<code>blockHandler</code> </li><li>当配置<code>exceptionsToIgnore = {IllegalArgumentException.class}</code>这个参数，那么就不走带有 <code>IllegalArgumentException</code>的兜底方法</li></ul><h4 id="Sentinel持久化规则"><a href="#Sentinel持久化规则" class="headerlink" title="Sentinel持久化规则"></a>Sentinel持久化规则</h4><ul><li>一旦我们重启应用，sentinel规则将消失，生产环境需要将配置规则进行持久化</li><li>将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除，针对8401上sentinel的流控规则就持续有效</li></ul><p><strong>配置json字符串</strong></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009195203839.png" srcset="/img/loading.gif" alt="image-20201009195203839"></p><pre><code class="hljs json">[    &#123;        <span class="hljs-attr">"resource"</span>: <span class="hljs-string">"/rateLimit/byUrl"</span>,        <span class="hljs-attr">"limitApp"</span>: <span class="hljs-string">"default"</span>,        <span class="hljs-attr">"grade"</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">"count"</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">"strategy"</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">"controBehavior"</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">"clusterMode"</span>: <span class="hljs-literal">false</span>    &#125;]</code></pre><ul><li>这样配置以后就做到了持久化配置，也就是说已经将规则注册到了nacos中，dashboard中只要8401启动，(重启后需要访问以下对应持久化的rest)那么就会出现流控规则，重启后也不会删除</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201009195603610.png" srcset="/img/loading.gif" alt="image-20201009195603610"></p><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h3 id="18-SpringCloud-Alibaba-Seata"><a href="#18-SpringCloud-Alibaba-Seata" class="headerlink" title="18. SpringCloud Alibaba Seata"></a>18. SpringCloud Alibaba Seata</h3><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><ul><li>一次业务操作需要跨多个数据源或需要多个系统进行远程调用，就会产生分布式事务问题</li><li>保证全局数据一致性问题</li></ul><h4 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h4><p><strong>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</strong></p><p><strong>TC (Transaction Coordinator) - 事务协调者</strong></p><p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><p><strong>TM (Transaction Manager) - 事务管理器</strong></p><p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><p><strong>RM (Resource Manager) - 资源管理器</strong></p><p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><h4 id="业务测试"><a href="#业务测试" class="headerlink" title="业务测试"></a>业务测试</h4><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201010160908787.png" srcset="/img/loading.gif" alt="image-20201010160908787"></p><p>创建三个数据库</p><pre><code class="hljs mysql">create database seata_order;USE seata_order;CREATE TABLE &#96;t_order&#96;  (  &#96;id&#96; bigint(11) NOT NULL AUTO_INCREMENT,  &#96;user_id&#96; bigint(20) DEFAULT NULL COMMENT &#39;用户id&#39;,  &#96;product_id&#96; bigint(11) DEFAULT NULL COMMENT &#39;产品id&#39;,  &#96;count&#96; int(11) DEFAULT NULL COMMENT &#39;数量&#39;,  &#96;money&#96; decimal(11, 0) DEFAULT NULL COMMENT &#39;金额&#39;,  &#96;status&#96; int(1) DEFAULT NULL COMMENT &#39;订单状态:  0:创建中 1:已完结&#39;,  PRIMARY KEY (&#96;id&#96;) USING BTREE) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci COMMENT &#x3D; &#39;订单表&#39; ROW_FORMAT &#x3D; Dynamic;CREATE TABLE &#96;undo_log&#96; (  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,  &#96;branch_id&#96; bigint(20) NOT NULL,  &#96;xid&#96; varchar(100) NOT NULL,  &#96;context&#96; varchar(128) NOT NULL,  &#96;rollback_info&#96; longblob NOT NULL,  &#96;log_status&#96; int(11) NOT NULL,  &#96;log_created&#96; datetime NOT NULL,  &#96;log_modified&#96; datetime NOT NULL,  &#96;ext&#96; varchar(100) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;),  UNIQUE KEY &#96;ux_undo_log&#96; (&#96;xid&#96;,&#96;branch_id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;create database seata_storage;USE seata_storage;DROP TABLE IF EXISTS &#96;t_storage&#96;;CREATE TABLE &#96;t_storage&#96;  (  &#96;id&#96; bigint(11) NOT NULL AUTO_INCREMENT,  &#96;product_id&#96; bigint(11) DEFAULT NULL COMMENT &#39;产品id&#39;,  &#96;total&#96; int(11) DEFAULT NULL COMMENT &#39;总库存&#39;,  &#96;used&#96; int(11) DEFAULT NULL COMMENT &#39;已用库存&#39;,  &#96;residue&#96; int(11) DEFAULT NULL COMMENT &#39;剩余库存&#39;,  PRIMARY KEY (&#96;id&#96;) USING BTREE) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci COMMENT &#x3D; &#39;库存&#39; ROW_FORMAT &#x3D; Dynamic;INSERT INTO &#96;t_storage&#96; VALUES (1, 1, 100, 0, 100);CREATE TABLE &#96;undo_log&#96; (  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,  &#96;branch_id&#96; bigint(20) NOT NULL,  &#96;xid&#96; varchar(100) NOT NULL,  &#96;context&#96; varchar(128) NOT NULL,  &#96;rollback_info&#96; longblob NOT NULL,  &#96;log_status&#96; int(11) NOT NULL,  &#96;log_created&#96; datetime NOT NULL,  &#96;log_modified&#96; datetime NOT NULL,  &#96;ext&#96; varchar(100) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;),  UNIQUE KEY &#96;ux_undo_log&#96; (&#96;xid&#96;,&#96;branch_id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;CREATE database seata_account;USE seata_account;DROP TABLE IF EXISTS &#96;t_account&#96;;CREATE TABLE &#96;t_account&#96;  (  &#96;id&#96; bigint(11) NOT NULL COMMENT &#39;id&#39;,  &#96;user_id&#96; bigint(11) DEFAULT NULL COMMENT &#39;用户id&#39;,  &#96;total&#96; decimal(10, 0) DEFAULT NULL COMMENT &#39;总额度&#39;,  &#96;used&#96; decimal(10, 0) DEFAULT NULL COMMENT &#39;已用余额&#39;,  &#96;residue&#96; decimal(10, 0) DEFAULT NULL COMMENT &#39;剩余可用额度&#39;,  PRIMARY KEY (&#96;id&#96;) USING BTREE) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci COMMENT &#x3D; &#39;账户表&#39; ROW_FORMAT &#x3D; Dynamic;INSERT INTO &#96;t_account&#96; VALUES (1, 1, 1000, 0, 1000);CREATE TABLE &#96;undo_log&#96; (  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,  &#96;branch_id&#96; bigint(20) NOT NULL,  &#96;xid&#96; varchar(100) NOT NULL,  &#96;context&#96; varchar(128) NOT NULL,  &#96;rollback_info&#96; longblob NOT NULL,  &#96;log_status&#96; int(11) NOT NULL,  &#96;log_created&#96; datetime NOT NULL,  &#96;log_modified&#96; datetime NOT NULL,  &#96;ext&#96; varchar(100) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;),  UNIQUE KEY &#96;ux_undo_log&#96; (&#96;xid&#96;,&#96;branch_id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;</code></pre><p>在每个数据库下面都执行下面语句，以记录日志</p><pre><code class="hljs mysql">-- the table to store seata xid data-- 0.7.0+ add context-- you must to init this sql for you business databese. the seata server not need it.-- 此脚本必须初始化在你当前的业务数据库中，用于AT 模式XID记录。与server端无关（注：业务数据库）-- 注意此处0.3.0+ 增加唯一索引 ux_undo_logdrop table &#96;undo_log&#96;;CREATE TABLE &#96;undo_log&#96; (  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,  &#96;branch_id&#96; bigint(20) NOT NULL,  &#96;xid&#96; varchar(100) NOT NULL,  &#96;context&#96; varchar(128) NOT NULL,  &#96;rollback_info&#96; longblob NOT NULL,  &#96;log_status&#96; int(11) NOT NULL,  &#96;log_created&#96; datetime NOT NULL,  &#96;log_modified&#96; datetime NOT NULL,  &#96;ext&#96; varchar(100) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;),  UNIQUE KEY &#96;ux_undo_log&#96; (&#96;xid&#96;,&#96;branch_id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;</code></pre><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201010163142982.png" srcset="/img/loading.gif" alt="image-20201010163142982"></p><p>创建完成</p><h4 id="搭建业务代码"><a href="#搭建业务代码" class="headerlink" title="搭建业务代码"></a>搭建业务代码</h4><ul><li>业务需求：<code>下订单--&gt;减库存--&gt;扣余额--&gt;改（订单）状态</code></li><li>三个module <code>seata-order-sevice2001</code> <code>seata-storage-service2002</code> <code>seata-account-service2003</code></li><li>Config类配置 <code>DatasourceProxyConfig</code> <code>MyBatisConfig</code></li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.alibaba.config;<span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<span class="hljs-keyword">import</span> io.seata.rm.datasource.DataSourceProxy;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;<span class="hljs-keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> zzyy</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2020-02-26 16:24</span><span class="hljs-comment"> * 使用Seata对数据源进行代理</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceProxyConfig</span> </span>&#123;    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;mybatis.mapperLocations&#125;"</span>)    <span class="hljs-keyword">private</span> String mapperLocations;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"spring.datasource"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">druidDataSource</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DruidDataSource();    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSourceProxy <span class="hljs-title">dataSourceProxy</span><span class="hljs-params">(DataSource dataSource)</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DataSourceProxy(dataSource);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">sqlSessionFactoryBean</span><span class="hljs-params">(DataSourceProxy dataSourceProxy)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();        sqlSessionFactoryBean.setDataSource(dataSourceProxy);        sqlSessionFactoryBean.setMapperLocations(<span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));        sqlSessionFactoryBean.setTransactionFactory(<span class="hljs-keyword">new</span> SpringManagedTransactionFactory());        <span class="hljs-keyword">return</span> sqlSessionFactoryBean.getObject();    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.alibaba.config;<span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@auther</span> zzyy</span><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2019-12-11 16:57</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@MapperScan</span>(&#123;<span class="hljs-string">"com.atguigu.springcloud.alibaba.dao"</span>&#125;)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisConfig</span> </span>&#123;&#125;</code></pre><ul><li>此处只给出order项目的配置，因为是核心类，其他项目业务代码无太大差别</li><li>首先，Config已经给出，那么我们先写<code>domain</code>下的实体类 <code>order</code>和 消息返回格式类<code>CommonResult</code></li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.alibaba.domain;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-keyword">import</span> java.math.BigDecimal;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> Long userId;    <span class="hljs-keyword">private</span> Long productId;    <span class="hljs-keyword">private</span> Integer count;    <span class="hljs-keyword">private</span> BigDecimal money;    <span class="hljs-keyword">private</span> Integer status; <span class="hljs-comment">//订单状态：0：创建中；1：已完结</span>&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.springcloud.alibaba.domain;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonResult</span>&lt;<span class="hljs-title">T</span>&gt;</span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> Integer code;    <span class="hljs-keyword">private</span> String  message;    <span class="hljs-keyword">private</span> T       data;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CommonResult</span><span class="hljs-params">(Integer code, String message)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">this</span>(code,message,<span class="hljs-keyword">null</span>);    &#125;&#125;</code></pre><ul><li>数据库字段</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011103018057.png" srcset="/img/loading.gif" alt="image-20201011103018057"></p><ul><li>然后写dao层接口，定义create方法接口，定义参数让service实现</li></ul><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderDao</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-comment">//1 新建订单</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">(Order order)</span></span>;    <span class="hljs-comment">//2 修改订单状态，从零改为1</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(@Param(<span class="hljs-string">"userId"</span>)</span> Long userId,@<span class="hljs-title">Param</span><span class="hljs-params">(<span class="hljs-string">"status"</span>)</span> Integer status)</span>;&#125;</code></pre><ul><li>Service层分接口和impl实现类，首先看接口，接口与dao一样，但是这里是seata微服务调用，使用了openfeign，调用了其他类中的微服务方法，那么我们需要有3个service接口，以及在controller中调用这三个，impl实现了业务代码，所以他需要调用三个service接口，然后进行业务逻辑的处理，是业务代码的核心，这里调用了所有的微服务方法进行处理，符合了上文所说的 <code>下订单--&gt;减库存--&gt;扣余额--&gt;改（订单）状态</code> <img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011103225543.png" srcset="/img/loading.gif" alt="image-20201011103225543"></li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">(Order order)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@FeignClient</span>(value = <span class="hljs-string">"seata-account-service"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountService</span></span>&#123;    <span class="hljs-meta">@PostMapping</span>(value = <span class="hljs-string">"/account/decrease"</span>)    <span class="hljs-function">CommonResult <span class="hljs-title">decrease</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"userId"</span>)</span>Long userId,@<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"money"</span>)</span> BigDecimal money)</span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@FeignClient</span>(value = <span class="hljs-string">"seata-storage-service"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StorageService</span> </span>&#123;    <span class="hljs-meta">@PostMapping</span>(value = <span class="hljs-string">"/storage/decrease"</span>)    <span class="hljs-function">CommonResult <span class="hljs-title">decrease</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"productId"</span>)</span>Long productId,@<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"used"</span>)</span>Integer used)</span>;&#125;</code></pre><ul><li><p>OrderServiceImpl，首先用@Resource引入了2个service和dao，这里其他微服务方法用@feign注解标注后被order调用，实际使用的是对应@feign的服务的方法，实现了微服务调用，因此在上面的2个service接口中，使用了 <strong>@FeignClient(value=”xxxxxx”)</strong>这样就可以指定微服务，调用具体微服务的方法</p><pre><code class="hljs java"><span class="hljs-meta">@Slf</span>4j<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderService</span></span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> StorageService storageService;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> OrderDao orderDao;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> AccountService accountService;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">(Order order)</span> </span>&#123;        log.info(<span class="hljs-string">"----&gt;&gt;开始新建订单"</span>);        <span class="hljs-comment">//1. 新建订单</span>        orderDao.create(order);        log.info(<span class="hljs-string">"----&gt;&gt;订单微服务开始调用库存，做扣减count"</span>);        <span class="hljs-comment">//2. 扣减库存</span>        storageService.decrease(order.getProductId(),order.getCount());        log.info(<span class="hljs-string">"----&gt;&gt;订单微服务开始调用库存，做扣减end"</span>);        log.info(<span class="hljs-string">"----&gt;&gt;订单微服务开始调用账户，做扣减Money"</span>);        <span class="hljs-comment">//3. 扣减账户余额</span>        accountService.decrease(order.getUserId(),order.getMoney());        log.info(<span class="hljs-string">"----&gt;&gt;订单微服务开始调用账户，做扣减end"</span>);        <span class="hljs-comment">//4. 修改订单状态，从0到1，1代表已经完成</span>        log.info(<span class="hljs-string">"----&gt;&gt;修改订单状态开始"</span>);        orderDao.update(order.getUserId(),<span class="hljs-number">0</span>);        log.info(<span class="hljs-string">"----&gt;&gt;修改订单状态结束"</span>);        log.info(<span class="hljs-string">"----&gt;&gt;下订单结束了，O(∩_∩)O"</span>);    &#125;&#125;</code></pre></li></ul><pre><code class="hljs java"><span class="hljs-meta">@Slf</span>4j<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderService</span></span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> StorageService storageService;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> OrderDao orderDao;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> AccountService accountService;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">create</span><span class="hljs-params">(Order order)</span> </span>&#123;        log.info(<span class="hljs-string">"----&gt;&gt;开始新建订单"</span>);        <span class="hljs-comment">//1. 新建订单</span>        orderDao.create(order);        log.info(<span class="hljs-string">"----&gt;&gt;订单微服务开始调用库存，做扣减count"</span>);        <span class="hljs-comment">//2. 扣减库存</span>        storageService.decrease(order.getProductId(),order.getCount());        log.info(<span class="hljs-string">"----&gt;&gt;订单微服务开始调用库存，做扣减end"</span>);        log.info(<span class="hljs-string">"----&gt;&gt;订单微服务开始调用账户，做扣减Money"</span>);        <span class="hljs-comment">//3. 扣减账户余额</span>        accountService.decrease(order.getUserId(),order.getMoney());        log.info(<span class="hljs-string">"----&gt;&gt;订单微服务开始调用账户，做扣减end"</span>);        <span class="hljs-comment">//4. 修改订单状态，从0到1，1代表已经完成</span>        log.info(<span class="hljs-string">"----&gt;&gt;修改订单状态开始"</span>);        orderDao.update(order.getUserId(),<span class="hljs-number">0</span>);        log.info(<span class="hljs-string">"----&gt;&gt;修改订单状态结束"</span>);        log.info(<span class="hljs-string">"----&gt;&gt;下订单结束了，O(∩_∩)O"</span>);    &#125;&#125;</code></pre><ul><li>接下来看controller层，controller层只需要简单调用service层中的方法即可</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    <span class="hljs-keyword">private</span> OrderService orderService;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/order/create"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult <span class="hljs-title">create</span><span class="hljs-params">(Order order)</span></span>&#123;        orderService.create(order);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CommonResult(<span class="hljs-number">200</span>,<span class="hljs-string">"订单创建成功"</span>);    &#125;&#125;</code></pre><ul><li>最后我们需要看mapper文件下的xml文件，此处在书写完dao和domain就可以进行编码了，就是简单的数据库增删改查语句以及resultMap格式的返回，但是此处需要注意一个点，首先在yml文件中需要配置一下  </li></ul><pre><code class="hljs yml"><span class="hljs-attr">mybatis:</span>  <span class="hljs-attr">mapperLocations:</span> <span class="hljs-string">classpath:mapper/*.xml</span></code></pre><ul><li>需要让mybatis扫描到你的xml文件，其次，<strong>你在创建文件的时候必须显示指定 <code>XXXX.xml</code>这样才能被扫描到</strong>，不然会出现参数错误，无法找到的error</li></ul><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.atguigu.springcloud.alibaba.dao.OrderDao"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"BaseResultMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"com.atguigu.springcloud.alibaba.domain.Order"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"user_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"userId"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"product_id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"productId"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"BIGINT"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"count"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"count"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"INTEGER"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"money"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"money"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"DECIMAL"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"status"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"status"</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">"INTEGER"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"create"</span>&gt;</span>        insert into t_order (id,user_id,product_id,count,money,status)        values (null,#&#123;userId&#125;,#&#123;productId&#125;,#&#123;count&#125;,#&#123;money&#125;,0);    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"update"</span>&gt;</span>        update t_order set status = 1        where user_id=#&#123;userId&#125; and status = #&#123;status&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><ul><li>最后，需要在yml文件中配置ribbon超时时间，不然在调用微服务，实际输入网址的时候可能会提示你超时，事务回滚，也就是以下代码</li></ul><pre><code class="hljs yml"><span class="hljs-comment">#ribbon的超时时间</span><span class="hljs-attr">ribbon:</span>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">30000</span>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">30000</span></code></pre><ul><li>给出yml的所有代码</li></ul><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">2001</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">seata-order-service</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">alibaba:</span>      <span class="hljs-attr">seata:</span>        <span class="hljs-comment">#自定义事务组名称需要与seata-server中的对应</span>        <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">fsp_tx_group</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/seata_order</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><span class="hljs-comment">#ribbon的超时时间</span><span class="hljs-attr">ribbon:</span>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">30000</span>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">30000</span><span class="hljs-attr">feign:</span>  <span class="hljs-attr">hystrix:</span>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><span class="hljs-attr">logging:</span>  <span class="hljs-attr">level:</span>    <span class="hljs-attr">io:</span>      <span class="hljs-attr">seata:</span> <span class="hljs-string">info</span><span class="hljs-attr">mybatis:</span>  <span class="hljs-attr">mapperLocations:</span> <span class="hljs-string">classpath:mapper/*.xml</span></code></pre><ul><li><strong>测试</strong>： 访问 <code>http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=100</code>得到以下结果，首先网页端</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011104157242.png" srcset="/img/loading.gif" alt="image-20201011104157242"></p><ul><li>返回我们自己定义的<code>CommonResult</code>字符串信息，再看数据库<code>t_order</code>表，也就是下订单的表，添加一行数据表示下达订单</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011104250555.png" srcset="/img/loading.gif" alt="image-20201011104250555"></p><ul><li>表示已经下单了，也就是说用户已经买了物品，再看 <code>t_storage</code>，也就是库存表，本来是</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011104709232.png" srcset="/img/loading.gif" alt="image-20201011104709232"></p><ul><li>经过访问后，变成</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011105743324.png" srcset="/img/loading.gif" alt="image-20201011105743324"></p><ul><li>看<code>t_account</code>表</li></ul><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011105803036.png" srcset="/img/loading.gif" alt="image-20201011105803036"></p><ul><li>数据库也发生了变化，因此创建一个订单，库存，账户余额都发生了变化，测试通过</li></ul><h4 id="异常事件"><a href="#异常事件" class="headerlink" title="异常事件"></a>异常事件</h4><ul><li><p>如果加入线程延迟， 那么事务就会报出执行超时，那么部分事务会执行，部分不会，就会导致很严重的问题，比如扣钱了，但是库存没少等等</p></li><li><p>这里seata提供了一个注解 <code>@GlobalTransactional</code>来解决这个问题，意思就是如果出现异常那么全局回滚，保证事务的一致性（原子性）</p></li><li><p>也就是说，成功就全部成功，不然就全部失败，而不是部分微服务成功执行，部分不执行，这样就可以解决事务一致性的问题</p></li><li><p>在类的create方法上添加注解  <code>@GlobalTransactional(name = &quot;fsp-create-order&quot;,rollbackFor = Exception.class)</code>即可</p></li><li><p>参数的意思是对于<code>seata-name</code> 为 <code>fsp-create-order</code>的事务，出现任何异常都回滚 <code>rollbackFor = Exception.class</code></p></li></ul><h4 id="-2"><a href="#-2" class="headerlink" title></a></h4><h4 id="Seata原理简介"><a href="#Seata原理简介" class="headerlink" title="Seata原理简介"></a>Seata原理简介</h4><p><strong>简单可扩展自治事务框架</strong></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011144403071.png" srcset="/img/loading.gif" alt="image-20201011144403071"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011144510849.png" srcset="/img/loading.gif" alt="image-20201011144510849"></p><p><img src="/2020/12/11/SpringBoot%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/C:%5CUsers%5Cfhawk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201011145154283.png" srcset="/img/loading.gif" alt="image-20201011145154283"></p><p><strong><a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html" target="_blank" rel="noopener">官方文档</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双指针法</title>
    <link href="/2020/12/04/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/"/>
    <url>/2020/12/04/%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h1><p>首先给出例题:</p><h2 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">167. 两数之和 II - 输入有序数组</a></h2><p>给定一个已按照<strong><em>升序排列</em></strong> 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><pre><code class="hljs angelscript">输入: numbers = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span>输出: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]解释: <span class="hljs-number">2</span> 与 <span class="hljs-number">7</span> 之和等于目标数 <span class="hljs-number">9</span> 。因此 index1 = <span class="hljs-number">1</span>, index2 = <span class="hljs-number">2</span> 。</code></pre><h3 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h3><p>暴力循环，O(n2)时间复杂度，因为2层循环，肯定会超时</p><h3 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h3><p>上面的思路显然不行，那么我们换一种思路，我们使用双指针，在遍历的时候一次性删除多种可能性即可</p><p>定义 <code>A[i][j] 是numbers[i] + numbers[j]</code></p><p>定义 <code>i = 0,j = numbers.size()-1</code></p><p>定义 <code>sum = numbers[i] + numbers[j]</code></p><ul><li><code>sum &lt; target</code>    那么代表 <code>A[0][length]</code> 小于target，由于数组已经排序，那么numbers[i] 是最小的，那么就让numbers[i]变大即可</li><li>即 <code>i++</code> ，那么就排除了A[i]一整行的数据，时间复杂度降低</li><li><code>sum &gt; target</code>    那么代表  <code>A[0][length]</code>大于target，numbers[0] 是最小的，我们需要找和更小的两个数，那么我们需要把length减少</li><li>即 <code>j--</code>  ,  那么就排除了A[j]一整列的数据，时间复杂度降低</li></ul><p><code>可以证明，对于排好序且有解的数组，双指针一定能遍历到最优解。证明方法如下：假设最 优解的两个数的位置分别是 l 和 r。我们假设在左指针在 l 左边的时候，右指针已经移动到了 r； 此时两个指针指向值的和小于给定值，因此左指针会一直右移直到到达 l。同理，如果我们假设 在右指针在 r 右边的时候，左指针已经移动到了 l；此时两个指针指向值的和大于给定值，因此 右指针会一直左移直到到达 r。所以双指针在任何时候都不可能处于 (l,r) 之间，又因为不满足条 件时指针必须移动一个，所以最终一定会收敛在 l 和 r。</code></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; numbers, <span class="hljs-keyword">int</span> target)</span> </span>&#123;        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> j = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(i &lt; j)        &#123;            <span class="hljs-keyword">int</span> sum = numbers[i] + numbers[j];            <span class="hljs-keyword">if</span>(sum &lt; target)&#123;                i++;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &gt; target)&#123;                j--;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>&#125;;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;    &#125;&#125;;</code></pre><h2 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">142. 环形链表 II</a></h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p><p><strong>说明：</strong>不允许修改给定的链表。</p><pre><code class="hljs angelscript">输入：head = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-4</span>], pos = <span class="hljs-number">1</span>输出：返回索引为 <span class="hljs-number">1</span> 的链表节点解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><pre><code class="hljs angelscript">输入：head = [<span class="hljs-number">1</span>], pos = <span class="hljs-number">-1</span>输出：返回 <span class="hljs-literal">null</span>解释：链表中没有环。</code></pre><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p><strong>这里牵扯到一个很经典的问题，如何判断是否有环？</strong></p><ul><li>快慢指针法<ul><li>指定两个指针，第二个速度是第一个的两倍</li><li>如果这个链表不是环状，那么第一个除了在原点和第二个相遇，接下来不可能相遇</li><li>如果是环状，那么第二个一定会碰到第一个点</li><li>那么反过来，如果两个点相遇，就一定有环</li></ul></li><li>再思考：我们如何判断入环点？<ul><li>回到上句，我们现在已经判断出有环状，即两个指针重叠</li><li>那么我们让快的指针指向远点，然后调整两指针都是一个一个的遍历(速度相等)</li><li>当两个点再次相遇的时候，就一定是入环点</li></ul></li></ul><pre><code class="hljs c++"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * struct ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode *next;</span><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><span class="hljs-comment"> * &#125;;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;        ListNode *fast = head;        ListNode *slow = head;        <span class="hljs-keyword">do</span>&#123;            <span class="hljs-keyword">if</span>(!fast || !fast-&gt;next)    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;            fast = fast-&gt;next-&gt;next;            slow = slow-&gt;next;        &#125;<span class="hljs-keyword">while</span>(fast != slow);        fast = head;        <span class="hljs-keyword">while</span>(fast != slow)        &#123;            slow = slow-&gt;next;            fast = fast-&gt;next;        &#125;        <span class="hljs-keyword">return</span> fast;    &#125;&#125;;</code></pre><h2 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76. 最小覆盖子串</a></h2><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><p>即给定两个字符串 S 和 T，求 S 中包含 T 所有字符的最短连续子字符串的长度</p><p><strong>注意：</strong>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</p><pre><code class="hljs nix">输入：<span class="hljs-attr">s</span> = <span class="hljs-string">"ADOBECODEBANC"</span>, <span class="hljs-attr">t</span> = <span class="hljs-string">"ABC"</span>输出：<span class="hljs-string">"BANC"</span></code></pre><pre><code class="hljs smalltalk">输入：s = <span class="hljs-comment">"a"</span>, t = <span class="hljs-comment">"a"</span>输出：<span class="hljs-comment">"a"</span></code></pre><h3 id="思路：滑动窗口"><a href="#思路：滑动窗口" class="headerlink" title="思路：滑动窗口"></a>思路：滑动窗口</h3><ul><li>时间复杂度不得超过O(n)</li><li>定义两个指针 l 和 r 从左向右移动，l 的位置一定在 r 的左边</li><li>本题使用两个vector数组来映射字符</li><li>chars 表示每个字符缺少的数量</li><li>flag 表示每个字符是否在T中存在</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">minWindow</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s, <span class="hljs-built_in">string</span> t)</span> </span>&#123;        <span class="hljs-comment">//slip window</span>        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">chars</span><span class="hljs-params">(<span class="hljs-number">128</span>,<span class="hljs-number">0</span>)</span></span>;        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">flag</span><span class="hljs-params">(<span class="hljs-number">128</span>,<span class="hljs-literal">false</span>)</span></span>;        <span class="hljs-comment">//统计涵盖的字符和涵盖字符出现的次数</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; t.<span class="hljs-built_in">size</span>();i++)        &#123;            flag[t[i]] = <span class="hljs-literal">true</span>;            ++chars[t[i]];        &#125;                <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>,l = <span class="hljs-number">0</span>,min_l = <span class="hljs-number">0</span>,min_size = s.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>;        <span class="hljs-comment">//滑动窗口自增</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>;r &lt; s.<span class="hljs-built_in">size</span>();r++)        &#123;            <span class="hljs-keyword">if</span>(flag[s[r]])&#123;                <span class="hljs-keyword">if</span>(--chars[s[r]] &gt;= <span class="hljs-number">0</span>)&#123;                    ++cnt;                &#125;                <span class="hljs-comment">//寻找最小窗口,此时已经找到了所有字母</span>                <span class="hljs-keyword">while</span>(cnt == t.<span class="hljs-built_in">size</span>())                &#123;                    <span class="hljs-keyword">if</span>(r - l + <span class="hljs-number">1</span> &lt; min_size)&#123;                        min_l = l;                        min_size = r - l + <span class="hljs-number">1</span>;                    &#125;                    <span class="hljs-comment">//左边l边界往右走,然后判断s[l]是否符合</span>                    <span class="hljs-keyword">if</span>(flag[s[l]] &amp;&amp; ++chars[s[l]] &gt; <span class="hljs-number">0</span>)&#123;                        --cnt;                    &#125;                    ++l;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> min_size &gt; s.<span class="hljs-built_in">size</span>() ? <span class="hljs-string">""</span> : s.substr(min_l,min_size);    &#125;&#125;;</code></pre><h2 id="633-平方数之和"><a href="#633-平方数之和" class="headerlink" title="633. 平方数之和"></a><a href="https://leetcode-cn.com/problems/sum-of-square-numbers/" target="_blank" rel="noopener">633. 平方数之和</a></h2><p>给定一个非负整数 <code>c</code> ，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得 <code>a2 + b2 = c</code> 。</p><pre><code class="hljs angelscript">输入：c = <span class="hljs-number">5</span>输出：<span class="hljs-literal">true</span>解释：<span class="hljs-number">1</span> * <span class="hljs-number">1</span> + <span class="hljs-number">2</span> * <span class="hljs-number">2</span> = <span class="hljs-number">5</span></code></pre><pre><code class="hljs angelscript">输入：c = <span class="hljs-number">3</span>输出：<span class="hljs-literal">false</span></code></pre><h3 id="解题思路：暴力-剪枝"><a href="#解题思路：暴力-剪枝" class="headerlink" title="解题思路：暴力 + 剪枝"></a>解题思路：暴力 + 剪枝</h3><ul><li>左指针初始化为0，右指针初始化为 sqrt(c)</li><li>让左指针依次遍历即可，这样时间复杂度为O(sqrt(c))，空间复杂度O(1)</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">judgeSquareSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c)</span> </span>&#123;        <span class="hljs-keyword">if</span>(c &lt; <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> right = <span class="hljs-built_in">sqrt</span>(c);        <span class="hljs-keyword">while</span>(left &lt;= right)        &#123;            <span class="hljs-keyword">if</span>(left*left == c - right*right)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c - right*right &gt; left*left)&#123;                left++;            &#125;<span class="hljs-keyword">else</span>&#123;                right--;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;&#125;;</code></pre><h2 id="680-验证回文字符串-Ⅱ"><a href="#680-验证回文字符串-Ⅱ" class="headerlink" title="680. 验证回文字符串 Ⅱ"></a><a href="https://leetcode-cn.com/problems/valid-palindrome-ii/" target="_blank" rel="noopener">680. 验证回文字符串 Ⅱ</a></h2><p>给定一个非空字符串 <code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。</p><pre><code class="hljs ada">输入: <span class="hljs-string">"aba"</span>输出: <span class="hljs-literal">True</span></code></pre><pre><code class="hljs makefile"><span class="hljs-section">输入: "abca"</span><span class="hljs-section">输出: True</span><span class="hljs-section">解释: 你可以删除c字符。</span></code></pre><h3 id="解题思路：双指针法"><a href="#解题思路：双指针法" class="headerlink" title="解题思路：双指针法"></a>解题思路：双指针法</h3><ul><li>定义一个验证回文串的函数</li><li>例如 <code>abca</code></li><li>当a = a ，双指针往中间走, 发现 <code>b != c</code></li><li>那么此时有2种选择，左指针往右/右指针往左</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; s,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = low,j = high;i &lt; j;++i,--j)&#123;            <span class="hljs-keyword">if</span>(s[i] != s[j])            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">validPalindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>,high = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(low &lt; high)&#123;            <span class="hljs-keyword">char</span> c1 = s[low],c2 = s[high];            <span class="hljs-keyword">if</span>(c1 == c2)&#123;                ++low;                --high;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">return</span> isPalindrome(s,low,high<span class="hljs-number">-1</span>) || isPalindrome(s,low+<span class="hljs-number">1</span>,high);            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;&#125;;</code></pre><h2 id="524-通过删除字母匹配到字典里最长单词"><a href="#524-通过删除字母匹配到字典里最长单词" class="headerlink" title="524. 通过删除字母匹配到字典里最长单词"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/" target="_blank" rel="noopener">524. 通过删除字母匹配到字典里最长单词</a></h2><p>给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。</p><pre><code class="hljs makefile"><span class="hljs-section">输入:</span>s = <span class="hljs-string">"abpcplea"</span>, d = [<span class="hljs-string">"ale"</span>,<span class="hljs-string">"apple"</span>,<span class="hljs-string">"monkey"</span>,<span class="hljs-string">"plea"</span>]<span class="hljs-section">输出: </span><span class="hljs-string">"apple"</span></code></pre><pre><code class="hljs makefile"><span class="hljs-section">输入:</span>s = <span class="hljs-string">"abpcplea"</span>, d = [<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>]<span class="hljs-section">输出: </span><span class="hljs-string">"a"</span></code></pre><h3 id="解题思路：双指针法-lambda表达式实现自定义排序"><a href="#解题思路：双指针法-lambda表达式实现自定义排序" class="headerlink" title="解题思路：双指针法  + lambda表达式实现自定义排序"></a>解题思路：双指针法  + lambda表达式实现自定义排序</h3><ul><li>首先定义一个函数<code>isSub(string s,string target)</code> ，验证字符串target是否可以由字符串s通过删减得到</li><li>定义一个vector，把所有符合定义的字符串放入容器中</li><li>然后对容器进行自定义排序，长度优先，长度相等按字符串</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">findLongestWord</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; d)</span> </span>&#123;        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; res;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; d.<span class="hljs-built_in">size</span>();i++)&#123;            <span class="hljs-keyword">if</span>(isSub(s,d[i]))&#123;                res.push_back(d[i]);            &#125;        &#125;    <span class="hljs-comment">//依据长度/字典序排序</span>        sort(res.<span class="hljs-built_in">begin</span>(),res.<span class="hljs-built_in">end</span>(),[](<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; a,<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; b)&#123;                <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">size</span>() &lt; b.<span class="hljs-built_in">size</span>())&#123;                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">size</span>() &gt; b.<span class="hljs-built_in">size</span>())&#123;                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">return</span> a &gt; b;                &#125;            &#125;);                <span class="hljs-keyword">if</span>(!res.empty())        <span class="hljs-keyword">return</span> res[res.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>];        <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;    &#125;    <span class="hljs-comment">//字符串是否符合要求</span>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isSub</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s,<span class="hljs-built_in">string</span> target)</span></span>&#123;        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(i &lt; s.<span class="hljs-built_in">size</span>()&amp;&amp;j &lt; target.<span class="hljs-built_in">size</span>())&#123;            <span class="hljs-keyword">if</span>(s[i] == target[j])&#123;                j++;            &#125;            i++;        &#125;        <span class="hljs-keyword">return</span> j == target.<span class="hljs-built_in">size</span>();    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>贪心算法</title>
    <link href="/2020/12/03/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2020/12/03/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p><strong>顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最 后得到的结果是全局最优的。</strong> </p><p>举一个最简单的例子：小明和小王喜欢吃苹果，小明可以吃五个，小王可以吃三个。已知苹 果园里有吃不完的苹果，求小明和小王一共最多吃多少个苹果。在这个例子中，我们可以选用的 贪心策略为，每个人吃自己能吃的最多数量的苹果，这在每个人身上都是局部最优的。又因为全 局结果是局部结果的简单求和，且局部结果互不相干，因此局部最优的策略也同样是全局最优的 策略。</p><h4 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener">122. 买卖股票的最佳时机 II</a></h4><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]输出: <span class="hljs-number">7</span>解释: 在第 <span class="hljs-number">2</span> 天（股票价格 = <span class="hljs-number">1</span>）的时候买入，在第 <span class="hljs-number">3</span> 天（股票价格 = <span class="hljs-number">5</span>）的时候卖出, 这笔交易所能获得利润 = <span class="hljs-number">5</span><span class="hljs-number">-1</span> = <span class="hljs-number">4</span> 。     随后，在第 <span class="hljs-number">4</span> 天（股票价格 = <span class="hljs-number">3</span>）的时候买入，在第 <span class="hljs-number">5</span> 天（股票价格 = <span class="hljs-number">6</span>）的时候卖出, 这笔交易所能获得利润 = <span class="hljs-number">6</span><span class="hljs-number">-3</span> = <span class="hljs-number">3</span> 。</code></pre><p><strong>思路1：贪心算法</strong></p><p>股票的购买没有限制，问题可以简化为寻找x个长度为1的区间，只要区间末减区间首长度大于0，那么就加入利润中，局部最优加起来得到全局最优</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span>&#123;        <span class="hljs-keyword">int</span> length = prices.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt; length;i++)        &#123;            ans += <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,prices[i] - prices[i<span class="hljs-number">-1</span>]);        &#125;        <span class="hljs-keyword">return</span> ans;    &#125;&#125;;</code></pre><p><strong>思路2：动态规划</strong></p><p>定义状态 <code>dp[i][2]</code> 表示第<code>i</code>天，未持有(0)/持有(1)股票利润</p><p>那么得到状态转移方程</p><pre><code class="hljs c++">dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + prices[i]);dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] - prices[i]);</code></pre><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span>&#123;        <span class="hljs-keyword">int</span> length = prices.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">int</span> dp[length][<span class="hljs-number">2</span>];        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>,dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -prices[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt; length;i++)        &#123;            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + prices[i]);            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] - prices[i]);        &#125;        <span class="hljs-keyword">return</span> dp[length<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];    &#125;&#125;;</code></pre><h4 id="135-分发糖果"><a href="#135-分发糖果" class="headerlink" title="135. 分发糖果"></a><a href="https://leetcode-cn.com/problems/candy/" target="_blank" rel="noopener">135. 分发糖果</a></h4><p>老师想给孩子们分发糖果，有 <em>N</em> 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p><p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 1 个糖果。</li><li>相邻的孩子中，评分高的孩子必须获得更多的糖果。</li></ul><p>那么这样下来，老师至少需要准备多少颗糖果呢？</p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]输出: <span class="hljs-number">5</span>解释: 你可以分别给这三个孩子分发 <span class="hljs-number">2</span>、<span class="hljs-number">1</span>、<span class="hljs-number">2</span> 颗糖果。</code></pre><pre><code class="hljs angelscript">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]输出: <span class="hljs-number">4</span>解释: 你可以分别给这三个孩子分发 <span class="hljs-number">1</span>、<span class="hljs-number">2</span>、<span class="hljs-number">1</span> 颗糖果。     第三个孩子只得到 <span class="hljs-number">1</span> 颗糖果，这已满足上述两个条件。</code></pre><p><strong>思路：贪心算法</strong></p><p>​    按题意：有两条固定规则</p><ul><li>设学生A，B左右相邻，A在B左边</li><li>左规则：当ratingsB &gt; ratingsA     B的糖比A多</li><li>右规则：当ratingsA &gt; ratingsB     A的糖比B多</li><li>相邻学生中，评分高的学生必须获得更多的糖果  ==  所有学生满足左规则，也满足右规则</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; ratings)</span> </span>&#123;        <span class="hljs-keyword">int</span> length = ratings.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">if</span>(length&lt;<span class="hljs-number">2</span>)        <span class="hljs-keyword">return</span> length;        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(length,<span class="hljs-number">1</span>)</span></span>;        <span class="hljs-comment">//左规则，从左到右遍历</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt; length;i++)&#123;            <span class="hljs-keyword">if</span>(ratings[i] &gt; ratings[i<span class="hljs-number">-1</span>])&#123;                nums[i] = nums[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>;            &#125;        &#125;        <span class="hljs-comment">//右规则，从右到左遍历</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = length<span class="hljs-number">-1</span>;i &gt; <span class="hljs-number">0</span>;i--)&#123;            <span class="hljs-keyword">if</span>(ratings[i] &lt; ratings[i<span class="hljs-number">-1</span>])&#123;                nums[i<span class="hljs-number">-1</span>] = <span class="hljs-built_in">max</span>(nums[i<span class="hljs-number">-1</span>],nums[i]+<span class="hljs-number">1</span>);            &#125;        &#125;        <span class="hljs-keyword">return</span> accumulate(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);    &#125;&#125;;</code></pre><h4 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452. 用最少数量的箭引爆气球"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="noopener">452. 用最少数量的箭引爆气球</a></h4><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p><p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>xstart，xend</code>， 且满足  <code>xstart ≤ x ≤ xend</code>，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p><p>给你一个数组 <code>points</code> ，其中 <code>points [i] = [xstart,xend]</code> ，返回引爆所有气球所必须射出的最小弓箭数。</p><pre><code class="hljs angelscript">输入：points = [[<span class="hljs-number">10</span>,<span class="hljs-number">16</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">12</span>]]输出：<span class="hljs-number">2</span>解释：对于该样例，x = <span class="hljs-number">6</span> 可以射爆 [<span class="hljs-number">2</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">6</span>] 两个气球，以及 x = <span class="hljs-number">11</span> 射爆另外两个气球</code></pre><pre><code class="hljs angelscript">输入：points = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]]输出：<span class="hljs-number">4</span></code></pre><pre><code class="hljs angelscript">输入：points = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]输出：<span class="hljs-number">2</span></code></pre><p><strong>思路：</strong></p><p>首先根据数组元素的末尾元素进行排序，如果首元素末尾大于下一个元素开头，代表可以射穿气球，继续循环，反之，代表无法射穿，需要另外一只箭</p><p>那么，我们将箭数量加一，同时将首元素的位置设置为当前比较元素</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findMinArrowShots</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;        <span class="hljs-keyword">if</span>(points.empty())&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> n = points.<span class="hljs-built_in">size</span>();        sort(points.<span class="hljs-built_in">begin</span>(),points.<span class="hljs-built_in">end</span>(),[](<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; a,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; b)&#123;            <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];        &#125;);        <span class="hljs-keyword">int</span> total = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt; n;i++)&#123;            <span class="hljs-keyword">if</span>(points[m][<span class="hljs-number">1</span>] &gt;= points[i][<span class="hljs-number">0</span>])&#123;                <span class="hljs-keyword">continue</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                m = i;                total++;              &#125;        &#125;        <span class="hljs-keyword">return</span> total;    &#125;&#125;;</code></pre><h4 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a><a href="https://leetcode-cn.com/problems/partition-labels/" target="_blank" rel="noopener">763. 划分字母区间</a></h4><p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p><pre><code class="hljs lsl">输入：S = <span class="hljs-string">"ababcbacadefegdehijhklij"</span>输出：[<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]解释：划分结果为 <span class="hljs-string">"ababcbaca"</span>, <span class="hljs-string">"defegde"</span>, <span class="hljs-string">"hijhklij"</span>。每个字母最多出现在一个片段中。像 <span class="hljs-string">"ababcbacadefegde"</span>, <span class="hljs-string">"hijhklij"</span> 的划分是错误的，因为划分的片段数较少。</code></pre><p><strong>思路：贪心算法</strong></p><ul><li>由题意，同一个字母只能出现在同一个片段，那么我们自然要得到同一个字母的第一次的下标和最后一次出现的下标</li><li>遍历字符串，得到每一个字母最后出现的位置，存放于数组中 <code>int last[26]</code></li><li>从左到右遍历字符串，定义2个变量 <code>start end</code> ，代表当前区间的起始和终末位置</li><li>对于每个访问到的字母c,当前区间的终末不会小于endc ，因此有 <code>end = max(end,endc)</code></li><li>当访问到下标end，代表当前片段访问结束，将当前字符串长度加入容器，然后让 <code>start = end + 1</code>，遍历下一个区间</li><li>重复以上过程</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">partitionLabels</span><span class="hljs-params">(<span class="hljs-built_in">string</span> S)</span> </span>&#123;        <span class="hljs-keyword">int</span> last[<span class="hljs-number">26</span>];        <span class="hljs-keyword">int</span> length = S.<span class="hljs-built_in">size</span>();        <span class="hljs-comment">//得到每个字母的终末index</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i++)        &#123;            last[S[i] - <span class="hljs-string">'a'</span>] = i;   <span class="hljs-comment">//endi</span>        &#125;        <span class="hljs-comment">//返回值</span>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res;        <span class="hljs-comment">//区间开始和结束index</span>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>,<span class="hljs-built_in">end</span> = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; length;i++)        &#123;            <span class="hljs-built_in">end</span> = <span class="hljs-built_in">max</span>(last[S[i] - <span class="hljs-string">'a'</span>],<span class="hljs-built_in">end</span>);            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">end</span> == i)&#123;                res.push_back(<span class="hljs-built_in">end</span> - start + <span class="hljs-number">1</span>);                start = <span class="hljs-built_in">end</span> + <span class="hljs-number">1</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>所有可能的满二叉树</title>
    <link href="/2020/11/20/%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/11/20/%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h4 id="894-所有可能的满二叉树"><a href="#894-所有可能的满二叉树" class="headerlink" title="894. 所有可能的满二叉树"></a><a href="https://leetcode-cn.com/problems/all-possible-full-binary-trees/" target="_blank" rel="noopener">894. 所有可能的满二叉树</a></h4><p><code>满二叉树是一类二叉树，其中每个结点恰好有 0 或 2 个子结点。</code></p><p><code>返回包含 N 个结点的所有可能满二叉树的列表。 答案的每个元素都是一个可能树的根结点。</code></p><p><code>答案中每个树的每个结点都必须有 node.val=0。</code></p><p><code>你可以按任何顺序返回树的最终列表。</code></p><p><code>输入：7</code><br><code>输出：[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]</code></p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>本题要求给出所有满二叉树，那么自然要想到递归构造，题中给出函数 <code>allPossibleFBT(int N)</code></p><p>对于递归，我们首先要想到两点</p><ul><li>确认递归目的</li><li>确认递归出口</li></ul><p><strong>确认递归目的：</strong>令<code>allPossibleFBT(int N)</code>意义为，<strong>所有</strong>含N个节点的满二叉树列表</p><p><strong>确认递归出口：</strong>通过简单的逻辑和计数，我们知道有三点</p><ul><li>第一，我们要使用一个Map来存储和N对应的二叉树列表，以此作为出口，如果当前map已经包含了对应的值</li><li><code>Map&lt;Integer, List&lt;TreeNode&gt;&gt; map = new HashMap();</code></li><li><code>if(!map.containsKey(N))</code></li><li>那么这里就是递归出口，直接退出</li><li>第二，我们发现所有的满二叉树必定有着奇数个的节点，那么我们可以在函数中进行判断，只有是奇数个数，才继续往下执行程序，否则直接退出</li><li><code>else if(N%2 == 1)</code></li><li>第三，如果<code>N == 1</code>，即只有一个节点，那么我们直接添加一个值为0的节点，放入列表即可</li><li><code>if(N == 1){ ans.add(new TreeNode(0)); }</code></li></ul><p><strong>那么由以上两点，我们可以确认递归思路</strong></p><p>首先，进行出口判断，然后调用函数<code>allPossibleFBT(int N)</code>，这个函数调用2次，第一次参数为x，第二次为y，这里设置一个循环，<code>0 =&lt; x &lt; N</code> </p><p>然后 <code>y = N - 1 - x</code> 即 <code>allPossibleFBT(x)   allPossibleFBT(y)</code>，分别代表存放着 <strong>所有满足条件的左子树的集合</strong> 和 <strong>所有满足条件的右子树的集合</strong></p><p>而 ``allPossibleFBT(N)`即表示 <strong>节点数为N时，所有满足条件的树的root集合</strong></p><p>那么我们对这两个函数的成员循环取值，定义一个节点，节点左边指向左子树集合的成员，右边指向右子树集合的成员，通过for循环轮回遍历，就可以取得所有符合条件的树，最后进行返回即可</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    Map&lt;Integer, List&lt;TreeNode&gt;&gt; map = <span class="hljs-keyword">new</span> HashMap();    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;TreeNode&gt; <span class="hljs-title">allPossibleFBT</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;        <span class="hljs-comment">//通过map缓存之前的计算结果，这样我们可以优化时间复杂度，不必在递归中再次计算他们</span>        <span class="hljs-keyword">if</span>(!map.containsKey(N))&#123;            List&lt;TreeNode&gt; ans = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();            <span class="hljs-keyword">if</span>(N == <span class="hljs-number">1</span>)&#123;                ans.add(<span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>));            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(N%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;x &lt; N;x++)&#123;                    <span class="hljs-keyword">int</span> y = N - <span class="hljs-number">1</span> - x;                    <span class="hljs-comment">//通过for循环遍历所有左子树的成员和右子树成员</span>                    <span class="hljs-comment">//在函数体内部创建新的树，这样就可以得到所有满足条件的树</span>                    <span class="hljs-keyword">for</span>(TreeNode left : allPossibleFBT(x))                        <span class="hljs-keyword">for</span>(TreeNode right : allPossibleFBT(y))&#123;                            TreeNode node = <span class="hljs-keyword">new</span> TreeNode(<span class="hljs-number">0</span>);                            node.left = left;                            node.right = right;                            ans.add(node);                        &#125;                &#125;            &#125;            map.put(N,ans);        &#125;        <span class="hljs-keyword">return</span> map.get(N);    &#125;    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最大二叉树</title>
    <link href="/2020/11/19/%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/11/19/%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654. 最大二叉树"></a><a href="https://leetcode-cn.com/problems/maximum-binary-tree/" target="_blank" rel="noopener">654. 最大二叉树</a></h2><p>难度中等215收藏分享切换为英文接收动态反馈</p><p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：</p><ol><li>二叉树的根是数组中的最大元素。</li><li>左子树是通过数组中最大值左边部分构造出的最大二叉树。</li><li>右子树是通过数组中最大值右边部分构造出的最大二叉树。</li></ol><p>通过给定的数组构建最大二叉树，并且输出这个树的根节点。</p><pre><code class="hljs angelscript">输入：[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>]输出：返回下面这棵树的根节点：    <span class="hljs-number">6</span>    /   \   <span class="hljs-number">3</span>     <span class="hljs-number">5</span>    \    /      <span class="hljs-number">2</span>  <span class="hljs-number">0</span>          \        <span class="hljs-number">1</span></code></pre><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3><p>构造函数  <code>construct(int[] nums,int l,int r)</code> 表示构造数组nums， l  -&gt; r 的最大二叉树</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">constructMaximumBinaryTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">return</span> construct(nums,<span class="hljs-number">0</span>,nums.length);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">construct</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;        <span class="hljs-keyword">if</span>(r == l)         <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">int</span> max_i = max(nums,l,r);        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(nums[max_i]);        root.left = construct(nums,l,max_i);        root.right = construct(nums,max_i+<span class="hljs-number">1</span>,r);        <span class="hljs-keyword">return</span> root;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;        <span class="hljs-keyword">int</span> max_i = l;        <span class="hljs-comment">//System.out.println("ser"+max_i);</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = l;i &lt; r;i++)&#123;            <span class="hljs-keyword">if</span>(nums[max_i] &lt; nums[i])             max_i = i;        &#125;        <span class="hljs-comment">//System.out.println(max_i);</span>        <span class="hljs-keyword">return</span> max_i;    &#125;&#125;</code></pre><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>​    有关于二叉树的题目一般要想到递归，对于此题，题目要求构造二叉树，并且是最大二叉树</p><p>那么，我们要想到构造二叉树显然是一个递归的过程，递归构造二叉树分为两个过程—递归构造左子树，递归构造右子树</p><p>我们就想到函数 <code>construct</code> 带有三个参数，分别是 <code>数组nums  左边界l 右边界r</code></p><p>在函数内，自然通过改变 <code>l 和 r</code>来在函数体内进行递归  </p><p>题目要求构造最大二叉树，因此我们需要找到数组中最大的数，以此为分界点，左边为左子树，右边为右子树</p><pre><code>root.left = construct(nums,l,max_i);root.right = construct(nums,max_i+1,r);</code></pre><p>由此得到左子树，右子树，这样递归就完成了，返回根节点root即可</p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串常量池与insern方法测试</title>
    <link href="/2020/10/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%8Einsern%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/10/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%8Einsern%E6%96%B9%E6%B3%95%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="深入理解Java虚拟机案例代码P63代码"><a href="#深入理解Java虚拟机案例代码P63代码" class="headerlink" title="深入理解Java虚拟机案例代码P63代码"></a><strong>深入理解Java虚拟机案例代码P63代码</strong></h2><p><strong>首先给出代码</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.java.stackoverflow;<span class="hljs-keyword">import</span> java.util.HashSet;<span class="hljs-keyword">import</span> java.util.Set;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 运行时常量池导致的内存溢出异常</span><span class="hljs-comment"> * 由于在JDK7以后，字符串常量池从方法区移动到了Java堆区，</span><span class="hljs-comment"> * 因此我们需要显示Java堆区的最大容量便可以很轻易的让程序出现OOM</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * -Xmx6M</span><span class="hljs-comment"> * OutOfMemoryError:GC overhead limit exceeded</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RuntimeConstantPoolOOM</span> </span>&#123;<span class="hljs-comment">//    public static void main(String[] args) &#123;</span><span class="hljs-comment">//        Set&lt;String&gt; set = new HashSet&lt;String&gt;();</span><span class="hljs-comment">//        short i = 0;</span><span class="hljs-comment">//        while(true)&#123;</span><span class="hljs-comment">//            set.add(String.valueOf(i++).intern());</span><span class="hljs-comment">//        &#125;</span><span class="hljs-comment">//    &#125;</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    String str1 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"计算机"</span>).append(<span class="hljs-string">"软件"</span>).toString();    System.out.println(str1.intern() == str1);    String str3 = <span class="hljs-string">"java"</span>;    <span class="hljs-comment">//创建str3 == java，那么字符串常量池中已经有java，那么str2创建的java字符串在Java堆内存中</span>    <span class="hljs-comment">//自然，判断str2 == str3的话，地址不同，显然为false</span>    String str2 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"ja"</span>).append(<span class="hljs-string">"va"</span>).toString();    <span class="hljs-comment">//System.out.println(str3==str2);</span>    <span class="hljs-comment">//由于java字符串已经在字符串常量池中有引用，不符合intern方法的“首次遇到”原则，因此判断也是false</span>    <span class="hljs-comment">//如果注释掉String str3 = "java";  那么判断就会返回true，因为字符串常量池中并没有java，所以str2.intern方法会返回一个引用</span>    <span class="hljs-comment">// 这个引用与str2相同，因此返回true</span>    System.out.println(str2.intern() == str2);&#125;&#125;</code></pre><blockquote><p>方法的解释在代码注释中已经写的很清晰了，在这里再做以下总结</p></blockquote><ul><li>首先，本次环境是JDK8，书上给出案例是7</li><li>书上给出代码与本地实现有差别，具体差别表现在</li></ul><pre><code class="hljs java">String str2 = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"ja"</span>).append(<span class="hljs-string">"va"</span>).toString();System.out.println(str2.intern() == str2);</code></pre><ul><li>书上给出的答案为 false ，原因如下<ul><li>因为”Java”这个字符串在执行<code>String-Builder-toString()</code>的时候就已经出现过了，那么字符串常量池就有他的引用</li><li>而对于<code>intern</code>方法，如果在常量池中没有字符串的引用，那么就生成一个在常量池中的引用，相反，则不生成，生成的引用和堆中的对象地址相同</li><li>在这里已经有<code>java</code>的引用了，不符合intern方法要求首次遇到的原则，那么判断自然会返回<strong>false</strong></li></ul></li><li>注意，书上的环境为JDK7，<code>java</code>在加载<code>sun.misc.Version</code>这个类的时候进入常量池</li><li>现在，在JDK8的环境下，以上代码运行结果为<strong>true</strong>，原因是在JDK8中并没有把Java加载进入字符串常量池</li><li>那么我们必须要在程序的开头加上一句<code>String str3 = &quot;java&quot;;</code> 这样我们就定义了一个字符串 <code>java</code>进入常量池，这样intern就不会返回和堆中对象地址相同的引用，自然也会返回false</li></ul>]]></content>
    
    
    <categories>
      
      <category>深入理解java虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串常量池&amp;Java方法堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建乘积数组</title>
    <link href="/2020/10/19/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/"/>
    <url>/2020/10/19/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a><a href="https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/" target="_blank" rel="noopener">构建乘积数组</a></h1><p>给定一个数组 <code>A[0,1,…,n-1]</code>，请构建一个数组 <code>B[0,1,…,n-1]</code>，其中 <code>B</code> 中的元素 <code>B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]</code>。不能使用除法。</p><p><strong>示例:</strong></p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]输出: [<span class="hljs-number">120</span>,<span class="hljs-number">60</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">24</span>]</code></pre><p><strong>提示：</strong></p><ul><li>所有元素乘积之和不会溢出 32 位整数</li><li><code>a.length &lt;= 100000</code></li></ul><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>由于题目规定，不能使用除法，那么我们只能使用乘法生成数组B，列出表格（对称遍历）</p><img src="/2020/10/19/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/hexo\source\_posts\构建乘积数组\6056c7a5009cb7a4674aab28505e598c502a7f7c60c45b9f19a8a64f31304745-Picture1.png" srcset="/img/loading.gif" alt="6056c7a5009cb7a4674aab28505e598c502a7f7c60c45b9f19a8a64f31304745-Picture1" style="zoom:67%;"><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">constructArr</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; a)</span> </span>&#123;        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(a.<span class="hljs-built_in">size</span>())</span></span>;        <span class="hljs-keyword">if</span>(a.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> b;        b[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt; a.<span class="hljs-built_in">size</span>();i++)        &#123;            b[i] = b[i<span class="hljs-number">-1</span>] * a[i<span class="hljs-number">-1</span>];        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = a.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>;i &gt;= <span class="hljs-number">0</span>;i--)        &#123;            tmp *= a[i+<span class="hljs-number">1</span>];            b[i] *= tmp;        &#125;        <span class="hljs-keyword">return</span> b;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>股票的最大利润</title>
    <link href="/2020/10/19/%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/"/>
    <url>/2020/10/19/%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="股票的最大利润"><a href="#股票的最大利润" class="headerlink" title="股票的最大利润"></a><a href="https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/" target="_blank" rel="noopener">股票的最大利润</a></h1><p><strong>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</strong></p><p><strong>示例 1:</strong></p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]输出: <span class="hljs-number">5</span>解释: 在第 <span class="hljs-number">2</span> 天（股票价格 = <span class="hljs-number">1</span>）的时候买入，在第 <span class="hljs-number">5</span> 天（股票价格 = <span class="hljs-number">6</span>）的时候卖出，最大利润 = <span class="hljs-number">6</span><span class="hljs-number">-1</span> = <span class="hljs-number">5</span> 。     注意利润不能是 <span class="hljs-number">7</span><span class="hljs-number">-1</span> = <span class="hljs-number">6</span>, 因为卖出价格需要大于买入价格。</code></pre><p><strong>示例 2:</strong></p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]输出: <span class="hljs-number">0</span>解释: 在这种情况下, 没有交易完成, 所以最大利润为 <span class="hljs-number">0</span>。</code></pre><p><strong>限制：</strong></p><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= 数组长度 &lt;= <span class="hljs-number">10</span>^<span class="hljs-number">5</span></code></pre><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><ul><li><p>迭代模拟</p><p>要求获利最大，那么自然的思路就是：在买入的时候我们每次都选择价格最小的时间，作为买入时间。然后在买入的每一天都卖出去，求利润进行比较，选最大的利润</p><ul><li>定义mini，表示买入的价格 <code>mini = min(mini,prices[i])</code></li><li>定义res,表示利润 <code>res = max(res,prices[i]-mini)</code></li><li>遍历所有时间，得到最大利润</li></ul></li></ul><ul><li><strong>AC代码</strong></li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span>&#123;        <span class="hljs-keyword">int</span> dp[prices.<span class="hljs-built_in">size</span>()];        <span class="hljs-keyword">int</span> mini = INT_MAX,res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; prices.<span class="hljs-built_in">size</span>();i++)        &#123;            mini = <span class="hljs-built_in">min</span>(mini,prices[i]);            res  = <span class="hljs-built_in">max</span>(res,prices[i]-mini);        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre><ul><li><p><strong>动态规划</strong></p><p>定义动态规划之前，要注意两个点</p><ul><li>定义什么数组来表示各个阶段的状态</li><li>如何得到递推方程</li></ul></li><li><p>这里我们定义dp[n] [2]  表示前n个阶段的状态</p><p>dp[i] [0] 表示前 i 天，没有持有股票状态下的最大利润</p><ul><li><strong>转移方程： <code>dp[i][0] = max(dp[i-1][0],dp[i-1][1]+prices[i])</code></strong></li></ul><p>dp[i] [1] 表示前 i 天，持有股票状态下的最大利润</p><ul><li><strong>转移方程：<code>dp[i][1] = max(dp[i-1][1],0-prices[i])</code></strong></li></ul><p>注意到上方的转移方程，本来应该是 <code>dp[i-1][0]-prices[i]</code>，但是题目要求股票只能买卖一次，0表示未进行股票交易的初始金额，所以如果用 dp[i-1] [0]就代表可能在i-1天完成了多次股票交易，与题意不符</p></li><li><p><strong>AC代码</strong></p></li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; prices)</span> </span>&#123;        <span class="hljs-keyword">if</span> (prices.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> dp[<span class="hljs-number">200010</span>][<span class="hljs-number">2</span>];        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -prices[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; prices.<span class="hljs-built_in">size</span>(); i ++) &#123;            dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>], dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>] + prices[i]);            dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>], <span class="hljs-number">0</span> - prices[i]);        &#125;        <span class="hljs-keyword">return</span> dp[prices.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>圆圈中最后剩下的数字</title>
    <link href="/2020/10/19/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2020/10/19/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="圆圈中最后剩下的数字"><a href="#圆圈中最后剩下的数字" class="headerlink" title="圆圈中最后剩下的数字"></a><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" target="_blank" rel="noopener">圆圈中最后剩下的数字</a></h1><p><strong>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</strong></p><p><strong>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</strong></p><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入: n = <span class="hljs-number">5</span>, m = <span class="hljs-number">3</span>输出: <span class="hljs-number">3</span></code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs angelscript">输入: n = <span class="hljs-number">10</span>, m = <span class="hljs-number">17</span>输出: <span class="hljs-number">2</span></code></pre><p><strong>限制：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= m &lt;= 10^6</code></li></ul><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>​    <strong>这个问题本质上是一个约瑟夫环问题</strong></p><blockquote><p>N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。</p></blockquote><ul><li>首先我们规定 <code>F（n,m）</code>是指n个人，数到第m个被移出队列，然后m+1为下一轮报数的第一个人</li></ul><p>那么引自LeetCode上的题解</p><p><img src="/2020/10/19/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/F:%5Chexo%5Csource_posts%5C%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97%5Cd7768194055df1c3d3f6b503468704606134231de62b4ea4b9bdeda7c58232f4-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF1.png" srcset="/img/loading.gif" alt="d7768194055df1c3d3f6b503468704606134231de62b4ea4b9bdeda7c58232f4-约瑟夫环1"></p><ul><li>根据上图我们很明显的知道， <strong>最后剩下的人序号一定为0</strong></li><li>那么，我们反向推理 <code>N=7 -&gt; N=8</code>的过程</li><li>首先将被移出队列的 <code>C</code>重新添加到队列，然后发现溢出，那么就将溢出的m个元素放到队列头部，这时候要注意取余，<strong>取余的值是当前队列长度</strong></li></ul><p><img src="/2020/10/19/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/F:%5Chexo%5Csource_posts%5C%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97%5C68509352d82d4a19678ed67a5bde338f86c7d0da730e3a69546f6fa61fb0063c-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF2.png" srcset="/img/loading.gif" alt="68509352d82d4a19678ed67a5bde338f86c7d0da730e3a69546f6fa61fb0063c-约瑟夫环2"></p><ul><li>那么我们就可以总结出规律 <code>F(n,m) = [f(n-1,m)+m]%n</code></li><li>写出代码，使用循环，让 i从2开始，递增到n，最后得到最后一个人的初始下标，返回即可</li></ul><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lastRemaining</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;        <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;i++)        &#123;            pos = (pos + m) % i;        &#125;        <span class="hljs-keyword">return</span> pos;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>约瑟夫环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro简单实例</title>
    <link href="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    <url>/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Shiro-Springboot简单实例"><a href="#Shiro-Springboot简单实例" class="headerlink" title="Shiro+Springboot简单实例"></a>Shiro+Springboot简单实例</h3><h2 id="Shiro原理"><a href="#Shiro原理" class="headerlink" title="Shiro原理"></a>Shiro原理</h2><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014144409975.png" srcset="/img/loading.gif" alt="image-20201014144409975"></p><p><strong>Authentication（认证）, Authorization（授权）, Session Management（会话管理）, Cryptography（加密）被 Shiro 框架的开发团队称之为应用安全的四大基石</strong></p><ul><li><strong>Authentication（认证）：</strong>用户身份识别，通常被称为用户“登录”</li><li><strong>Authorization（授权）：</strong>访问控制。比如某个用户是否具有某个操作的使用权限。</li><li><strong>Session Management（会话管理）：</strong>特定于用户的会话管理,甚至在非web 或 EJB 应用程序。</li><li><strong>Cryptography（加密）：</strong>在对数据源使用加密算法加密的同时，保证易于使用。</li></ul><p><strong>还有其他的功能来支持和加强这些不同应用环境下安全领域的关注点。特别是对以下的功能支持：</strong></p><ul><li><strong>Web支持：</strong>Shiro的Web支持API有助于保护Web应用程序。</li><li><strong>缓存：</strong>缓存是Apache Shiro API中的第一级，以确保安全操作保持快速和高效。</li><li><strong>并发性：</strong>Apache Shiro支持具有并发功能的多线程应用程序。</li><li><strong>测试：</strong>存在测试支持，可帮助您编写单元测试和集成测试，并确保代码按预期得到保障。</li><li><strong>“运行方式”：</strong>允许用户承担另一个用户的身份(如果允许)的功能，有时在管理方案中很有用。</li><li><strong>“记住我”：</strong>记住用户在会话中的身份，所以用户只需要强制登录即可。</li></ul><p>在概念层，Shiro 架构包含三个主要的理念：Subject,SecurityManager和 Realm。下面的图展示了这些组件如何相互作用，我们将在下面依次对其进行描述。</p><p><strong>注意：</strong> Shiro不会去维护用户、维护权限，这些需要我们自己去设计/提供，然后通过相应的接口注入给Shiro</p><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014145202465.png" srcset="/img/loading.gif" alt="image-20201014145202465"></p><ul><li><strong>Subject：</strong>当前用户，Subject 可以是一个人，但也可以是第三方服务、守护进程帐户、时钟守护任务或者其它–当前和软件交互的任何事件。</li><li><strong>SecurityManager：</strong>管理所有Subject，SecurityManager 是 Shiro 架构的核心，配合内部安全组件共同组成安全伞。</li><li><strong>Realms：</strong>用于进行权限信息的验证，我们自己实现。Realm 本质上是一个特定的安全 DAO：它封装与数据源连接的细节，得到Shiro 所需的相关的数据。在配置 Shiro 的时候，你必须指定至少一个Realm 来实现认证（authentication）和/或授权（authorization）。</li></ul><p>我们需要实现<strong>Realms的Authentication 和 Authorization</strong>。其中 <strong>Authentication 是用来验证用户身份</strong>，<strong>Authorization 是授权访问控制</strong>，用于对用户进行的操作授权，证明该用户是否允许进行当前操作，如访问某个链接，某个资源文件等。</p><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014145609711.png" srcset="/img/loading.gif" alt="image-20201014145609711"></p><p><strong>使用SpringBoot，Shiro，hibernate正向工程</strong></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014143224277.png" srcset="/img/loading.gif" alt="image-20201014143224277"></p><h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lsh<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>shiro-demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><pre><code class="hljs properties"><span class="hljs-comment">#thymeleaf 配置</span><span class="hljs-meta">spring.thymeleaf.mode</span>=<span class="hljs-string">HTML5</span><span class="hljs-meta">spring.thymeleaf.encoding</span>=<span class="hljs-string">UTF-8</span><span class="hljs-meta">spring.thymeleaf.servlet.content-type</span>=<span class="hljs-string">text/html</span><span class="hljs-comment">#缓存设置为false, 这样修改之后马上生效，便于调试</span><span class="hljs-meta">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><span class="hljs-comment">#数据库</span><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/testdb?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">123456</span><span class="hljs-meta">spring.jpa.properties.hibernate.hbm2ddl.auto</span>=<span class="hljs-string">update</span><span class="hljs-comment">#显示SQL语句</span><span class="hljs-meta">spring.jpa.show-sql</span>=<span class="hljs-string">true</span><span class="hljs-comment">#不加下面这句则不会默认创建MyISAM引擎的数据库</span><span class="hljs-meta">spring.jpa.database-platform</span>=<span class="hljs-string">org.hibernate.dialect.MySQL5InnoDBDialect</span><span class="hljs-comment">#自己重写的配置类，默认使用utf8编码</span><span class="hljs-meta">spring.jpa.properties.hibernate.dialect</span>=<span class="hljs-string">com.lsh.shirodemo.config.MySQLConfig</span></code></pre><h2 id="首先编写各个阶层，然后用注解生成数据库表"><a href="#首先编写各个阶层，然后用注解生成数据库表" class="headerlink" title="首先编写各个阶层，然后用注解生成数据库表"></a>首先编写各个阶层，然后用注解生成数据库表</h2><p><img src="/2020/10/14/Shiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B/F:%5Chexo%5Csource_posts%5CShiro%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8B%5Cimage-20201014143320080.png" srcset="/img/loading.gif" alt="image-20201014143320080"></p><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@Entity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysPermission</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue</span>    <span class="hljs-keyword">private</span> Long id; <span class="hljs-comment">// 主键.</span>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 权限名称,如 user:select</span>    <span class="hljs-keyword">private</span> String description; <span class="hljs-comment">// 权限描述,用于UI显示</span>    <span class="hljs-keyword">private</span> String url; <span class="hljs-comment">// 权限地址.</span>    <span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"permissions"</span>&#125;)    <span class="hljs-meta">@ManyToMany</span>(fetch = FetchType.EAGER)    <span class="hljs-meta">@JoinTable</span>(name = <span class="hljs-string">"SysRolePermission"</span>,            joinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"permissionId"</span>)&#125;,            inverseJoinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"roleId"</span>)&#125;)    <span class="hljs-keyword">private</span> List&lt;SysRole&gt; roles; <span class="hljs-comment">// 一个权限可以被多个角色使用</span>    <span class="hljs-comment">/** getter and setter */</span>&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@Entity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysRole</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue</span>    <span class="hljs-keyword">private</span> Long id; <span class="hljs-comment">// 主键.</span>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 角色名称,如 admin/user</span>    <span class="hljs-keyword">private</span> String description; <span class="hljs-comment">// 角色描述,用于UI显示</span>    <span class="hljs-comment">// 角色 -- 权限关系：多对多</span>    <span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"roles"</span>&#125;)    <span class="hljs-meta">@ManyToMany</span>(fetch = FetchType.EAGER)    <span class="hljs-meta">@JoinTable</span>(name = <span class="hljs-string">"SysRolePermission"</span>,            joinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"roleId"</span>)&#125;,            inverseJoinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"permissionId"</span>)&#125;)    <span class="hljs-keyword">private</span> List&lt;SysPermission&gt; permissions;    <span class="hljs-comment">// 用户 -- 角色关系：多对多</span>    <span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"roles"</span>&#125;)    <span class="hljs-meta">@ManyToMany</span>    <span class="hljs-meta">@JoinTable</span>(name = <span class="hljs-string">"SysUserRole"</span>,            joinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"roleId"</span>)&#125;,            inverseJoinColumns = &#123;<span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"uid"</span>)&#125;)    <span class="hljs-keyword">private</span> List&lt;UserInfo&gt; userInfos;<span class="hljs-comment">// 一个角色对应多个用户</span>    <span class="hljs-comment">/** getter and setter */</span>&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@Entity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue</span>    <span class="hljs-keyword">private</span> Long id; <span class="hljs-comment">// 主键.</span>    <span class="hljs-meta">@Column</span>(unique = <span class="hljs-keyword">true</span>)    <span class="hljs-keyword">private</span> String username; <span class="hljs-comment">// 登录账户,唯一.</span>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 名称(匿名或真实姓名),用于UI显示</span>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">// 密码.</span>    <span class="hljs-keyword">private</span> String salt; <span class="hljs-comment">// 加密密码的盐</span>    <span class="hljs-meta">@JsonIgnoreProperties</span>(value = &#123;<span class="hljs-string">"userInfos"</span>&#125;)    <span class="hljs-meta">@ManyToMany</span>(fetch = FetchType.EAGER) <span class="hljs-comment">// 立即从数据库中进行加载数据</span>    <span class="hljs-meta">@JoinTable</span>(name = <span class="hljs-string">"SysUserRole"</span>,            joinColumns = <span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"uid"</span>),            inverseJoinColumns = <span class="hljs-meta">@JoinColumn</span>(name = <span class="hljs-string">"roleId"</span>))    <span class="hljs-keyword">private</span> List&lt;SysRole&gt; roles; <span class="hljs-comment">// 一个用户具有多个角色</span>    <span class="hljs-comment">/** getter and setter */</span>&#125;</code></pre><p><strong>然后运行主程序就可以生成数据库表</strong></p><p><strong>插入数据</strong></p><pre><code class="hljs mysql">INSERT INTO &#96;user_info&#96; (&#96;id&#96;,&#96;name&#96;,&#96;password&#96;,&#96;salt&#96;,&#96;username&#96;) VALUES (1, &#39;管理员&#39;,&#39;951cd60dec2104024949d2e0b2af45ae&#39;, &#39;xbNIxrQfn6COSYn1&#x2F;GdloA&#x3D;&#x3D;&#39;, &#39;wmyskxz&#39;);INSERT INTO &#96;sys_permission&#96; (&#96;id&#96;,&#96;description&#96;,&#96;name&#96;,&#96;url&#96;) VALUES (1,&#39;查询用户&#39;,&#39;userInfo:view&#39;,&#39;&#x2F;userList&#39;);INSERT INTO &#96;sys_permission&#96; (&#96;id&#96;,&#96;description&#96;,&#96;name&#96;,&#96;url&#96;) VALUES (2,&#39;增加用户&#39;,&#39;userInfo:add&#39;,&#39;&#x2F;userAdd&#39;);INSERT INTO &#96;sys_permission&#96; (&#96;id&#96;,&#96;description&#96;,&#96;name&#96;,&#96;url&#96;) VALUES (3,&#39;删除用户&#39;,&#39;userInfo:delete&#39;,&#39;&#x2F;userDelete&#39;);INSERT INTO &#96;sys_role&#96; (&#96;id&#96;,&#96;description&#96;,&#96;name&#96;) VALUES (1,&#39;管理员&#39;,&#39;admin&#39;);INSERT INTO &#96;sys_role_permission&#96; (&#96;permission_id&#96;,&#96;role_id&#96;) VALUES (1,1);INSERT INTO &#96;sys_role_permission&#96; (&#96;permission_id&#96;,&#96;role_id&#96;) VALUES (2,1);INSERT INTO &#96;sys_user_role&#96; (&#96;role_id&#96;,&#96;uid&#96;) VALUES (1,1);</code></pre><ul><li>dao ：只编写一个测试方法，其他的都直接返回，简单的验证权限即可</li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserInfoDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">UserInfo</span>,<span class="hljs-title">Long</span>&gt; </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">findByUsername</span><span class="hljs-params">(String username)</span></span>;&#125;</code></pre><ul><li>service和impl </li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserInfoService</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">findByUsername</span><span class="hljs-params">(String username)</span></span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfoServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserInfoService</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    UserInfoDao userInfoDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">findByUsername</span><span class="hljs-params">(String username)</span> </span>&#123;        <span class="hljs-keyword">return</span> userInfoDao.findByUsername(username);    &#125;&#125;</code></pre><h2 id="Config包下编写shiro和mysql配置类"><a href="#Config包下编写shiro和mysql配置类" class="headerlink" title="Config包下编写shiro和mysql配置类"></a>Config包下编写shiro和mysql配置类</h2><h3 id="MySQLConfig"><a href="#MySQLConfig" class="headerlink" title="MySQLConfig"></a>MySQLConfig</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySQLConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">MySQL5InnoDBDialect</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTableTypeString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"ENGINE=InnoDB DEFAULT CHARSET=utf8"</span>;    &#125;&#125;<span class="hljs-comment">//这个文件关联的是配置文件中最后一个配置，是让 Hibernate 默认创建 InnoDB 引擎并默认使用 utf-8 编码</span></code></pre><h3 id="MyShiroRealm"><a href="#MyShiroRealm" class="headerlink" title="MyShiroRealm"></a>MyShiroRealm</h3><p><strong>自定义Realm</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.shirodemo.config;<span class="hljs-keyword">import</span> com.lsh.shirodemo.entity.SysPermission;<span class="hljs-keyword">import</span> com.lsh.shirodemo.entity.SysRole;<span class="hljs-keyword">import</span> com.lsh.shirodemo.entity.UserInfo;<span class="hljs-keyword">import</span> com.lsh.shirodemo.service.UserInfoService;<span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;<span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationToken;<span class="hljs-keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;<span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<span class="hljs-keyword">import</span> javax.annotation.Resource;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyShiroRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    UserInfoService userInfoService;    <span class="hljs-comment">//Authorization权限认证授予，进入此方法代表身份认证已经通过</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principalCollection)</span> </span>&#123;        <span class="hljs-comment">//进入这里说明已经通过认证了</span>        <span class="hljs-comment">//获得所有用户信息</span>        UserInfo userInfo = (UserInfo)principalCollection.getPrimaryPrincipal();        <span class="hljs-comment">//定义实例返回</span>        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();        <span class="hljs-keyword">for</span>(SysRole role : userInfo.getRoles())&#123;            <span class="hljs-comment">//添加角色名</span>            simpleAuthorizationInfo.addRole(role.getName());            <span class="hljs-keyword">for</span>(SysPermission permission:role.getPermissions())&#123;                <span class="hljs-comment">//添加角色权限</span>                simpleAuthorizationInfo.addStringPermission(permission.getName());            &#125;        &#125;        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken authenticationToken)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;        <span class="hljs-comment">//根据Token获取用户名</span>        String username = (String)authenticationToken.getPrincipal();        <span class="hljs-comment">//根据username获得用户详细信息</span>        UserInfo userInfo = userInfoService.findByUsername(username);        <span class="hljs-keyword">if</span>(userInfo == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-comment">//构造方法实例返回</span>        SimpleAuthenticationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(                userInfo,                userInfo.getPassword(),                ByteSource.Util.bytes(userInfo.getSalt()),                getName()        );        <span class="hljs-keyword">return</span> simpleAuthorizationInfo;    &#125;&#125;</code></pre><h3 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a><strong>ShiroConfig</strong></h3><p>Apache Shiro 的核心通过 Filter 来实现，就好像 SpringMvc 通过 DispachServlet 来主控制一样。 既然是使用 Filter 一般也就能猜到，是通过URL规则来进行过滤和权限校验，所以我们需要定义一系列关于URL的规则和访问权限。</p><p>Filter Chain定义说明：</p><ul><li>1、一个URL可以配置多个Filter，使用逗号分隔</li><li>2、当设置多个过滤器时，全部验证通过，才视为通过</li><li>3、部分过滤器可指定参数，如perms，roles</li></ul><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.shirodemo.config;<span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<span class="hljs-keyword">import</span> org.apache.shiro.mgt.SecurityManager;<span class="hljs-keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;<span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;<span class="hljs-keyword">import</span> java.util.LinkedHashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">shirFilter</span><span class="hljs-params">(SecurityManager securityManager)</span> </span>&#123;        System.out.println(<span class="hljs-string">"ShiroConfiguration.shirFilter()"</span>);        <span class="hljs-comment">//定义返回实例，实例需要setSecurityManager（传入参数）</span>        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();        shiroFilterFactoryBean.setSecurityManager(securityManager);        <span class="hljs-comment">// 拦截器.</span>        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, String&gt;();        <span class="hljs-comment">// 配置不会被拦截的链接 顺序判断</span>        filterChainDefinitionMap.put(<span class="hljs-string">"/static/**"</span>, <span class="hljs-string">"anon"</span>);        <span class="hljs-comment">// 配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span>        filterChainDefinitionMap.put(<span class="hljs-string">"/logout"</span>, <span class="hljs-string">"logout"</span>);        <span class="hljs-comment">// &lt;!-- 过滤链定义，从上向下顺序执行，一般将/**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span>        <span class="hljs-comment">// &lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span>        filterChainDefinitionMap.put(<span class="hljs-string">"/**"</span>, <span class="hljs-string">"authc"</span>);        <span class="hljs-comment">// 如果不设置默认会自动寻找Web工程根目录下的"/login.jsp"页面</span>        shiroFilterFactoryBean.setLoginUrl(<span class="hljs-string">"/login"</span>);        <span class="hljs-comment">// 登录成功后要跳转的链接</span>        shiroFilterFactoryBean.setSuccessUrl(<span class="hljs-string">"/index"</span>);        <span class="hljs-comment">//未授权界面;</span>        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="hljs-string">"/403"</span>);        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);        <span class="hljs-keyword">return</span> shiroFilterFactoryBean;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 凭证匹配器</span><span class="hljs-comment">     * （由于我们的密码校验交给Shiro的SimpleAuthenticationInfo进行处理了）</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> HashedCredentialsMatcher <span class="hljs-title">hashedCredentialsMatcher</span><span class="hljs-params">()</span> </span>&#123;        HashedCredentialsMatcher hashedCredentialsMatcher = <span class="hljs-keyword">new</span> HashedCredentialsMatcher();        hashedCredentialsMatcher.setHashAlgorithmName(<span class="hljs-string">"md5"</span>); <span class="hljs-comment">// 散列算法:这里使用MD5算法;</span>        hashedCredentialsMatcher.setHashIterations(<span class="hljs-number">2</span>); <span class="hljs-comment">// 散列的次数，比如散列两次，相当于 md5(md5(""));</span>        <span class="hljs-keyword">return</span> hashedCredentialsMatcher;    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> MyShiroRealm <span class="hljs-title">myShiroRealm</span><span class="hljs-params">()</span> </span>&#123;        MyShiroRealm myShiroRealm = <span class="hljs-keyword">new</span> MyShiroRealm();        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());        <span class="hljs-keyword">return</span> myShiroRealm;    &#125;<span class="hljs-comment">//securityManager注册Realm规则（自定义）</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> SecurityManager <span class="hljs-title">securityManager</span><span class="hljs-params">()</span> </span>&#123;        DefaultWebSecurityManager securityManager = <span class="hljs-keyword">new</span> DefaultWebSecurityManager();        securityManager.setRealm(myShiroRealm());        <span class="hljs-keyword">return</span> securityManager;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 开启shiro aop注解支持.</span><span class="hljs-comment">     * 使用代理方式;所以需要开启代码支持;</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> securityManager</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="hljs-title">authorizationAttributeSourceAdvisor</span><span class="hljs-params">(SecurityManager securityManager)</span> </span>&#123;        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="hljs-keyword">new</span> AuthorizationAttributeSourceAdvisor();        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);        <span class="hljs-keyword">return</span> authorizationAttributeSourceAdvisor;    &#125;    <span class="hljs-meta">@Bean</span>(name = <span class="hljs-string">"simpleMappingExceptionResolver"</span>)    <span class="hljs-keyword">public</span> SimpleMappingExceptionResolver    createSimpleMappingExceptionResolver() &#123;        SimpleMappingExceptionResolver r = <span class="hljs-keyword">new</span> SimpleMappingExceptionResolver();        Properties mappings = <span class="hljs-keyword">new</span> Properties();        mappings.setProperty(<span class="hljs-string">"DatabaseException"</span>, <span class="hljs-string">"databaseError"</span>); <span class="hljs-comment">// 数据库异常处理</span>        mappings.setProperty(<span class="hljs-string">"UnauthorizedException"</span>, <span class="hljs-string">"403"</span>);        r.setExceptionMappings(mappings);  <span class="hljs-comment">// None by default</span>        r.setDefaultErrorView(<span class="hljs-string">"error"</span>);    <span class="hljs-comment">// No default</span>        r.setExceptionAttribute(<span class="hljs-string">"ex"</span>);     <span class="hljs-comment">// Default is "exception"</span>        <span class="hljs-comment">//r.setWarnLogCategory("example.MvcLogger");     // No default</span>        <span class="hljs-keyword">return</span> r;    &#125;&#125;</code></pre><h2 id="Controller测试"><a href="#Controller测试" class="headerlink" title="Controller测试"></a>Controller测试</h2><h3 id="HomeController"><a href="#HomeController" class="headerlink" title="HomeController"></a>HomeController</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.shirodemo.controller;<span class="hljs-keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;<span class="hljs-keyword">import</span> org.apache.shiro.authc.UnknownAccountException;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(&#123;<span class="hljs-string">"/"</span>,<span class="hljs-string">"/index"</span>&#125;)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"/index"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/login"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest request, Map&lt;String,Object&gt; map)</span></span>&#123;        System.out.println(<span class="hljs-string">"HomeController.login()"</span>);        String exception = (String)request.getAttribute(<span class="hljs-string">"shiroLoginFailure"</span>);        System.out.println(<span class="hljs-string">"exception="</span>+exception);        String msg = <span class="hljs-string">""</span>;        <span class="hljs-keyword">if</span>(exception!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">if</span>(UnknownAccountException<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getName</span>().<span class="hljs-title">equals</span>(<span class="hljs-title">exception</span>))</span>&#123;                System.out.println(<span class="hljs-string">"UnknownAccountException--=&gt;账户不存在"</span>);                msg = <span class="hljs-string">"UnknownAccountException--=&gt;账户不存在"</span>;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (IncorrectCredentialsException<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getName</span>().<span class="hljs-title">equals</span>(<span class="hljs-title">exception</span>)) </span>&#123;                System.out.println(<span class="hljs-string">"IncorrectCredentialsException -- &gt; 密码不正确："</span>);                msg = <span class="hljs-string">"IncorrectCredentialsException -- &gt; 密码不正确："</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"kaptchaValidateFailed"</span>.equals(exception)) &#123;                System.out.println(<span class="hljs-string">"kaptchaValidateFailed -- &gt; 验证码错误"</span>);                msg = <span class="hljs-string">"kaptchaValidateFailed -- &gt; 验证码错误"</span>;            &#125; <span class="hljs-keyword">else</span> &#123;                msg = <span class="hljs-string">"else &gt;&gt; "</span>+exception;                System.out.println(<span class="hljs-string">"else -- &gt;"</span> + exception);            &#125;        &#125;        map.put(<span class="hljs-string">"msg"</span>,msg);        <span class="hljs-keyword">return</span> <span class="hljs-string">"/login"</span>;    &#125;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/403"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">unauthorizedRole</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">"-----没有权限-----"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"403"</span>;    &#125;&#125;</code></pre><h3 id="UserInfoController"><a href="#UserInfoController" class="headerlink" title="UserInfoController"></a>UserInfoController</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lsh.shirodemo.controller;<span class="hljs-keyword">import</span> com.lsh.shirodemo.entity.UserInfo;<span class="hljs-keyword">import</span> com.lsh.shirodemo.service.UserInfoService;<span class="hljs-keyword">import</span> org.apache.shiro.authz.annotation.RequiresPermissions;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<span class="hljs-keyword">import</span> javax.annotation.Resource;<span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfoController</span> </span>&#123;    <span class="hljs-meta">@Resource</span>    UserInfoService userInfoService;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 按username取出账户信息</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/userList"</span>)    <span class="hljs-meta">@RequiresPermissions</span>(<span class="hljs-string">"userInfo:view"</span>)   <span class="hljs-comment">//权限管理</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserInfo <span class="hljs-title">findUserInfoByUsername</span><span class="hljs-params">(@RequestParam String username)</span></span>&#123;        <span class="hljs-keyword">return</span> userInfoService.findByUsername(username);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 模拟增加账户，有权限管理</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/userAdd"</span>)    <span class="hljs-meta">@RequiresPermissions</span>(<span class="hljs-string">"userInfo:add"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addUserInfo</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"addUserInfo success!"</span>;    &#125;    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/userDelete"</span>)    <span class="hljs-meta">@RequiresPermissions</span>(<span class="hljs-string">"userInfo:delete"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteUserInfo</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"deleteUserInfo success!"</span>;    &#125;&#125;</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>编写好程序后就可以启动，首先访问<code>http://localhost:8080/userList?username=wmyskxz</code>页面，由于没有登录就会跳转到我们配置好的<code>http://localhost:8080/login</code>页面。登陆之后就会看到正确返回的JSON数据，上面这些操作时候触发<code>MyShiroRealm.doGetAuthenticationInfo()</code>这个方法，也就是登录认证的方法。</li><li>登录之后，我们还能访问<code>http://localhost:8080/userAdd</code>页面，因为我们在数据库中提前配置好了权限，能够看到正确返回的数据，但是我们访问<code>http://localhost:8080/userDelete</code>时，就会返回错误页面.</li></ol>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>和为s的连续正数序列</title>
    <link href="/2020/10/02/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/"/>
    <url>/2020/10/02/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-57-II-和为s的连续正数序列"><a href="#剑指-Offer-57-II-和为s的连续正数序列" class="headerlink" title="剑指 Offer 57 - II. 和为s的连续正数序列"></a><a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/" target="_blank" rel="noopener">剑指 Offer 57 - II. 和为s的连续正数序列</a></h1><p><strong>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</strong></p><p><strong>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</strong></p><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入：target = <span class="hljs-number">9</span>输出：[[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]</code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs angelscript">输入：target = <span class="hljs-number">15</span>输出：[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]]</code></pre><p><strong>解题思路：滑动窗口</strong></p><ul><li>也没什么好说的，简单来说就是双指针首先同时指向一个位置，如果窗口内的和小于目标值，那么就扩大，右边增加，同时增加窗口和，如果小于，就缩小，左边减少，同时减少窗口和。</li><li>直接上代码</li></ul><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">findContinuousSequence</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target)</span> </span>&#123;        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; vec;        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">1</span>,sum = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(i &lt;= target/<span class="hljs-number">2</span>)        &#123;            <span class="hljs-keyword">if</span>(sum &lt; target)            &#123;                sum += j;                j++;            &#125;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &gt; target)            &#123;                sum -= i;                i++;            &#125;            <span class="hljs-keyword">else</span>            &#123;                <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ans;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = i;k &lt; j;k++)                &#123;                    ans.push_back(k);                &#125;                vec.push_back(ans);                sum -= i;                i++;            &#125;        &#125;        <span class="hljs-keyword">return</span> vec;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组中的逆序对</title>
    <link href="/2020/09/28/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <url>/2020/09/28/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-51-数组中的逆序对"><a href="#剑指-Offer-51-数组中的逆序对" class="headerlink" title="剑指 Offer 51. 数组中的逆序对"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">剑指 Offer 51. 数组中的逆序对</a></h1><p><strong>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</strong></p><p><strong>示例 1:</strong></p><pre><code class="hljs angelscript">输入: [<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]输出: <span class="hljs-number">5</span></code></pre><p><strong>限制：</strong></p><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= 数组长度 &lt;= <span class="hljs-number">50000</span></code></pre><p><strong>解题思路:</strong></p><p>此题要求两个数字的逆序对，首先，暴力法不可能实现，因为此题难度为hard，那么我们自然要寻找其他方法</p><p>由于题目要求：<strong>前面一个数字大于后面数字，则组成逆序对</strong></p><p>那么我们可以想到使用 <strong>归并排序</strong> ，因为归并的过程中首先拆分，然后自然的进行1对1的大小比对，进行排序，我们只需要在过程中加入一个变量count进行累加，便可以return回结果</p><p><strong>那么题目思路确认：归并排序改动</strong></p><p><strong>如何确认count的自增呢？</strong>这是一个非常重要的问题，可以看下面的解释</p><p>下面摘自 <a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/solution/shu-zu-zhong-de-ni-xu-dui-by-leetcode-solution/" target="_blank" rel="noopener">LeetCode官方题解</a></p><p>那么求逆序对和归并排序又有什么关系呢？关键就在于「归并」当中「并」的过程。我们通过一个实例来看看。</p><p>假设我们有两个已排序的序列等待合并，分别是 <code>L = { 8, 12, 16, 22, 100 }``L={8,12,16,22,100}</code> 和 <code>R = { 9, 26, 55, 64, 91 }``R={9,26,55,64,91}</code></p><p>一开始我们用指针 lPtr = 0 指向 L 的首部，rPtr = 0 指向 R 的头部。记已经合并好的部分为 M。</p><pre><code class="hljs angelscript">L = [<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">100</span>]   R = [<span class="hljs-number">9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">55</span>, <span class="hljs-number">64</span>, <span class="hljs-number">91</span>]  M = []     |                          |   lPtr                       rPtr</code></pre><p>我们发现 <code>lPtr</code> 指向的元素小于 <code>rPtr</code> 指向的元素，于是把 <code>lPtr</code> 指向的元素放入答案，并把 <code>lPtr</code> 后移一位。</p><pre><code class="hljs angelscript">L = [<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">100</span>]   R = [<span class="hljs-number">9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">55</span>, <span class="hljs-number">64</span>, <span class="hljs-number">91</span>]  M = [<span class="hljs-number">8</span>]        |                       |      lPtr                     rPtr</code></pre><p>这个时候我们把左边的 <strong>8</strong> 加入了答案，我们发现右边没有数比 <strong>8</strong> 小，所以 <strong>8</strong> 对逆序对总数的「贡献」为 <strong>0</strong>。</p><p>接着我们继续合并，把 <strong>9</strong> 加入了答案，此时 <code>lPtr</code> 指向 <strong>12</strong>，<code>rPtr</code> 指向 <strong>26</strong>。</p><pre><code class="hljs angelscript">L = [<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>, <span class="hljs-number">100</span>]   R = [<span class="hljs-number">9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">55</span>, <span class="hljs-number">64</span>, <span class="hljs-number">91</span>]  M = [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>]        |                          |       lPtr                       rPtr</code></pre><p>此时 <code>lPtr</code> 比 <code>rPtr</code> 小，把 lPtr 对应的数加入答案，并考虑它对逆序对总数的贡献为 <code>rPtr</code> 相对<strong>R</strong>首位置的偏移 <strong>1</strong>（即右边只有一个数比 12 小，所以只有它和 12 构成逆序对），以此类推。</p><p>我们发现用这种「算贡献」的思想在合并的过程中计算逆序对的数量的时候，只在 lPtr 右移的时候计算，是基于这样的事实：当前 <code>lPtr</code> 指向的数字比 <code>rPtr</code> 小，但是比 RR 中 <code>[0 ... rPtr - 1]</code> 的其他数字大，<code>[0 ... rPtr - 1]</code> 的其他数字本应当排在 lPtr 对应数字的左边，但是它排在了右边，所以这里就贡献了 <code>rPtr</code> 个逆序对。</p><p><strong>实际上，如果令 j = mid + 1, j在归并排序过程中发生变化，如果是nums[i] &lt; nums[j] ，那么增加的逆序数对就是 <code>j - (mid + 1)</code></strong></p><p><strong>AC代码：</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">tmp</span><span class="hljs-params">(n)</span></span>;        <span class="hljs-keyword">return</span> mergeSort(nums,tmp,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; tmp,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r)</span></span>&#123;        <span class="hljs-keyword">if</span>(l &gt;= r)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> mid = (l+r)/<span class="hljs-number">2</span>;        <span class="hljs-keyword">int</span> count = mergeSort(nums,tmp,l,mid) + mergeSort(nums,tmp,mid+<span class="hljs-number">1</span>,r);        <span class="hljs-keyword">int</span> i = l,j = mid+<span class="hljs-number">1</span>,pos = l;        <span class="hljs-keyword">while</span>(i &lt;= mid&amp;&amp;j &lt;= r)        &#123;            <span class="hljs-keyword">if</span>(nums[i]&lt;=nums[j])            &#123;                tmp[pos] = nums[i];                i++;                count += (j - (mid+<span class="hljs-number">1</span>));            &#125;<span class="hljs-keyword">else</span>&#123;                tmp[pos] = nums[j];                j++;            &#125;            pos++;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = i;k &lt;= mid;k++)        &#123;            tmp[pos++] = nums[k];            count += (j - (mid+<span class="hljs-number">1</span>));        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = j;k &lt;= r;k++)        &#123;            tmp[pos++] = nums[k];        &#125;        copy(tmp.<span class="hljs-built_in">begin</span>()+l,tmp.<span class="hljs-built_in">begin</span>()+r+<span class="hljs-number">1</span>,nums.<span class="hljs-built_in">begin</span>()+l);        <span class="hljs-keyword">return</span> count;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长不含重复字符的子字符串</title>
    <link href="/2020/09/26/%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2020/09/26/%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-48-最长不含重复字符的子字符串"><a href="#剑指-Offer-48-最长不含重复字符的子字符串" class="headerlink" title="剑指 Offer 48. 最长不含重复字符的子字符串"></a><a href="https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/" target="_blank" rel="noopener">剑指 Offer 48. 最长不含重复字符的子字符串</a></h1><p><strong>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</strong></p><pre><code class="hljs makefile"><span class="hljs-section">输入: "abcabcbb"</span><span class="hljs-section">输出: 3 </span><span class="hljs-section">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span></code></pre><pre><code class="hljs makefile"><span class="hljs-section">输入: "bbbbb"</span><span class="hljs-section">输出: 1</span><span class="hljs-section">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span></code></pre><pre><code class="hljs makefile"><span class="hljs-section">输入: "pwwkew"</span><span class="hljs-section">输出: 3</span><span class="hljs-section">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3</span>请注意，你的答案必须是 子串 的长度，<span class="hljs-string">"pwke"</span> 是一个子序列，不是子串</code></pre><ul><li><code>s.length &lt;= 40000</code></li></ul><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​    这题可以用动态规划来分析：</p><ul><li><p><strong>状态定义</strong>： 设动态规划列表dp，dp[j] 代表以字符s[j] 为结尾的 “最长不重复子字符串”的长度</p></li><li><p><strong>转移方程</strong>： 固定右边界j，设字符串s[j] 左边距离最近的相同的字符串为s[i] ，s[i] = s[j]</p><ul><li>当i &lt; 0,说明s[j]左边没有相同字符，dp[j] = dp[j-1] + 1</li><li>当dp[j-1] &lt; j - i ,说明s[i] 在子字符串dp[j-1]区间之外，那么dp[j] = dp[j-1] + 1</li><li>当dp[j-1]&gt;j - i,说明s[i] 在子字符串dp[j-1]区间之中，那么dp[j] = j - i；</li></ul></li><li><p>那么得出状态转移方程</p><p>dp[j] = dp[j-1] + 1;    (dp[j-1] &lt; j - i)</p><p>dp[j] = j - i;                (dp[j-1]  &gt;= j - i)</p></li><li><p>返回值返回max(dp)，利用循环赋值找最大值即可</p></li></ul><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>,tmp = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; s.<span class="hljs-built_in">size</span>();j++)        &#123;            <span class="hljs-keyword">int</span> i = j<span class="hljs-number">-1</span>;            <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span>&amp;&amp;s[i]!=s[j]) i--;<span class="hljs-comment">//线性遍历寻找s[i] == s[j]中i的下标</span>            tmp = tmp &lt; j-i?tmp+<span class="hljs-number">1</span>:j-i;<span class="hljs-comment">//状态转移方程组</span>            res = <span class="hljs-built_in">max</span>(res,tmp);<span class="hljs-comment">//循环赋值寻找最大值</span>        &#125;        <span class="hljs-keyword">return</span> res;<span class="hljs-comment">//返回dp最大值</span>    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的子结构</title>
    <link href="/2020/09/20/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    <url>/2020/09/20/%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-26-树的子结构"><a href="#剑指-Offer-26-树的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构"></a><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/" target="_blank" rel="noopener">剑指 Offer 26. 树的子结构</a></h1><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p><p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p><p>例如:<br><strong>给定的树 A:</strong>            </p><p>   3<br>  / <br>  4  5<br> / <br> 1  2</p><p><strong>给定的树 B：</strong></p><p>  4<br> /<br> 1</p><p><strong>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</strong></p><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入：A = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], B = [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]输出：<span class="hljs-literal">false</span></code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs 限制：">输入：A &#x3D; [3,4,5,1,2], B &#x3D; [4,1]输出：true</code></pre><p><strong>限制：</strong></p><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= 节点个数 &lt;= <span class="hljs-number">10000</span></code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>先序遍历树A中的每个节点na </li><li>判断树A中以na为根节点的子树是否包含树B   <strong>对应函数recur（A，B）</strong></li></ol><h4 id="recur-A-B"><a href="#recur-A-B" class="headerlink" title="recur(A,B)"></a>recur(A,B)</h4><ol><li>终止条件：<ol><li>当节点B为空：说明树B匹配完成，返回true</li><li>当节点A为空，说明已经越过树A叶子节点，返回false</li><li>当节点A和节点B的值不同，返回false</li></ol></li><li>返回值<ol><li>判断A和B的左子树节点是否相等，<code>recur(A-&gt;left,B-&gt;right)</code></li><li>判断A和B的右子树节点是否相等,   <code>recur(A-&gt;right,B-&gt;right)</code></li></ol></li></ol><h4 id="isSubStructure-A-B"><a href="#isSubStructure-A-B" class="headerlink" title="isSubStructure(A,B)"></a>isSubStructure(A,B)</h4><ol><li>空值处理，返回false</li><li>若树B是树A的子结构，满足以下三种情况<ol><li>以<strong>节点A为根节点</strong>的子树包含B  <code>recur(A,B)</code></li><li>树B是<strong>树A左子树</strong>的子结构，对应 <code>isSubStructure(A-&gt;left,B)</code></li><li>树B是<strong>树A右子树</strong>的子结构，对应 <code>isSubStructure(A-&gt;right,B)</code>；</li></ol></li></ol><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isSubStructure</span><span class="hljs-params">(TreeNode* A, TreeNode* B)</span> </span>&#123;        <span class="hljs-keyword">if</span>(A == <span class="hljs-literal">NULL</span>||B == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">return</span> recur(A,B)||isSubStructure(A-&gt;left,B)||isSubStructure(A-&gt;right,B);    &#125;    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">recur</span><span class="hljs-params">(TreeNode* A,TreeNode* B)</span></span>&#123;        <span class="hljs-keyword">if</span>(B == <span class="hljs-literal">NULL</span>)   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">if</span>(A == <span class="hljs-literal">NULL</span> || A-&gt;val != B-&gt;val)   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">return</span> recur(A-&gt;left,B-&gt;left)&amp;&amp;recur(A-&gt;right,B-&gt;right);    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2020/09/16/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/09/16/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/" target="_blank" rel="noopener">剑指 Offer 24. 反转链表</a></h1><h2 id="定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。"><a href="#定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。" class="headerlink" title="定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。"></a>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</h2><p><strong>示例:</strong></p><pre><code class="hljs angelscript">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL输出: <span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;NULL</code></pre><p><strong>限制：</strong></p><p><code>0 &lt;= 节点个数 &lt;= 5000</code></p><h3 id="解题思路：双指针，就地反转"><a href="#解题思路：双指针，就地反转" class="headerlink" title="解题思路：双指针，就地反转"></a>解题思路：双指针，就地反转</h3><ul><li>首先定义两个指针 <code>pre,cur</code>，pre是cur的前一个指针，指向cur指向元素的前一个元素 <code>ListNode* pre = NULL;ListNode* cur = head;</code></li><li>定义while循环，条件是 <code>cur != NULL</code></li><li>然后，我们定义一个暂存的节点tmp指向cur的下一个元素，方便指针向后走 <code>ListNode* tmp = cur-&gt;next;</code></li><li>我们需要反转链表，那么在循环中局部反转，如何做呢？很显然，让 <code>cur-&gt;next = pre</code>即可，这样cur本来向后的指向就指向了前一个元素，达到了反转</li><li>然后 <code>pre = cur</code> 让pre指向cur ，然后 <code>cur = tmp</code>让cur向后走，直到链表所有元素全部被反转</li></ul><p><strong>AC代码</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;        ListNode* pre = <span class="hljs-literal">NULL</span>;        ListNode* cur = head;        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">NULL</span>)        &#123;            ListNode* tmp = cur-&gt;next;            cur-&gt;next = pre;            pre = cur;            cur = tmp;        &#125;        <span class="hljs-keyword">return</span> pre;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值的整数次方</title>
    <link href="/2020/09/16/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <url>/2020/09/16/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-16-数值的整数次方"><a href="#剑指-Offer-16-数值的整数次方" class="headerlink" title="剑指 Offer 16. 数值的整数次方"></a><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/" target="_blank" rel="noopener">剑指 Offer 16. 数值的整数次方</a></h4><h3 id="实现函数double-Power-double-base-int-exponent-，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。"><a href="#实现函数double-Power-double-base-int-exponent-，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。" class="headerlink" title="实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。"></a>实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。</h3><p><strong>示例 1:</strong></p><pre><code class="hljs 示例">输入: 2.00000, 10输出: 1024.00000</code></pre><p><strong>示例 2:</strong></p><pre><code class="hljs angelscript">输入: <span class="hljs-number">2.10000</span>, <span class="hljs-number">3</span>输出: <span class="hljs-number">9.26100</span></code></pre><p><strong>示例 3:</strong></p><pre><code class="hljs angelscript">输入: <span class="hljs-number">2.00000</span>, <span class="hljs-number">-2</span>输出: <span class="hljs-number">0.25000</span>解释: <span class="hljs-number">2</span><span class="hljs-number">-2</span> = <span class="hljs-number">1</span>/<span class="hljs-number">22</span> = <span class="hljs-number">1</span>/<span class="hljs-number">4</span> = <span class="hljs-number">0.25</span></code></pre><p><strong>说明:</strong></p><ul><li>-100.0 &lt; <em>x</em> &lt; 100.0</li><li><em>n</em> 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</li></ul><h4 id="解题思路：快速幂"><a href="#解题思路：快速幂" class="headerlink" title="解题思路：快速幂"></a>解题思路：快速幂</h4><p><img src="/2020/09/16/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/F:%5Chexo%5Csource_posts%5C%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9%5C40a7a874523e26cacae9c502a6e8cf8b58dba878739f17e6bb3ed6be76e97569-Picture1.png" srcset="/img/loading.gif" alt="40a7a874523e26cacae9c502a6e8cf8b58dba878739f17e6bb3ed6be76e97569-Picture1"></p><h4 id="快速幂解析（二分法）："><a href="#快速幂解析（二分法）：" class="headerlink" title="快速幂解析（二分法）："></a>快速幂解析（二分法）：</h4><blockquote><p>快速幂实际上是一种二分思想的应用</p></blockquote><p>根据二分推导，通过循环赋值x = x^2,每次把幂降为n//2，直到幂等于0</p><p>设<code>res = 0</code>，初始化<code>x^n = x^n * res</code>，循环二分时，将多出的一项乘入res，最终返回res便可得到最终答案 </p><table><thead><tr><th>循环</th><th>x^n * (res)</th></tr></thead><tbody><tr><td>第零轮</td><td>3^5 * (1)</td></tr><tr><td>第一轮</td><td>9^2 * (1 * 3)</td></tr><tr><td>第二轮</td><td>81^1 * (1 * 3)</td></tr><tr><td>第三轮</td><td>6561^0 * (1 * 3 * 81)</td></tr><tr><td>返回</td><td>1 * 3 * 81</td></tr></tbody></table><p><strong>AC代码</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        <span class="hljs-keyword">long</span> b = n;        <span class="hljs-keyword">double</span> res = <span class="hljs-number">1.0</span>;        <span class="hljs-keyword">if</span>(b &lt; <span class="hljs-number">0</span>)&#123;            x = <span class="hljs-number">1</span> / x;            b = -b;        &#125;        <span class="hljs-keyword">while</span>(b &gt; <span class="hljs-number">0</span>)&#123;            <span class="hljs-comment">//如果n % 2 == 1,即幂为奇数，那么额外多出一个x，乘入res</span>            <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)  res *= x;            <span class="hljs-comment">//循环x = x^2</span>            x *= x;            <span class="hljs-comment">//n //= 2</span>            b &gt;&gt;= <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二进制中1的个数</title>
    <link href="/2020/09/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2020/09/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="剑指-Offer-15-二进制中1的个数"><a href="#剑指-Offer-15-二进制中1的个数" class="headerlink" title="剑指 Offer 15. 二进制中1的个数"></a><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 15. 二进制中1的个数</a></h2><h3 id="请实现一个函数，输入一个整数，输出该数二进制表示中-1-的个数。例如，把-9-表示成二进制是-1001，有-2-位是-1。因此，如果输入-9，则该函数输出-2。"><a href="#请实现一个函数，输入一个整数，输出该数二进制表示中-1-的个数。例如，把-9-表示成二进制是-1001，有-2-位是-1。因此，如果输入-9，则该函数输出-2。" class="headerlink" title="请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。"></a>请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</h3><p><strong>示例 1：</strong></p><pre><code class="hljs lsl">输入：<span class="hljs-number">00000000000000000000000000001011</span>输出：<span class="hljs-number">3</span>解释：输入的二进制串 <span class="hljs-number">00000000000000000000000000001011</span> 中，共有三位为 '<span class="hljs-number">1</span>'。</code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs lsl">输入：<span class="hljs-number">00000000000000000000000010000000</span>输出：<span class="hljs-number">1</span>解释：输入的二进制串 <span class="hljs-number">00000000000000000000000010000000</span> 中，共有一位为 '<span class="hljs-number">1</span>'。</code></pre><p><strong>示例 3：</strong></p><pre><code class="hljs lsl">输入：<span class="hljs-number">11111111111111111111111111111101</span>输出：<span class="hljs-number">31</span>解释：输入的二进制串 <span class="hljs-number">11111111111111111111111111111101</span> 中，共有 <span class="hljs-number">31</span> 位为 '<span class="hljs-number">1</span>'。</code></pre><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><ul><li>根据 <strong>与运算</strong> 定义，设二进制数字 n<em>n</em> ，则有：<ul><li>若 n &amp; 1 = 0，则n二进制 <strong>最右一位</strong> 为 0；</li><li>若 n &amp; 1 = 1，则 n二进制 <strong>最右一位</strong> 为1 。</li></ul></li><li>根据以上特点，考虑以下 <strong>循环判断</strong> ：<ul><li>判断n最右一位是否为1，根据结果计数</li><li>将n右移一位，(本题要求把数字n看作无符号数，因此使用无符号右移操作)</li></ul></li></ul><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><ul><li>初始化数量统计变量 <code>res = 0</code></li><li>循环逐位判断：当n = 0时跳出<ul><li>​    <code>res +=  n&amp;1</code>:若n&amp;1 = 1，则统计数res加</li><li><code>n &gt;&gt;= 1</code> : 将二进制数字n无符号右移一位(java中无符号右移符号为 &gt;&gt;=)</li></ul></li><li>返回res</li></ul><p><strong>AC代码</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>) &#123;            res += n &amp; <span class="hljs-number">1</span>;            n &gt;&gt;&gt;= <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人的运动范围</title>
    <link href="/2020/09/16/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
    <url>/2020/09/16/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-13-机器人的运动范围"><a href="#剑指-Offer-13-机器人的运动范围" class="headerlink" title="剑指 Offer 13. 机器人的运动范围"></a><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/" target="_blank" rel="noopener">剑指 Offer 13. 机器人的运动范围</a></h1><h3 id="地上有一个m行n列的方格，从坐标-0-0-到坐标-m-1-n-1-。一个机器人从坐标-0-0-的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格-35-37-，因为3-5-3-7-18。但它不能进入方格-35-38-，因为3-5-3-8-19。请问该机器人能够到达多少个格子？"><a href="#地上有一个m行n列的方格，从坐标-0-0-到坐标-m-1-n-1-。一个机器人从坐标-0-0-的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格-35-37-，因为3-5-3-7-18。但它不能进入方格-35-38-，因为3-5-3-8-19。请问该机器人能够到达多少个格子？" class="headerlink" title="地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？"></a>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</h3><p><strong>示例 1：</strong></p><pre><code class="hljs angelscript">输入：m = <span class="hljs-number">2</span>, n = <span class="hljs-number">3</span>, k = <span class="hljs-number">1</span>输出：<span class="hljs-number">3</span></code></pre><p><strong>示例 2：</strong></p><pre><code class="hljs angelscript">输入：m = <span class="hljs-number">3</span>, n = <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>输出：<span class="hljs-number">1</span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n,m &lt;= 100</code></li><li><code>0 &lt;= k &lt;= 20</code></li></ul><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h3><p>​    本题与 矩阵中的路径 类似，是典型的矩阵搜索问题，此类问题通常使用 <strong>DFS或BFS</strong>解决，此题还有2个优化的地方，分别是 <strong>数位之和计算</strong> 和 <strong>搜索方向简化</strong></p><h4 id="数位之和计算"><a href="#数位之和计算" class="headerlink" title="数位之和计算"></a>数位之和计算</h4><p>​    依题意，<code>x -&gt; x+1</code> 的时候 数位之和的增量要分类计算</p><ul><li>​    如果（x+1)%10 = 0  那么 s(x+1) = s(x) - 8</li><li>​    反之，那么s(x+1) = s(x) + 1</li></ul><p>那么就有三元表达式写法</p><pre><code class="hljs java">(x + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> != <span class="hljs-number">0</span> ? s_x + <span class="hljs-number">1</span> : s_x - <span class="hljs-number">8</span></code></pre><h4 id="搜索方向简化"><a href="#搜索方向简化" class="headerlink" title="搜索方向简化"></a>搜索方向简化</h4><p><strong>我们在搜索的过程中搜索方向可以缩减为向右和向下，而不必再向上和向左进行搜索。</strong></p><p>如下图，我们展示了 16 * 16 的地图随着限制条件 k 的放大，可行方格的变化趋势，每个格子里的值为行坐标和列坐标的数位之和，蓝色方格代表非障碍方格，即其值小于等于当前的限制条件 k。我们可以发现随着限制条件 k 的增大，(0, 0) 所在的蓝色方格区域内新加入的非障碍方格都可以由上方或左方的格子移动一步得到。而其他不连通的蓝色方格区域会随着 k 的增大而连通，且连通的时候也是由上方或左方的格子移动一步得到，因此我们可以将我们的搜索方向缩减为向右或向下。</p><p><img src="/2020/09/16/%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/F:%5Chexo%5Csource_posts%5C%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4%5C2019c08d97a5868606aa510808d9b1c147e484f95e3ee90819dd118387dcb4e4-%E5%B9%BB%E7%81%AF%E7%89%8710.jpg" srcset="/img/loading.gif" alt></p><h4 id="深度优先遍历DFS"><a href="#深度优先遍历DFS" class="headerlink" title="深度优先遍历DFS"></a>深度优先遍历DFS</h4><h5 id="算法解析："><a href="#算法解析：" class="headerlink" title="算法解析："></a>算法解析：</h5><ul><li><strong>递归参数</strong>： 当前元素在矩阵中的行列索引 <code>i,j</code>，两者的数位和 <code>s1,s2</code></li><li><strong>终止条件</strong>： 当行列索引不符合要求<strong>或</strong> 当前元素已经访问过（使用visit数组判断是否遍历），返回0，代表不计入可达解</li><li><strong>递推工作</strong><ul><li>标记当前单元格，将索引 <code>i,j</code>存入visit中，代表已经被访问过</li><li>搜索下一单元格，计算当前元素的 <strong>下，右</strong> 两个方向元素的数位和，并开启下层递归</li><li><strong>回溯返回值</strong>：返回 <code>1 + 右方搜索的可达解总数 + 下方搜索的可达解总数</code>，代表从本单元格递归搜索的可达解总数</li></ul></li></ul><p><strong>AC代码</strong></p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">int</span> m, n, k;    <span class="hljs-keyword">boolean</span>[][] visited;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">this</span>.m = m; <span class="hljs-keyword">this</span>.n = n; <span class="hljs-keyword">this</span>.k = k;        <span class="hljs-keyword">this</span>.visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[m][n];        <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> si, <span class="hljs-keyword">int</span> sj)</span> </span>&#123;        <span class="hljs-keyword">if</span>(i &gt;= m || j &gt;= n || k &lt; si + sj || visited[i][j]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        visited[i][j] = <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + dfs(i + <span class="hljs-number">1</span>, j, (i + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> != <span class="hljs-number">0</span> ? si + <span class="hljs-number">1</span> : si - <span class="hljs-number">8</span>, sj) + dfs(i, j + <span class="hljs-number">1</span>, si, (j + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> != <span class="hljs-number">0</span> ? sj + <span class="hljs-number">1</span> : sj - <span class="hljs-number">8</span>);    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵中的路径</title>
    <link href="/2020/09/16/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <url>/2020/09/16/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-12-矩阵中的路径"><a href="#剑指-Offer-12-矩阵中的路径" class="headerlink" title="剑指 Offer 12. 矩阵中的路径"></a><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/" target="_blank" rel="noopener">剑指 Offer 12. 矩阵中的路径</a></h1><h4 id="请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。"><a href="#请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。" class="headerlink" title="请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。"></a>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</h4><pre><code class="hljs xml">[["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]]</code></pre><h4 id="但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。"><a href="#但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。" class="headerlink" title="但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。"></a><strong>但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</strong></h4><p><strong>示例一：</strong></p><pre><code class="hljs prolog">输入：board = [[<span class="hljs-string">"A"</span>,<span class="hljs-string">"B"</span>,<span class="hljs-string">"C"</span>,<span class="hljs-string">"E"</span>],[<span class="hljs-string">"S"</span>,<span class="hljs-string">"F"</span>,<span class="hljs-string">"C"</span>,<span class="hljs-string">"S"</span>],[<span class="hljs-string">"A"</span>,<span class="hljs-string">"D"</span>,<span class="hljs-string">"E"</span>,<span class="hljs-string">"E"</span>]], word = <span class="hljs-string">"ABCCED"</span>输出：true</code></pre><p><strong>示例二：</strong></p><pre><code class="hljs nix">输入：<span class="hljs-attr">board</span> = [[<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>],[<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>]], <span class="hljs-attr">word</span> = <span class="hljs-string">"abcd"</span>输出：<span class="hljs-literal">false</span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= board.length &lt;= 200</code></li><li><code>1 &lt;= board[i].length &lt;= 200</code></li></ul><h2 id="解法：深度优先搜索DFS"><a href="#解法：深度优先搜索DFS" class="headerlink" title="解法：深度优先搜索DFS"></a>解法：深度优先搜索DFS</h2><h3 id="本题是很典型的矩阵搜索问题，可使用DFS-剪枝解决"><a href="#本题是很典型的矩阵搜索问题，可使用DFS-剪枝解决" class="headerlink" title="本题是很典型的矩阵搜索问题，可使用DFS+剪枝解决"></a>本题是很典型的矩阵搜索问题，可使用DFS+剪枝解决</h3><h5 id="算法原理："><a href="#算法原理：" class="headerlink" title="算法原理："></a>算法原理：</h5><ul><li><strong>深度优先搜索</strong>：可以理解为暴力法遍历矩阵中所有字符的可能型。DFS通过递归，先朝一个方向搜到底，再回溯至上一个节点，沿另一个方向搜索，以此类推。</li><li>剪枝：在搜索中， 遇到 <code>这条路不可能和目标字符串匹配成功</code>的情况（例如：此矩阵元素和目标字符不同，此元素已被访问），则应立即返回，称为 <code>可行性剪枝</code></li></ul><h5 id="算法解析："><a href="#算法解析：" class="headerlink" title="算法解析："></a>算法解析：</h5><ol><li><strong>标记当前矩阵元素</strong> 将<code>board[i][j]值暂存于变量tmp</code>，并修改为字符 <code>/</code>代表此元素已经被访问，防止之后搜索的时候重复访问</li><li><strong>搜索下一个单元格</strong> 由题意知道，向上下左右四个方向开启递归，使用 <code>||</code>连接（只要有一条路径可行就返回true）</li><li><strong>还原当前矩阵元素</strong> 将<code>tmp</code>暂存值还原至 <code>board[i][j]</code>元素</li></ol><p>DFS函数返回值：回溯返回值res，代表是否搜索到了字符串</p><p><strong>完整代码</strong></p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">exist</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-built_in">string</span> <span class="hljs-keyword">word</span>)</span> </span>&#123;        <span class="hljs-keyword">int</span> length = <span class="hljs-keyword">word</span>.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">int</span> m = board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">int</span> n = board.<span class="hljs-built_in">size</span>();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; m;j++)            &#123;                <span class="hljs-keyword">if</span>(dfs(board,<span class="hljs-keyword">word</span>,i,j,<span class="hljs-number">0</span>))                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-comment">//i,j为board横竖坐标，k为word上的指针，用来遍历word</span>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-built_in">string</span> <span class="hljs-keyword">word</span>,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j,<span class="hljs-keyword">int</span> k)</span></span>&#123;        <span class="hljs-keyword">if</span>(j &gt;= board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()||j &lt; <span class="hljs-number">0</span>||i &gt;= board.<span class="hljs-built_in">size</span>()||i &lt; <span class="hljs-number">0</span>||board[i][j] != <span class="hljs-keyword">word</span>[k])               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">if</span>(k == <span class="hljs-keyword">word</span>.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        <span class="hljs-keyword">char</span> tmp = board[i][j];        board[i][j] = <span class="hljs-string">'/'</span>;        <span class="hljs-keyword">bool</span> res = dfs(board,<span class="hljs-keyword">word</span>,i+<span class="hljs-number">1</span>,j,k+<span class="hljs-number">1</span>)||dfs(board,<span class="hljs-keyword">word</span>,i<span class="hljs-number">-1</span>,j,k+<span class="hljs-number">1</span>)||dfs(board,<span class="hljs-keyword">word</span>,i,j+<span class="hljs-number">1</span>,k+<span class="hljs-number">1</span>)||dfs(board,<span class="hljs-keyword">word</span>,i,j<span class="hljs-number">-1</span>,k+<span class="hljs-number">1</span>);        board[i][j] = tmp;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重建二叉树</title>
    <link href="/2020/09/15/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/09/15/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-07-重建二叉树"><a href="#剑指-Offer-07-重建二叉树" class="headerlink" title="剑指 Offer 07. 重建二叉树"></a><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 07. 重建二叉树</a></h4><h2 id="输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。"><a href="#输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。" class="headerlink" title="输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。"></a><strong>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</strong></h2><p>例如，给出</p><pre><code class="hljs angelscript">前序遍历 preorder = [<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]中序遍历 inorder = [<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>]</code></pre><pre><code class="hljs angelscript"><span class="hljs-number">3</span>  / \ <span class="hljs-number">9</span>  <span class="hljs-number">20</span>   /  \  <span class="hljs-number">15</span>   <span class="hljs-number">7</span></code></pre><p><strong>限制：</strong>0 &lt;= 节点个数 &lt;= 5000</p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>​    </p><h5 id="首先，我们了解二叉树基本遍历知识："><a href="#首先，我们了解二叉树基本遍历知识：" class="headerlink" title="首先，我们了解二叉树基本遍历知识："></a>首先，我们了解二叉树基本遍历知识：</h5><p>​        前序遍历特点： 节点按照【根节点|左子树|右子树】排序，以题目为例：【3|9|20 15 7】</p><p>​        中序遍历特点： 节点按照【左子树|根节点|右子树】排序，以题目为例：【9|3|15 20 7】</p><p>​    题目中指定：输入的前序遍历和中序遍历的结果都不含重复的数字，表明树中节点唯一</p><p>​    </p><h5 id="根据以上特点，按照顺序"><a href="#根据以上特点，按照顺序" class="headerlink" title="根据以上特点，按照顺序"></a>根据以上特点，按照顺序</h5><pre><code>1. 前序遍历的首个节点即是根节点`root`的值  2. 在中序遍历中搜索根节点`root`的索引，可将中序遍历划分为【左子树|根节点|右子树】  3. 根据中序遍历中的左（右）子树的节点数量，可以将前序遍历划分为【根节点|左子树|右子树】</code></pre><p><strong>自此可以确定三个节点的关系</strong>：</p><pre><code>1. 树的根节点  2. 左子树根节点  3. 右子树根节点（即前序遍历中左（右）子树的首个元素）</code></pre><p>那么我们可以使用<strong>递归</strong>的方法进行处理：每轮确定三个节点的关系</p><h4 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h4><ul><li><p><strong>递归参数</strong>： 前序遍历中根节点索引为<code>pre_root</code>, 中序遍历左边界<code>in_left</code>, 中序遍历右边界 <code>in_right</code></p></li><li><p><strong>终止条件</strong>： 当<code>in_left&gt;in_right</code> ，子树中序遍历为空，说明已经越过了叶子节点，返回<code>NULL</code></p></li><li><p><strong>递推工作</strong></p><ol><li><strong>建立根节点root</strong>：值为前序遍历中索引为pre_root的节点值</li><li><strong>搜索根节点root在中序遍历中的索引，确定左右子树</strong>：这里我们使用哈希表dic预存储中序遍历的值与索引的对应关系</li><li><strong>构建根节点root的左子树和右子树</strong>：通过调用递归函数 <code>recur()</code> 开始下一层递归<ul><li><strong>左子树</strong>：根节点索引为<code>pre_root+1</code>,中序遍历的左右边界分别为<code>in_left</code> 和 <code>i-1</code></li><li><strong>右子树</strong>：根节点索引为<code>i - in_left + pre_root + 1</code> （即：根节点索引+左子树长度+1），中序遍历的左右边界分别为 <code>i+1</code> 和  <code>in_right</code></li></ul></li></ol></li></ul><ul><li><strong>返回值</strong>：返回<code>root</code>，含义：当前递归层级建立的根节点root为上一递归层的根节点的左或右节点</li></ul><h4 id="代码展示："><a href="#代码展示：" class="headerlink" title="代码展示："></a>代码展示：</h4><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    HashMap&lt;Integer, Integer&gt; dic = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    <span class="hljs-keyword">int</span>[] po;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;        po = preorder;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; inorder.length; i++)             dic.put(inorder[i], i);        <span class="hljs-keyword">return</span> recur(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, inorder.length - <span class="hljs-number">1</span>);    &#125;    <span class="hljs-function">TreeNode <span class="hljs-title">recur</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_root, <span class="hljs-keyword">int</span> in_left, <span class="hljs-keyword">int</span> in_right)</span> </span>&#123;        <span class="hljs-keyword">if</span>(in_left &gt; in_right) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(po[pre_root]);        <span class="hljs-keyword">int</span> i = dic.get(po[pre_root]);        root.left = recur(pre_root + <span class="hljs-number">1</span>, in_left, i - <span class="hljs-number">1</span>);        root.right = recur(pre_root + i - in_left + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, in_right);        <span class="hljs-keyword">return</span> root;    &#125;&#125;作者：jyd链接：https:<span class="hljs-comment">//leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-di-gui-fa-qin/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
    
    
    <categories>
      
      <category>剑指offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大话设计模式读后总结</title>
    <link href="/2020/09/10/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    <url>/2020/09/10/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%BB%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="花了7天上午的时间读完《大话设计模式》，随笔记录一下自己的收获"><a href="#花了7天上午的时间读完《大话设计模式》，随笔记录一下自己的收获" class="headerlink" title="花了7天上午的时间读完《大话设计模式》，随笔记录一下自己的收获"></a>花了7天上午的时间读完《大话设计模式》，随笔记录一下自己的收获</h1><h2 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h2><p><strong>1. 开闭原则</strong></p><p>​        开放-封闭原则 </p><p>​        大意：对于修改，我们应该封闭，对于扩展，我们应该开放。</p><p>​    当应用的需求改变时，在不修改软件的源代码前提下，可以扩展模块的功能，满足业务需求（低耦合）</p><p><strong>2. 里氏替换原则</strong></p><p>​        大意：子类可以扩展父类的功能，但不能改变父类原有的功能，也就是说子类在继承父类时，除了添加新的方法完成扩展以外，尽量不要重写父类的方法（低耦合）</p><p><strong>3.依赖倒置原则</strong></p><p>​    面向接口编程</p><p>​        大意：高层模块不应该依赖底层模块，他们都应该依赖抽象，抽象不应该依赖细节，细节应该依赖抽象（低耦合）</p><p><strong>4. 单一职责原则</strong></p><p>​        单一功能原则</p><p>​        大意：一个类应该有且仅有一个引起他变化的原因，否则类就应该被拆分（高内聚）</p><p><strong>5.接口隔离原则</strong></p><p>​        大意：程序员应该将臃肿庞大的接口拆分为更小和更具体的接口，让接口只包含客户感兴趣的方法（高内聚）</p><p><strong>6.迪米特原则</strong></p><p>​        大意：当两个类无需直接通信时，那么就不应该发生直接的相互调用，可以通过第三方转发该调用（低耦合）</p><p><strong>合成复用原则</strong></p><p>​    组合/聚合复用原则</p><p>​        大意：他要求在软件复用时，要尽量使用组合或者聚合等关联关系来实现，其次才考虑使用继承方法，如果要使用继承，必须严格遵守里氏代换原则，</p><p>因为继承会破坏类的封闭性，继承会将父类的实现细节暴露，同时子类父类耦合度高，不符合设计原理。</p><p>​        </p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot-security-demo</title>
    <link href="/2020/09/09/springboot-security-demo/"/>
    <url>/2020/09/09/springboot-security-demo/</url>
    
    <content type="html"><![CDATA[<h2 id="在这里一并介绍SpringBoot的基本布局和项目开始"><a href="#在这里一并介绍SpringBoot的基本布局和项目开始" class="headerlink" title="在这里一并介绍SpringBoot的基本布局和项目开始"></a>在这里一并介绍SpringBoot的基本布局和项目开始</h2><h4 id="这里插入Spring-Security官方网址"><a href="#这里插入Spring-Security官方网址" class="headerlink" title="这里插入Spring-Security官方网址"></a>这里插入<a href="https://www.springcloud.cc/spring-security-zhcn.html" target="_blank" rel="noopener">Spring-Security官方网址</a></h4><h4 id="1-SpringBoot-（IDEA）快速开始"><a href="#1-SpringBoot-（IDEA）快速开始" class="headerlink" title="1. SpringBoot （IDEA）快速开始"></a><strong>1. SpringBoot （IDEA）快速开始</strong></h4><p>​    Ⅰ：引入 pom.xml 文件，在IDEA中可以直接导入web,security,mysql,mybatis等各种需要的模块</p><p>​    Ⅱ：等待创建完成，然后建立各层次</p><p>​    Ⅲ：在java包下，创建以下目录：config , controller , dao , domain(entity) , security , util ,service</p><p>​    </p><p>这些类大概包括了基本项目的构造，有利于降低耦合度</p><p><strong>controller</strong>:  表现层，与web页面和html交互，可以使用 addAttribute 把变量放到前端界面，然后通过EL表达式在前端页面取值，进行操作</p><p><strong>config</strong>: 配置层，一些基本的配置，这里也可以用applications.yml/application.properites 来配置，因为对于SpringBoot，“约定大于配置” ，我们一般通过约定来规划配置，在这里我使用了java文件进行配置，更为麻烦，一般config定义配置类</p><p><strong>dao</strong>: 数据库交互层，dao层中的方法一般定义为接口，让service实现，这里定义的是mapper的方法，即是数据库基本操作语句，这里可以使用mybatis-plus使用逆向工程生成dao和mapper</p><p><strong>domain</strong>: 别名entity ， 也就是实体类，这里的定义一般与数据库的键值相同，这样会避免冲突的发生</p><p><strong>serivce</strong>: 这里有两种方法，我一般倾向于创建一个service接口与dao的代码完全相同，然后创建serviceimpl类来实现service接口，降低程序耦合性</p><p><strong>util</strong>: 工具类，看业务逻辑需要什么便可以自己定义，在这个项目定义了MD5密码加密</p><h4 id="2-使用mybatis连接数据库"><a href="#2-使用mybatis连接数据库" class="headerlink" title="2. 使用mybatis连接数据库"></a><strong>2. 使用mybatis连接数据库</strong></h4><p>在appication.properties中</p><pre><code class="hljs properties"><span class="hljs-meta">ms.db.driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-meta">ms.db.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/cache?characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span><span class="hljs-meta">ms.db.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">ms.db.password</span>=<span class="hljs-string">123456</span><span class="hljs-meta">ms.db.maxActive</span>=<span class="hljs-string">500</span><span class="hljs-meta">logging.level.org.springframework.security</span>= <span class="hljs-string">INFO</span><span class="hljs-meta">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><span class="hljs-meta">spring.main.allow-bean-definition-overriding</span>=<span class="hljs-string">true</span></code></pre><p>这里有一个需要注意的地方，ms.db.url需要设置一个serverTimezone，如果不这么做在springboot启动时会报错</p><p>这里是Mybatis基本设置</p><pre><code class="hljs java">ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();dataSource.setDriverClass(env.getProperty(<span class="hljs-string">"ms.db.driverClassName"</span>));dataSource.setJdbcUrl(env.getProperty(<span class="hljs-string">"ms.db.url"</span>));dataSource.setUser(env.getProperty(<span class="hljs-string">"ms.db.username"</span>));dataSource.setPassword(env.getProperty(<span class="hljs-string">"ms.db.password"</span>));dataSource.setMaxPoolSize(<span class="hljs-number">20</span>);dataSource.setMinPoolSize(<span class="hljs-number">5</span>);dataSource.setInitialPoolSize(<span class="hljs-number">10</span>);dataSource.setMaxIdleTime(<span class="hljs-number">300</span>);dataSource.setAcquireIncrement(<span class="hljs-number">5</span>);dataSource.setIdleConnectionTestPeriod(<span class="hljs-number">60</span>);</code></pre><h4 id="3-SpringSecurity基本配置·"><a href="#3-SpringSecurity基本配置·" class="headerlink" title="3. SpringSecurity基本配置·"></a><strong>3. SpringSecurity基本配置</strong>·</h4><p>重写2个configure方法，一个定义身份权限，一个定义拦截器，拦截各种请求和静态资源等等</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function">UserDetailsService <span class="hljs-title">customUserService</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//注册UserDetailsService 的bean</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomUserService();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        auth.userDetailsService(customUserService()).passwordEncoder(<span class="hljs-keyword">new</span> PasswordEncoder()&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> </span>&#123;                <span class="hljs-keyword">return</span> MD5Util.encode((String)rawPassword);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> </span>&#123;                <span class="hljs-keyword">return</span> encodedPassword.equals(MD5Util.encode((String)rawPassword));            &#125;&#125;); <span class="hljs-comment">//user Details Service验证</span>    &#125;    <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.authorizeRequests()                .antMatchers(<span class="hljs-string">"/css/**"</span>).permitAll()                .anyRequest().authenticated()                .and()                .formLogin()                .loginPage(<span class="hljs-string">"/login"</span>)                .failureUrl(<span class="hljs-string">"/login?error"</span>)                .permitAll()                .and()                .logout()                .permitAll();    &#125;&#125;</code></pre><p>这里是 service 层，实现UserDetailSercvice(SpringSecurity接口) ，添加用户权限</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomUserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123; <span class="hljs-comment">//自定义UserDetailsService 接口</span>    <span class="hljs-meta">@Autowired</span>    UserDao userDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> </span>&#123; <span class="hljs-comment">//重写loadUserByUsername 方法获得 userdetails 类型用户</span>        SysUser user = userDao.findByUserName(username);        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">"用户名不存在"</span>);        &#125;        <span class="hljs-comment">//System.out.println(user.getPassword());</span>        <span class="hljs-comment">//System.out.println("用户名为"+user.getUsername());</span>        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-comment">//用于添加用户的权限。只要把用户权限添加到authorities 就万事大吉。</span>        <span class="hljs-keyword">for</span>(SysRole role:user.getRoles())        &#123;            System.out.println(role.getId());            authorities.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(role.getName()));            System.out.println(role.getName());        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> org.springframework.security.core.userdetails.User(user.getUsername(),                user.getPassword(), authorities);    &#125;&#125;</code></pre><h5 id="4-util工具类-md5"><a href="#4-util工具类-md5" class="headerlink" title="4. util工具类(md5)"></a><strong>4. util工具类(md5)</strong></h5><p>MD5加密工具，将数据库密码进行加密，首先执行这个类得到加密后的password，然后使用sql语句将对应的账户密码插入数据库中，在这里，用户名与密码相同</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5Util</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SALT = <span class="hljs-string">"tamboo"</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encode</span><span class="hljs-params">(String password)</span> </span>&#123;        password = password + SALT;        MessageDigest md5 = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            md5 = MessageDigest.getInstance(<span class="hljs-string">"MD5"</span>);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);        &#125;        <span class="hljs-keyword">char</span>[] charArray = password.toCharArray();        <span class="hljs-keyword">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[charArray.length];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; charArray.length; i++)            byteArray[i] = (<span class="hljs-keyword">byte</span>) charArray[i];        <span class="hljs-keyword">byte</span>[] md5Bytes = md5.digest(byteArray);        StringBuffer hexValue = <span class="hljs-keyword">new</span> StringBuffer();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; md5Bytes.length; i++) &#123;            <span class="hljs-keyword">int</span> val = ((<span class="hljs-keyword">int</span>) md5Bytes[i]) &amp; <span class="hljs-number">0xff</span>;            <span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">16</span>) &#123;                hexValue.append(<span class="hljs-string">"0"</span>);            &#125;            hexValue.append(Integer.toHexString(val));        &#125;        <span class="hljs-keyword">return</span> hexValue.toString();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(MD5Util.encode(<span class="hljs-string">"abel"</span>));    &#125;&#125;</code></pre><h4 id="SpringSecurity知识点解读"><a href="#SpringSecurity知识点解读" class="headerlink" title="SpringSecurity知识点解读"></a><strong>SpringSecurity知识点解读</strong></h4><p>Ⅰ： 整体流程表：引用自<a href="https://blog.csdn.net/qq_22172133/article/details/86503223" target="_blank" rel="noopener">博客地址</a></p><p><img src="https://img-blog.csdnimg.cn/20190813175708861.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMTcyMTMz,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="img"></p><p>Ⅱ：注解分析</p><h4 id="1-注解-EnableWebSecurity"><a href="#1-注解-EnableWebSecurity" class="headerlink" title="1.注解@EnableWebSecurity"></a><strong>1.注解@EnableWebSecurity</strong></h4><p>​    在Springboot应用中使用<strong>Spring Security</strong>，官方提示该注解应该和<strong>@Configuration</strong>一起使用，注解<strong>WebSecurityConfige</strong>类</p><p>​    此类继承<strong>WebSecurityConfigurerAdapter</strong>，这样就构成了Spring Security的配置类</p><h4 id="2-抽象类-WebSecurityConfigurerAdapter"><a href="#2-抽象类-WebSecurityConfigurerAdapter" class="headerlink" title="2.抽象类 WebSecurityConfigurerAdapter"></a>2.抽象类 WebSecurityConfigurerAdapter</h4><p>​    在一般情况下，我们会让标注了 <strong>@Configuration</strong>和 <strong>@EnableWebSecurity *<em>类继承抽象类 *</em>WebSecurityConfigurerAdapter</strong></p><p>​    这样的话只需要重写抽象类中的方法即可完成配置</p><h4 id="方法configure（AuthenticationManagerBuilder-auth）和-configure-HttpSecurity-http"><a href="#方法configure（AuthenticationManagerBuilder-auth）和-configure-HttpSecurity-http" class="headerlink" title="方法configure（AuthenticationManagerBuilder auth）和 configure(HttpSecurity http)"></a>方法configure（AuthenticationManagerBuilder auth）和 configure(HttpSecurity http)</h4><p>第一个配置的是权限，第二个配置的是url的拦截</p><p><img src="/2020/09/09/springboot-security-demo/F:%5Chexo%5Csource_posts%5Cspringboot-security-demo%5Cimage-20200909232107390.png" srcset="/img/loading.gif" alt="image-20200909232107390"></p><p><strong>5.踩坑</strong></p><p>调试过程：</p><p>在SpringBoot启动类中，在Spring Boot2.x版本中@SpringBootApplication已经包含了@ComponentScan，无需再进行配置</p><p>在controller层中，如果加@RestController，那么在方法中return “login”    并不会跳转到login.html页面，因为@RestController方法是@ResponseBody 和 @Controller方法的合成,</p><p>直接用@Controller方法,return “login”，这样就会跳转到login.html页面</p>]]></content>
    
    
    <categories>
      
      <category>SSM实例</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>@RequestMapping错误</title>
    <link href="/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/"/>
    <url>/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>@RequestMapping</strong></p><p>​    方法添加@RequestMapping可以正常访问，但是当类上也添加注解@RequestMapping就报404错误</p><p>一般报4xx错误都是客户端问题，比如路径请求不对之类的错误。</p><p><img src="/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/F:%5Chexo%5Csource_posts%5CRequestMapping%E9%94%99%E8%AF%AF%5CQQ%E5%9B%BE%E7%89%8720200807155152.png" srcset="/img/loading.gif" alt></p><p>此处经过排查，发现是视图解析器的前缀有错</p><p>!(RequestMapping错误\QQ图片20200807155152.png)</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"WEB-INF/pages/"</span> /&gt;</span></code></pre><p>value应该是</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/pages/"</span> /&gt;</span></code></pre><p>加上之后便可以正常运行</p>]]></content>
    
    
    <categories>
      
      <category>SSM错误合集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF-Constant</title>
    <link href="/2020/07/19/ACM-UCF-Constant/"/>
    <url>/2020/07/19/ACM-UCF-Constant/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153321.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153342.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153403.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment">dp背包问题 恰好装满 每个物品可取多次 </span><span class="hljs-comment">*/</span> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><span class="hljs-keyword">int</span> C[<span class="hljs-number">8</span>];<span class="hljs-keyword">int</span> N;ll memo[<span class="hljs-number">8</span>][<span class="hljs-number">100</span>];<span class="hljs-function">ll <span class="hljs-title">go</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(n == N)        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(n&gt;N || c==<span class="hljs-number">8</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(memo[c][n] &gt; <span class="hljs-number">-1</span>)        <span class="hljs-keyword">return</span> memo[c][n];    <span class="hljs-keyword">return</span> memo[c][n] = go(c, n+C[c]) + go(c+<span class="hljs-number">1</span>, n);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//    freopen("constant.in", "r", stdin);</span><span class="hljs-comment">//    freopen("constant.out", "w", stdout);</span>    <span class="hljs-keyword">int</span> T;    <span class="hljs-built_in">cin</span>&gt;&gt;T;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> cas=<span class="hljs-number">1</span>; cas&lt;=T; cas++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">8</span>; i++)            <span class="hljs-built_in">cin</span>&gt;&gt;C[i];        <span class="hljs-built_in">cin</span>&gt;&gt;N;        <span class="hljs-built_in">memset</span>(memo, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(memo));        ll res = go(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Equation #%d: %I64d\n"</span>, cas, res);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF-PacMan</title>
    <link href="/2020/07/19/ACM-UCF-PacMan/"/>
    <url>/2020/07/19/ACM-UCF-PacMan/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719135942.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719140201.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719140649.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX=<span class="hljs-number">105</span>;<span class="hljs-keyword">int</span> board[MAX][MAX];<span class="hljs-comment">//存储游戏板信息</span><span class="hljs-keyword">int</span> best[MAX][MAX];<span class="hljs-comment">//存储最好分数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> n, r, c;<span class="hljs-comment">//游戏板数n，游戏板的行数r和列数c</span>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>; t&lt;=n; t++) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;r, &amp;c);        <span class="hljs-comment">//读取游戏板中信息</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;r; i++) &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;c; j++) &#123;                <span class="hljs-comment">//将pacman的起点和终点标记为0</span>                <span class="hljs-keyword">if</span>((!i &amp;&amp; !j) || (i==r<span class="hljs-number">-1</span> &amp;&amp; j==c<span class="hljs-number">-1</span>)) &#123;                    <span class="hljs-keyword">char</span> temp;                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">" %c"</span>, &amp;temp);                    board[i][j]=<span class="hljs-number">0</span>;                &#125;                <span class="hljs-keyword">else</span>                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;board[i][j]);            &#125;        &#125;        <span class="hljs-built_in">memset</span>(best, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(best));        <span class="hljs-comment">//填写第一行的最好分数</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;c; i++)            best[<span class="hljs-number">0</span>][i]=best[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+board[<span class="hljs-number">0</span>][i];        <span class="hljs-comment">//填写第一列的最好分数</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;r; i++)            best[i][<span class="hljs-number">0</span>]=best[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+board[i][<span class="hljs-number">0</span>];        <span class="hljs-comment">//循环遍历每个可能的Pac Man子问题并解决它</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;r; i++) &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;c; j++) &#123;                best[i][j]=<span class="hljs-built_in">max</span>(best[i<span class="hljs-number">-1</span>][j], best[i][j<span class="hljs-number">-1</span>])+board[i][j];            &#125;        &#125;        <span class="hljs-comment">//输出最终结果</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Game Board #%d: %d\n"</span>, t, best[r<span class="hljs-number">-1</span>][c<span class="hljs-number">-1</span>]);        <span class="hljs-keyword">if</span>(t&lt;n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF pentastic</title>
    <link href="/2020/07/19/ACM-UCF-pentastic/"/>
    <url>/2020/07/19/ACM-UCF-pentastic/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-pentastic/Y%5B50WK518U9FC0QRV06VJ4D.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-pentastic/QMIROO@DB6EL%5DX%7DGRSAMPXM.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-pentastic/image-20200719114428334.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">9999</span>;<span class="hljs-keyword">int</span> num[<span class="hljs-number">10</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>== x?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>+x;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>==x?<span class="hljs-number">4</span>:x<span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_mindex</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> mindex=maxn;    <span class="hljs-keyword">int</span> minval=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)    &#123;        <span class="hljs-keyword">if</span>(num[i]&lt;minval)        &#123;            mindex=i;            minval=num[i];        &#125;    &#125;    <span class="hljs-keyword">return</span> mindex;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> t;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;t);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c=<span class="hljs-number">1</span>;c&lt;=t;c++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)        &#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num[i]);        &#125;        <span class="hljs-keyword">int</span> minndex,predex,nextdex;        <span class="hljs-keyword">while</span>(find_mindex()!=maxn)        &#123;            minndex=find_mindex();            num[minndex]=-num[minndex];            predex=pre(minndex);            num[predex]-=num[minndex];            nextdex=nex(minndex);            num[nextdex]-=num[minndex];        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Pentagon #%d:\n"</span>,c);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d %d %d %d\n\n"</span>,num[<span class="hljs-number">0</span>],num[<span class="hljs-number">1</span>],num[<span class="hljs-number">2</span>],num[<span class="hljs-number">3</span>],num[<span class="hljs-number">4</span>]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题 16.11. 跳水板</title>
    <link href="/2020/07/08/%E9%9D%A2%E8%AF%95%E9%A2%98-16-11-%E8%B7%B3%E6%B0%B4%E6%9D%BF/"/>
    <url>/2020/07/08/%E9%9D%A2%E8%AF%95%E9%A2%98-16-11-%E8%B7%B3%E6%B0%B4%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h4 id="面试题-16-11-跳水板"><a href="#面试题-16-11-跳水板" class="headerlink" title="面试题 16.11. 跳水板"></a><a href="https://leetcode-cn.com/problems/diving-board-lcci/" target="_blank" rel="noopener">面试题 16.11. 跳水板</a></h4><p>难度简单37收藏分享切换为英文关注反馈</p><p>你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为<code>shorter</code>，长度较长的木板长度为<code>longer</code>。你必须正好使用<code>k</code>块木板。编写一个方法，生成跳水板所有可能的长度。</p><p>返回的长度需要从小到大排列。</p><p><strong>示例：</strong></p><pre><code class="hljs angelscript">输入：shorter = <span class="hljs-number">1</span>longer = <span class="hljs-number">2</span>k = <span class="hljs-number">3</span>输出： &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;</code></pre><p><strong>提示：</strong></p><ul><li>0 &lt; shorter &lt;= longer</li><li>0 &lt;= k &lt;= 100000</li></ul><p><strong>解题思路：</strong></p><p>​    很简单的一道题目，题目给出k的范围是0~100000，那么就知道需要用O(n)的时间复杂度</p><p>​    题意中只需要设置一个变量i，就可以得到shorter的数量i和longer的数量k-i，那么Length = (k - i) * shorter + i * longer;</p><p>​    显然，这是个一次关系，变换可得 Length = (longer - shorter) * i + k * shorter;</p><p>​    那么我们给出以下代码，便可通过测试</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">divingBoard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> shorter, <span class="hljs-keyword">int</span> longer, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;();        &#125;        <span class="hljs-keyword">if</span>(shorter == longer)        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;longer*k&#125;;        &#125;                <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ves</span><span class="hljs-params">(k+<span class="hljs-number">1</span>)</span></span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; ves.<span class="hljs-built_in">size</span>();i++)        &#123;            ves.at(i) = (k - i) * shorter + i * longer;        &#125;        <span class="hljs-keyword">return</span> ves;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>LeetCode每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/06/hello-world/"/>
    <url>/2020/07/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
