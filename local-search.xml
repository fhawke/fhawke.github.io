<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>springboot-security-demo</title>
    <link href="/2020/09/09/springboot-security-demo/"/>
    <url>/2020/09/09/springboot-security-demo/</url>
    
    <content type="html"><![CDATA[<h2 id="在这里一并介绍SpringBoot的基本布局和项目开始"><a href="#在这里一并介绍SpringBoot的基本布局和项目开始" class="headerlink" title="在这里一并介绍SpringBoot的基本布局和项目开始"></a>在这里一并介绍SpringBoot的基本布局和项目开始</h2><h4 id="这里插入Spring-Security官方网址"><a href="#这里插入Spring-Security官方网址" class="headerlink" title="这里插入Spring-Security官方网址"></a>这里插入<a href="https://www.springcloud.cc/spring-security-zhcn.html" target="_blank" rel="noopener">Spring-Security官方网址</a></h4><h4 id="1-SpringBoot-（IDEA）快速开始"><a href="#1-SpringBoot-（IDEA）快速开始" class="headerlink" title="1. SpringBoot （IDEA）快速开始"></a><strong>1. SpringBoot （IDEA）快速开始</strong></h4><p>​    Ⅰ：引入 pom.xml 文件，在IDEA中可以直接导入web,security,mysql,mybatis等各种需要的模块</p><p>​    Ⅱ：等待创建完成，然后建立各层次</p><p>​    Ⅲ：在java包下，创建以下目录：config , controller , dao , domain(entity) , security , util ,service</p><p>​    </p><p>这些类大概包括了基本项目的构造，有利于降低耦合度</p><p><strong>controller</strong>:  表现层，与web页面和html交互，可以使用 addAttribute 把变量放到前端界面，然后通过EL表达式在前端页面取值，进行操作</p><p><strong>config</strong>: 配置层，一些基本的配置，这里也可以用applications.yml/application.properites 来配置，因为对于SpringBoot，“约定大于配置” ，我们一般通过约定来规划配置，在这里我使用了java文件进行配置，更为麻烦，一般config定义配置类</p><p><strong>dao</strong>: 数据库交互层，dao层中的方法一般定义为接口，让service实现，这里定义的是mapper的方法，即是数据库基本操作语句，这里可以使用mybatis-plus使用逆向工程生成dao和mapper</p><p><strong>domain</strong>: 别名entity ， 也就是实体类，这里的定义一般与数据库的键值相同，这样会避免冲突的发生</p><p><strong>serivce</strong>: 这里有两种方法，我一般倾向于创建一个service接口与dao的代码完全相同，然后创建serviceimpl类来实现service接口，降低程序耦合性</p><p><strong>util</strong>: 工具类，看业务逻辑需要什么便可以自己定义，在这个项目定义了MD5密码加密</p><h4 id="2-使用mybatis连接数据库"><a href="#2-使用mybatis连接数据库" class="headerlink" title="2. 使用mybatis连接数据库"></a><strong>2. 使用mybatis连接数据库</strong></h4><p>在appication.properties中</p><pre><code class="hljs properties"><span class="hljs-meta">ms.db.driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-meta">ms.db.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/cache?characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span><span class="hljs-meta">ms.db.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">ms.db.password</span>=<span class="hljs-string">123456</span><span class="hljs-meta">ms.db.maxActive</span>=<span class="hljs-string">500</span><span class="hljs-meta">logging.level.org.springframework.security</span>= <span class="hljs-string">INFO</span><span class="hljs-meta">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><span class="hljs-meta">spring.main.allow-bean-definition-overriding</span>=<span class="hljs-string">true</span></code></pre><p>这里有一个需要注意的地方，ms.db.url需要设置一个serverTimezone，如果不这么做在springboot启动时会报错</p><p>这里是Mybatis基本设置</p><pre><code class="hljs java">ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();dataSource.setDriverClass(env.getProperty(<span class="hljs-string">"ms.db.driverClassName"</span>));dataSource.setJdbcUrl(env.getProperty(<span class="hljs-string">"ms.db.url"</span>));dataSource.setUser(env.getProperty(<span class="hljs-string">"ms.db.username"</span>));dataSource.setPassword(env.getProperty(<span class="hljs-string">"ms.db.password"</span>));dataSource.setMaxPoolSize(<span class="hljs-number">20</span>);dataSource.setMinPoolSize(<span class="hljs-number">5</span>);dataSource.setInitialPoolSize(<span class="hljs-number">10</span>);dataSource.setMaxIdleTime(<span class="hljs-number">300</span>);dataSource.setAcquireIncrement(<span class="hljs-number">5</span>);dataSource.setIdleConnectionTestPeriod(<span class="hljs-number">60</span>);</code></pre><h4 id="3-SpringSecurity基本配置·"><a href="#3-SpringSecurity基本配置·" class="headerlink" title="3. SpringSecurity基本配置·"></a><strong>3. SpringSecurity基本配置</strong>·</h4><p>重写2个configure方法，一个定义身份权限，一个定义拦截器，拦截各种请求和静态资源等等</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function">UserDetailsService <span class="hljs-title">customUserService</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//注册UserDetailsService 的bean</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CustomUserService();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        auth.userDetailsService(customUserService()).passwordEncoder(<span class="hljs-keyword">new</span> PasswordEncoder()&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> </span>&#123;                <span class="hljs-keyword">return</span> MD5Util.encode((String)rawPassword);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> </span>&#123;                <span class="hljs-keyword">return</span> encodedPassword.equals(MD5Util.encode((String)rawPassword));            &#125;&#125;); <span class="hljs-comment">//user Details Service验证</span>    &#125;    <span class="hljs-meta">@Override</span> <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.authorizeRequests()                .antMatchers(<span class="hljs-string">"/css/**"</span>).permitAll()                .anyRequest().authenticated()                .and()                .formLogin()                .loginPage(<span class="hljs-string">"/login"</span>)                .failureUrl(<span class="hljs-string">"/login?error"</span>)                .permitAll()                .and()                .logout()                .permitAll();    &#125;&#125;</code></pre><p>这里是 service 层，实现UserDetailSercvice(SpringSecurity接口) ，添加用户权限</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomUserService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123; <span class="hljs-comment">//自定义UserDetailsService 接口</span>    <span class="hljs-meta">@Autowired</span>    UserDao userDao;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> </span>&#123; <span class="hljs-comment">//重写loadUserByUsername 方法获得 userdetails 类型用户</span>        SysUser user = userDao.findByUserName(username);        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">"用户名不存在"</span>);        &#125;        <span class="hljs-comment">//System.out.println(user.getPassword());</span>        <span class="hljs-comment">//System.out.println("用户名为"+user.getUsername());</span>        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-comment">//用于添加用户的权限。只要把用户权限添加到authorities 就万事大吉。</span>        <span class="hljs-keyword">for</span>(SysRole role:user.getRoles())        &#123;            System.out.println(role.getId());            authorities.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(role.getName()));            System.out.println(role.getName());        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> org.springframework.security.core.userdetails.User(user.getUsername(),                user.getPassword(), authorities);    &#125;&#125;</code></pre><h5 id="4-util工具类-md5"><a href="#4-util工具类-md5" class="headerlink" title="4. util工具类(md5)"></a><strong>4. util工具类(md5)</strong></h5><p>MD5加密工具，将数据库密码进行加密，首先执行这个类得到加密后的password，然后使用sql语句将对应的账户密码插入数据库中，在这里，用户名与密码相同</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5Util</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SALT = <span class="hljs-string">"tamboo"</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encode</span><span class="hljs-params">(String password)</span> </span>&#123;        password = password + SALT;        MessageDigest md5 = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            md5 = MessageDigest.getInstance(<span class="hljs-string">"MD5"</span>);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);        &#125;        <span class="hljs-keyword">char</span>[] charArray = password.toCharArray();        <span class="hljs-keyword">byte</span>[] byteArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[charArray.length];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; charArray.length; i++)            byteArray[i] = (<span class="hljs-keyword">byte</span>) charArray[i];        <span class="hljs-keyword">byte</span>[] md5Bytes = md5.digest(byteArray);        StringBuffer hexValue = <span class="hljs-keyword">new</span> StringBuffer();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; md5Bytes.length; i++) &#123;            <span class="hljs-keyword">int</span> val = ((<span class="hljs-keyword">int</span>) md5Bytes[i]) &amp; <span class="hljs-number">0xff</span>;            <span class="hljs-keyword">if</span> (val &lt; <span class="hljs-number">16</span>) &#123;                hexValue.append(<span class="hljs-string">"0"</span>);            &#125;            hexValue.append(Integer.toHexString(val));        &#125;        <span class="hljs-keyword">return</span> hexValue.toString();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        System.out.println(MD5Util.encode(<span class="hljs-string">"abel"</span>));    &#125;&#125;</code></pre><h4 id="SpringSecurity知识点解读"><a href="#SpringSecurity知识点解读" class="headerlink" title="SpringSecurity知识点解读"></a><strong>SpringSecurity知识点解读</strong></h4><p>Ⅰ： 整体流程表：引用自<a href="https://blog.csdn.net/qq_22172133/article/details/86503223" target="_blank" rel="noopener">博客地址</a></p><p><img src="https://img-blog.csdnimg.cn/20190813175708861.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMTcyMTMz,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="img"></p><p>Ⅱ：注解分析</p><h4 id="1-注解-EnableWebSecurity"><a href="#1-注解-EnableWebSecurity" class="headerlink" title="1.注解@EnableWebSecurity"></a><strong>1.注解@EnableWebSecurity</strong></h4><p>​    在Springboot应用中使用<strong>Spring Security</strong>，官方提示该注解应该和<strong>@Configuration</strong>一起使用，注解<strong>WebSecurityConfige</strong>类</p><p>​    此类继承<strong>WebSecurityConfigurerAdapter</strong>，这样就构成了Spring Security的配置类</p><h4 id="2-抽象类-WebSecurityConfigurerAdapter"><a href="#2-抽象类-WebSecurityConfigurerAdapter" class="headerlink" title="2.抽象类 WebSecurityConfigurerAdapter"></a>2.抽象类 WebSecurityConfigurerAdapter</h4><p>​    在一般情况下，我们会让标注了 <strong>@Configuration</strong>和 <strong>@EnableWebSecurity *<em>类继承抽象类 *</em>WebSecurityConfigurerAdapter</strong></p><p>​    这样的话只需要重写抽象类中的方法即可完成配置</p><h4 id="方法configure（AuthenticationManagerBuilder-auth）和-configure-HttpSecurity-http"><a href="#方法configure（AuthenticationManagerBuilder-auth）和-configure-HttpSecurity-http" class="headerlink" title="方法configure（AuthenticationManagerBuilder auth）和 configure(HttpSecurity http)"></a>方法configure（AuthenticationManagerBuilder auth）和 configure(HttpSecurity http)</h4><p>第一个配置的是权限，第二个配置的是url的拦截</p><p><img src="/2020/09/09/springboot-security-demo/F:%5Chexo%5Csource_posts%5Cspringboot-security-demo%5Cimage-20200909232107390.png" srcset="/img/loading.gif" alt="image-20200909232107390"></p><p><strong>5.踩坑</strong></p><p>调试过程：</p><p>在SpringBoot启动类中，在Spring Boot2.x版本中@SpringBootApplication已经包含了@ComponentScan，无需再进行配置</p><p>在controller层中，如果加@RestController，那么在方法中return “login”    并不会跳转到login.html页面，因为@RestController方法是@ResponseBody 和 @Controller方法的合成,</p><p>直接用@Controller方法,return “login”，这样就会跳转到login.html页面</p>]]></content>
    
    
    <categories>
      
      <category>SSM实例</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>@RequestMapping错误</title>
    <link href="/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/"/>
    <url>/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>@RequestMapping</strong></p><p>​    方法添加@RequestMapping可以正常访问，但是当类上也添加注解@RequestMapping就报404错误</p><p>一般报4xx错误都是客户端问题，比如路径请求不对之类的错误。</p><p><img src="/2020/08/07/RequestMapping%E9%94%99%E8%AF%AF/F:%5Chexo%5Csource_posts%5CRequestMapping%E9%94%99%E8%AF%AF%5CQQ%E5%9B%BE%E7%89%8720200807155152.png" srcset="/img/loading.gif" alt></p><p>此处经过排查，发现是视图解析器的前缀有错</p><p>!(RequestMapping错误\QQ图片20200807155152.png)</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"WEB-INF/pages/"</span> /&gt;</span></code></pre><p>value应该是</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/pages/"</span> /&gt;</span></code></pre><p>加上之后便可以正常运行</p>]]></content>
    
    
    <categories>
      
      <category>SSM错误合集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF-Constant</title>
    <link href="/2020/07/19/ACM-UCF-Constant/"/>
    <url>/2020/07/19/ACM-UCF-Constant/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153321.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153342.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-Constant/QQ%E5%9B%BE%E7%89%8720200719153403.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-comment">/*</span><span class="hljs-comment">dp背包问题 恰好装满 每个物品可取多次 </span><span class="hljs-comment">*/</span> <span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><span class="hljs-keyword">int</span> C[<span class="hljs-number">8</span>];<span class="hljs-keyword">int</span> N;ll memo[<span class="hljs-number">8</span>][<span class="hljs-number">100</span>];<span class="hljs-function">ll <span class="hljs-title">go</span><span class="hljs-params">(<span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(n == N)        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(n&gt;N || c==<span class="hljs-number">8</span>)        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(memo[c][n] &gt; <span class="hljs-number">-1</span>)        <span class="hljs-keyword">return</span> memo[c][n];    <span class="hljs-keyword">return</span> memo[c][n] = go(c, n+C[c]) + go(c+<span class="hljs-number">1</span>, n);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-comment">//    freopen("constant.in", "r", stdin);</span><span class="hljs-comment">//    freopen("constant.out", "w", stdout);</span>    <span class="hljs-keyword">int</span> T;    <span class="hljs-built_in">cin</span>&gt;&gt;T;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> cas=<span class="hljs-number">1</span>; cas&lt;=T; cas++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">8</span>; i++)            <span class="hljs-built_in">cin</span>&gt;&gt;C[i];        <span class="hljs-built_in">cin</span>&gt;&gt;N;        <span class="hljs-built_in">memset</span>(memo, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(memo));        ll res = go(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Equation #%d: %I64d\n"</span>, cas, res);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>medium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF-PacMan</title>
    <link href="/2020/07/19/ACM-UCF-PacMan/"/>
    <url>/2020/07/19/ACM-UCF-PacMan/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719135942.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719140201.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719140649.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX=<span class="hljs-number">105</span>;<span class="hljs-keyword">int</span> board[MAX][MAX];<span class="hljs-comment">//存储游戏板信息</span><span class="hljs-keyword">int</span> best[MAX][MAX];<span class="hljs-comment">//存储最好分数</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> n, r, c;<span class="hljs-comment">//游戏板数n，游戏板的行数r和列数c</span>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>; t&lt;=n; t++) &#123;        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;r, &amp;c);        <span class="hljs-comment">//读取游戏板中信息</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;r; i++) &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;c; j++) &#123;                <span class="hljs-comment">//将pacman的起点和终点标记为0</span>                <span class="hljs-keyword">if</span>((!i &amp;&amp; !j) || (i==r<span class="hljs-number">-1</span> &amp;&amp; j==c<span class="hljs-number">-1</span>)) &#123;                    <span class="hljs-keyword">char</span> temp;                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">" %c"</span>, &amp;temp);                    board[i][j]=<span class="hljs-number">0</span>;                &#125;                <span class="hljs-keyword">else</span>                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;board[i][j]);            &#125;        &#125;        <span class="hljs-built_in">memset</span>(best, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(best));        <span class="hljs-comment">//填写第一行的最好分数</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;c; i++)            best[<span class="hljs-number">0</span>][i]=best[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+board[<span class="hljs-number">0</span>][i];        <span class="hljs-comment">//填写第一列的最好分数</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;r; i++)            best[i][<span class="hljs-number">0</span>]=best[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+board[i][<span class="hljs-number">0</span>];        <span class="hljs-comment">//循环遍历每个可能的Pac Man子问题并解决它</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;r; i++) &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;c; j++) &#123;                best[i][j]=<span class="hljs-built_in">max</span>(best[i<span class="hljs-number">-1</span>][j], best[i][j<span class="hljs-number">-1</span>])+board[i][j];            &#125;        &#125;        <span class="hljs-comment">//输出最终结果</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Game Board #%d: %d\n"</span>, t, best[r<span class="hljs-number">-1</span>][c<span class="hljs-number">-1</span>]);        <span class="hljs-keyword">if</span>(t&lt;n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACM-UCF pentastic</title>
    <link href="/2020/07/19/ACM-UCF-pentastic/"/>
    <url>/2020/07/19/ACM-UCF-pentastic/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/07/19/ACM-UCF-pentastic/Y%5B50WK518U9FC0QRV06VJ4D.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-pentastic/QMIROO@DB6EL%5DX%7DGRSAMPXM.png" srcset="/img/loading.gif" alt></p><p><img src="/2020/07/19/ACM-UCF-pentastic/image-20200719114428334.png" srcset="/img/loading.gif" alt></p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">9999</span>;<span class="hljs-keyword">int</span> num[<span class="hljs-number">10</span>];<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>== x?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>+x;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>==x?<span class="hljs-number">4</span>:x<span class="hljs-number">-1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_mindex</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> mindex=maxn;    <span class="hljs-keyword">int</span> minval=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)    &#123;        <span class="hljs-keyword">if</span>(num[i]&lt;minval)        &#123;            mindex=i;            minval=num[i];        &#125;    &#125;    <span class="hljs-keyword">return</span> mindex;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> t;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;t);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c=<span class="hljs-number">1</span>;c&lt;=t;c++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)        &#123;            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num[i]);        &#125;        <span class="hljs-keyword">int</span> minndex,predex,nextdex;        <span class="hljs-keyword">while</span>(find_mindex()!=maxn)        &#123;            minndex=find_mindex();            num[minndex]=-num[minndex];            predex=pre(minndex);            num[predex]-=num[minndex];            nextdex=nex(minndex);            num[nextdex]-=num[minndex];        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Pentagon #%d:\n"</span>,c);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d %d %d %d\n\n"</span>,num[<span class="hljs-number">0</span>],num[<span class="hljs-number">1</span>],num[<span class="hljs-number">2</span>],num[<span class="hljs-number">3</span>],num[<span class="hljs-number">4</span>]);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>ACM Contest 2014</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题 16.11. 跳水板</title>
    <link href="/2020/07/08/%E9%9D%A2%E8%AF%95%E9%A2%98-16-11-%E8%B7%B3%E6%B0%B4%E6%9D%BF/"/>
    <url>/2020/07/08/%E9%9D%A2%E8%AF%95%E9%A2%98-16-11-%E8%B7%B3%E6%B0%B4%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h4 id="面试题-16-11-跳水板"><a href="#面试题-16-11-跳水板" class="headerlink" title="面试题 16.11. 跳水板"></a><a href="https://leetcode-cn.com/problems/diving-board-lcci/" target="_blank" rel="noopener">面试题 16.11. 跳水板</a></h4><p>难度简单37收藏分享切换为英文关注反馈</p><p>你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为<code>shorter</code>，长度较长的木板长度为<code>longer</code>。你必须正好使用<code>k</code>块木板。编写一个方法，生成跳水板所有可能的长度。</p><p>返回的长度需要从小到大排列。</p><p><strong>示例：</strong></p><pre><code class="hljs angelscript">输入：shorter = <span class="hljs-number">1</span>longer = <span class="hljs-number">2</span>k = <span class="hljs-number">3</span>输出： &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;</code></pre><p><strong>提示：</strong></p><ul><li>0 &lt; shorter &lt;= longer</li><li>0 &lt;= k &lt;= 100000</li></ul><p><strong>解题思路：</strong></p><p>​    很简单的一道题目，题目给出k的范围是0~100000，那么就知道需要用O(n)的时间复杂度</p><p>​    题意中只需要设置一个变量i，就可以得到shorter的数量i和longer的数量k-i，那么Length = (k - i) * shorter + i * longer;</p><p>​    显然，这是个一次关系，变换可得 Length = (longer - shorter) * i + k * shorter;</p><p>​    那么我们给出以下代码，便可通过测试</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">divingBoard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> shorter, <span class="hljs-keyword">int</span> longer, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;();        &#125;        <span class="hljs-keyword">if</span>(shorter == longer)        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;longer*k&#125;;        &#125;                <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ves</span><span class="hljs-params">(k+<span class="hljs-number">1</span>)</span></span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; ves.<span class="hljs-built_in">size</span>();i++)        &#123;            ves.at(i) = (k - i) * shorter + i * longer;        &#125;        <span class="hljs-keyword">return</span> ves;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>LeetCode每日一题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/06/hello-world/"/>
    <url>/2020/07/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
