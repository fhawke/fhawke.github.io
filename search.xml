<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>面试题 16.11. 跳水板</title>
    <url>/2020/07/08/%E9%9D%A2%E8%AF%95%E9%A2%98-16-11-%E8%B7%B3%E6%B0%B4%E6%9D%BF/</url>
    <content><![CDATA[<h4 id="面试题-16-11-跳水板"><a href="#面试题-16-11-跳水板" class="headerlink" title="面试题 16.11. 跳水板"></a><a href="https://leetcode-cn.com/problems/diving-board-lcci/" target="_blank" rel="noopener">面试题 16.11. 跳水板</a></h4><p>难度简单37收藏分享切换为英文关注反馈</p>
<p>你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为<code>shorter</code>，长度较长的木板长度为<code>longer</code>。你必须正好使用<code>k</code>块木板。编写一个方法，生成跳水板所有可能的长度。</p>
<p>返回的长度需要从小到大排列。</p>
<p><strong>示例：</strong></p>
<pre><code class="hljs angelscript">输入：
shorter = <span class="hljs-number">1</span>
longer = <span class="hljs-number">2</span>
k = <span class="hljs-number">3</span>
输出： &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;</code></pre>

<p><strong>提示：</strong></p>
<ul>
<li>0 &lt; shorter &lt;= longer</li>
<li>0 &lt;= k &lt;= 100000</li>
</ul>
<p><strong>解题思路：</strong></p>
<p>​    很简单的一道题目，题目给出k的范围是0~100000，那么就知道需要用O(n)的时间复杂度</p>
<p>​    题意中只需要设置一个变量i，就可以得到shorter的数量i和longer的数量k-i，那么Length = (k - i) * shorter + i * longer;</p>
<p>​    显然，这是个一次关系，变换可得 Length = (longer - shorter) * i + k * shorter;</p>
<p>​    那么我们给出以下代码，便可通过测试</p>
<pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span>
<span class="hljs-keyword">public</span>:
    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">divingBoard</span><span class="hljs-params">(<span class="hljs-keyword">int</span> shorter, <span class="hljs-keyword">int</span> longer, <span class="hljs-keyword">int</span> k)</span> </span>&#123;
        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">0</span>)
        &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;();
        &#125;
        <span class="hljs-keyword">if</span>(shorter == longer)
        &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&#123;longer*k&#125;;
        &#125;
        
        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">ves</span><span class="hljs-params">(k+<span class="hljs-number">1</span>)</span></span>;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; ves.<span class="hljs-built_in">size</span>();i++)
        &#123;
            ves.at(i) = (k - i) * shorter + i * longer;
        &#125;
        <span class="hljs-keyword">return</span> ves;
    &#125;
&#125;;</code></pre>





]]></content>
      <categories>
        <category>LeetCode每日一题</category>
      </categories>
      <tags>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-UCF pentastic</title>
    <url>/2020/07/19/ACM-UCF-pentastic/</url>
    <content><![CDATA[<p><img src="/2020/07/19/ACM-UCF-pentastic/Y%5B50WK518U9FC0QRV06VJ4D.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/07/19/ACM-UCF-pentastic/QMIROO@DB6EL%5DX%7DGRSAMPXM.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/07/19/ACM-UCF-pentastic/image-20200719114428334.png" srcset="/img/loading.gif" alt></p>
<pre><code class="hljs c++">
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">9999</span>;
<span class="hljs-keyword">int</span> num[<span class="hljs-number">10</span>];
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>== x?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>+x;
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>==x?<span class="hljs-number">4</span>:x<span class="hljs-number">-1</span>;
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_mindex</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">int</span> mindex=maxn;
    <span class="hljs-keyword">int</span> minval=<span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)
    &#123;
        <span class="hljs-keyword">if</span>(num[i]&lt;minval)
        &#123;
            mindex=i;
            minval=num[i];
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> mindex;
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">int</span> t;
    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;t);

    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c=<span class="hljs-number">1</span>;c&lt;=t;c++)
    &#123;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)
        &#123;
            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num[i]);
        &#125;
        <span class="hljs-keyword">int</span> minndex,predex,nextdex;
        <span class="hljs-keyword">while</span>(find_mindex()!=maxn)
        &#123;
            minndex=find_mindex();
            num[minndex]=-num[minndex];
            predex=pre(minndex);
            num[predex]-=num[minndex];
            nextdex=nex(minndex);
            num[nextdex]-=num[minndex];
        &#125;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Pentagon #%d:\n"</span>,c);
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d %d %d %d\n\n"</span>,num[<span class="hljs-number">0</span>],num[<span class="hljs-number">1</span>],num[<span class="hljs-number">2</span>],num[<span class="hljs-number">3</span>],num[<span class="hljs-number">4</span>]);


    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>







]]></content>
      <categories>
        <category>ACM Constest</category>
      </categories>
      <tags>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM-UCF-PacMan</title>
    <url>/2020/07/19/ACM-UCF-PacMan/</url>
    <content><![CDATA[<p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719135942.png" srcset="/img/loading.gif" alt></p>
<p><img src="/2020/07/19/ACM-UCF-PacMan/QQ%E5%9B%BE%E7%89%8720200719140201.png" srcset="/img/loading.gif" alt></p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX=<span class="hljs-number">105</span>;
<span class="hljs-keyword">int</span> board[MAX][MAX];<span class="hljs-comment">//存储游戏板信息</span>
<span class="hljs-keyword">int</span> best[MAX][MAX];<span class="hljs-comment">//存储最好分数</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;
    <span class="hljs-keyword">int</span> n, r, c;<span class="hljs-comment">//游戏板数n，游戏板的行数r和列数c</span>
    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-number">1</span>; t&lt;=n; t++) &#123;
        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;r, &amp;c);
        <span class="hljs-comment">//读取游戏板中信息</span>
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;r; i++) &#123;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;c; j++) &#123;
                <span class="hljs-comment">//将pacman的起点和终点标记为0</span>
                <span class="hljs-keyword">if</span>((!i &amp;&amp; !j) || (i==r<span class="hljs-number">-1</span> &amp;&amp; j==c<span class="hljs-number">-1</span>)) &#123;
                    <span class="hljs-keyword">char</span> temp;
                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">" %c"</span>, &amp;temp);
                    board[i][j]=<span class="hljs-number">0</span>;
                &#125;
                <span class="hljs-keyword">else</span>
                    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;board[i][j]);
            &#125;
        &#125;
        <span class="hljs-built_in">memset</span>(best, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(best));
        <span class="hljs-comment">//填写第一行的最好分数</span>
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;c; i++)
            best[<span class="hljs-number">0</span>][i]=best[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+board[<span class="hljs-number">0</span>][i];
        <span class="hljs-comment">//填写第一列的最好分数</span>
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;r; i++)
            best[i][<span class="hljs-number">0</span>]=best[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+board[i][<span class="hljs-number">0</span>];
        <span class="hljs-comment">//循环遍历每个可能的Pac Man子问题并解决它</span>
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;r; i++) &#123;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;c; j++) &#123;
                best[i][j]=<span class="hljs-built_in">max</span>(best[i<span class="hljs-number">-1</span>][j], best[i][j<span class="hljs-number">-1</span>])+board[i][j];
            &#125;
        &#125;
        <span class="hljs-comment">//输出最终结果</span>
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Game Board #%d: %d\n"</span>, t, best[r<span class="hljs-number">-1</span>][c<span class="hljs-number">-1</span>]);
        <span class="hljs-keyword">if</span>(t&lt;n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

]]></content>
      <categories>
        <category>ACM Constest</category>
      </categories>
      <tags>
        <tag>easy</tag>
      </tags>
  </entry>
</search>
